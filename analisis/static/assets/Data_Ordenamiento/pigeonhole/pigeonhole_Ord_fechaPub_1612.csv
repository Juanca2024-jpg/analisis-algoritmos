0,1,2,3
"""Computer Science, Academia and Industry"" as pedagogical model to enhance Computational thinking","Meerbaum-Salant, Orni and Haberman, Bruria and Pollack, Sarah",2015,"The Computer Science, Academia and Industry extra-curricular program has been operated for Israeli high school students majoring in computer science. A case study was conducted aimed to identify computational thinking in students' project development processes."
"""Data comes from the real world"": A Constructionist Approach to Mainstreaming K12 Data Science Education","Ravi, Prerna and Parks, Robert and Masla, John and Abelson, Hal and Breazeal, Cynthia",2024,"Data science is emerging as a crucial 21st-century competence, influencing professional practices from citing evidence when advocating for social change to developing artificial intelligence (AI) models. For middle and high school students, data science can put formerly decontextualized subjects into real-world scenarios. Many existing curricula, however, lack authenticity and personal relevance for students. A critique of data science courseware cites the lack of ""author proximity,"" in which students do not contribute to the data's production or see their personal experiences reflected in the data. This paper introduces a novel data science curriculum to scaffold middle and high school students in undertaking real-world data science practices. Through project-based learning modules, the curriculum engages students in investigating solutions to community-based problems through visualization and analysis of live sensor data and public data sets. Materials include formative assessments to help educators (especially those from non-math and computing backgrounds) measure their students' abilities to identify statistical patterns, critically evaluate data biases, and make predictions. As we pilot and co-design with teachers, we will look closely at whether the curriculum's resources can successfully support non-technical practitioners engaging in an integrated curriculum."
"""Look at Our Smart Shoe"" - a Scalable Online Concept for Introducing Design as Part of Computational Thinking in Grades 1-6","Mannila, Linda and Skog, Mia",2023,"While programming is a process covering many stages, many of the tasks K-12 students meet at school are small with little need for, e.g., analysis or design. These earlier phases are, however, important to let children meet open-ended problems, brainstorm solutions and ideate their own creative designs. In this paper we present a model for an online, scalable and scaffolded design workshop for covering such aspects at K-12 level. Through a case study with 1200 students and 60 teachers on IoT and smart things, we describe the workshop and the resulting designs. While the students managed to design their own artifacts, more time had been needed for covering ethical aspects related to technology design. The results suggest creating separate workshops for different grade levels, and also for design and ethical aspects respectively. Moreover, additional resources could support teachers in continuing the discussion with the students after the workshop."
"""That's What Science Is, All This Data:"" Coding Data Visualizations in Middle School Science Classrooms","Krakowski, Ari and Greenwald, Eric and Roman, Natalie",2022,"In this experience report, we describe the Investigating Air Quality curriculum unit that integrates computational data practices with science learning in middle school science classrooms. The unit is part of the Coding Science Internship instructional model, designed to broaden access to computer science (CS) learning through scalable integration in core science courses, and through confronting barriers to equitable participation in STEM. In this report, we describe the core features of the unit and share preliminary findings and insights from student experiences in 13 science classrooms. We discuss affordances and challenges for student learning of computational data practices in formal science classrooms, and conclude with emerging recommendations for instructional designers."
"""The \""COOL Clubs\"": Supporting gifted primary school students in STEAM""","Schwinghammer, Michaela and Milisic, Daniela and Schmidthaler, Eva and Sabitzer, Barbara",2024,"The rapid rise of computational technologies has heightened the demand for proficient computer scientists. A strong foundation in Computer Science (CS) and Digital Education (German: Digitale Grundbildung DGB) has become crucial, even for young learners. Despite the growing importance of CS and DGB in Austria, a gap remains in comprehensive understanding among students and educators. This study aims to bridge this gap by making CS accessible to primary school students and teachers. The solution, COOL Lab, is an active learning center offering diverse STEAM (Science, Technology, Engineering, Arts, and Mathematics) programs. These programs facilitate cross-disciplinary education, supported by innovative CS technologies, nurturing computational thinking (CT) as a problem-solving tool, and enhancing digital skills. Focusing on COOL Lab Clubs, tailored for gifted primary school students, specifically the 'Girls* Only IT-Club' and 'Mini Club', this research first introduces these clubs and then presents insights from four club activities, along with methodologies enhancing CS and CT comprehension. Early results from a questionnaire involving 20 participants aged 9-10 were analyzed. At the outset, almost half of the participants, particularly girls, lacked exposure to CT and CS yet showed eagerness to learn. Initial findings of the club evaluations indicate a strong interest in STEM (Science, Technology, Engineering, and Mathematics) as well as CS and a positive response to the COOL Clubs."
"""This is like a toy, it already got me"": Results of Two Usability Studies of Robotito VPL App with Teachers: Robotito VPL Usability Evaluations","Abelda\~{n}o, Romina and Bakala, Ewelina and Hitta, Santiago and Pires, Ana Cristina",2024,"The relevance of computational thinking (CT) in early education is globally recognized, with Uruguay already incorporating it into kindergarten curricula. However, there is a notable disconnect: existing CT tools, primarily devised for small home groups, fall short in larger classroom settings. To bridge this gap, we developed Robotito VPL – an innovative, free, open-source application tailored to teachers with no programming background. Robotito VPL enables teachers to guide young children in CT learning with Robotito, a robot that engages with its surroundings, supporting a playful, hands-on learning experience for children. This paper presents the results of two usability evaluations with seven teachers. We then translated the outcomes of these evaluations into valuable lessons learned and specific design requirements."
"""We are in this together"": Supporting Neurodiverse Children in Participatory Design through Design Partnering","Iversen, Noah Teglvang Sejer and Ernstsen, Mathias Lundgaard and Iversen, Ole Sejer and Iivari, Netta and Kinnula, Marianne and Sharma, Sumita and Eriksson, Eva",2024,"We report how designers support active engagement of neurodiverse children (13 -16 y.o.) in participatory design (PD) through “Design Partnering”. Design partnering denotes a process in which neurodiverse children are teamed up with neurotypical peers to help them overcome cognitive, social, and relational barriers and thus make their engagement more active during design. We contribute with studies of design partnering in three different PD activities: Field studies, Ideation, and Prototyping. We map out the opportunities and challenges we faced in our study when applying design partnering in PD research. We discuss our findings to lay out future studies to be conducted in Child-Computer Interaction research to provide more knowledge on the potentiality and challenges of design partnering in PD."
"""We'll be Scratching all the Time""","Killen, Heather and Coenraad, Merijke and Cabrera, Lautaro and Mills, Kelly and Ketelhut, Diane Jass and Plane, Jan",2020,"School systems globally have begun to integrate computational thinking (CT) practices into elementary teaching and learning standards to provide young students with a comfort for and foundational understanding of computer science. This integration requires educating teachers to develop and implement CT learning opportunities. Our work contributes to best practice by exploring the role language plays in elementary teachers' discussions and development of CT-infused science lessons. To do this, we captured and analyzed the language used by elementary teachers as they spoke and wrote about CT in a multi-week professional development experience during which the teachers created and delivered CT-infused lessons to their students. We determined that teachers exhibited differing CT conceptualizations, which we categorized from broad to narrow. These differences were not, however, observed in either their spoken or written language. While there were instances of teachers using language that mirrored how the facilitators discussed CT, this use did not align with how they conceptualized CT. Our work analyzing connections between CT language use and CT conceptualization suggests that in order to understand how teachers are conceptualizing CT, professional development designers and teacher educators should focus on creating opportunities for teachers to employ CT practices in context rather than relying only on language. We feel this will support a more precise and nuanced engagement with CT."
1 WHAT IS COMPUTATIONAL THINKING?,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
10 Binary Games for Computer Science Education,"Wright, Hannah and Aycock, John",2020,"In the race to teach programming to large, diverse audiences, low-level topics have received short shrift. We address this gap by presenting two (""10"") games we have designed - one a card game, the other an online game - to help students learn both binary manipulation and operations. These two games stand out from existing computer science 'edutainment' through their novel presentation and unique take on topics that are relatively unexplored in games."
"1st ACM SIGSPATIAL Workshop on Geo-Computational Thinking in Education (GeoEd 2019): Chicago, Illinois, USA - November 5, 2019","Magdy, Amr and Dony, Coline",2020,"The 1st International Workshop on Geo-computational Thinking in Education (GeoEd 2019) was held in conjunction with the 27th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (ACM SIGSPATIAL 2019). The workshop is intended to bring together experts from both geography (or related) and computer science disciplines who have primary interest in geospatial data and technologies, either from academia or industry, to discuss the grand challenges towards improving existing learning pathways through integration of geo-computational thinking in higher education. This could impact a variety of disciplines that increasingly deal with geospatial data beyond geography, such as social sciences, environmental sciences, public policy, climatology, and other geo-related disciplines. The workshop speakers and attendants have discussed their vision on challenges and opportunities of various topics within the workshop scope."
2 COMPUTATIONAL METHODS,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
3 COMPUTING MACHINES,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
3CPEs: Concrete Computational Concepts Programming Environments for Elementary Computer Science Education,"Sung, Ching-Ying and Cherng, Fu-Yin and Chiu, Yi-Lun and Chen, Peng-Hsi and Chen, Bing-Yu",2024,"This study introduces the Concrete Computational Concepts Programming Environments (3CPEs), an innovative approach designed to help elementary students grasp abstract computational concepts through concrete metaphors using tangible and everyday objects. Traditional programming environments for children focus on concrete programming language syntax and semantics yet often fall short in conveying advanced computational concepts. To address this gap, 3CPEs combine the hands-on appeal of computer-science unplugged activities with the versatility of programming environments, using familiar objects and gamified elements to visualize abstract computational and algorithmic ideas. An example is CT (Computational Thinking) Chef, a 3CPEs implementation to enhance elementary students’ understanding of programming concepts. Through design workshops with five elementary programming teachers, we preliminarily identified teaching challenges and evaluated 3CPEs’ efficacy as an educational tool. The feedback underscores CT Chef’s potential in facilitating the teaching of intricate computational concepts for young learners."
3rd International workshop on collaborative teaching of globally distributed software development (CTGDSD 2013),"Faulk, Stuart and Young, Michal and Prikladnicki, Rafael and Weiss, David M. and Yu, Lian",2013,Sin Valor
4 COMPUTER SCIENCE,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
6 DESIGNING FOR HUMANS,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
7 COMPUTATIONAL SCIENCE,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
8 TEACHING COMPUTATIONAL THINKING FOR ALL,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
9 FUTURE COMPUTATION,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
A brief introduction to TACCLE 3 — coding European project,"García-Peñalvo, Francisco J.",2016,Sin Valor
A Case Study of Middle Schoolers' Use of Computational Thinking Concepts and Practices during Coded Music Composition,"Zhang, Yifan and Krug, Douglas Lusa and Mouza, Chrystalla and Shepherd, David C. and Pollock, Lori",2022,"Researchers and practitioners have demonstrated various benefits of introducing computational thinking (CT) through music composition coding. While researchers have studied the impacts on participant attitudes towards CT and their learning of CT concepts, more case studies are needed on both learning CT concepts as well as CT practices, i.e., the processes of constructing music coding projects. This paper presents a case study of middle schoolers in an informal learning environment focused on integrating music composition with coding in TunePad. Specifically, we collected and analyzed logs of coding events, final code products, and surveys to explore both CT concept use and CT practices exhibited by the participants as they completed open-ended music coding activities to create their own melodies with specific music and CT requirements and recommendations."
A case study on cooperative problem solving processes in small 9th grade student groups,"Standl, Bernhard",2016,Sin Valor
A Collaborative Approach to Integrate Computational Thinking in an Integrated STEM Curriculum,"Yang, Dazhi and Feng, Shi",2022,Sin Valor
A Collaborative Game-Based Learning Framework to Improve Computational Thinking Skills,"Jesus, Ângelo Magno de and Silveira, Ismar Frango",2019,Sin Valor
A Comparative Analysis of Tools &amp; Task Types for Measuring Computational Problem-Solving,"Bumbacher, Engin and Brender, J\'{e}r\^{o}me and Davis, Richard Lee",2024,"How to measure students' Computational Problem-Solving (CPS) competencies is an ongoing research topic. Prevalent approaches vary by measurement tools (e.g., interactive programming, multiple-choice tests, or programming-independent tests) and task types (e.g., debugging problems or Parson problems). However, few studies have examined the measurement tools of CPS competencies themselves: affordances and limitations of the measurement tools and how they compare, or whether different task types might elicit CPS competencies differently. Research needs to address these questions in order to better understand how to design robust, generalizable, and effective measurement tools for CPS competencies. This paper presents an exploratory study that contributes to this research direction. It is part of a larger international project to develop an open-access formative assessment platform for CPS, which includes a novel authoring tool for a wide range of task types for interactive block-based programming. We used the tool to create an interactive programming experience with multiple task types and gave it to more than 300 secondary school students from different countries. We also administered a validated multiple-choice measurement of Computational Thinking with block-based programs. We focused on task complexity as a characteristic of task type, using a classification scheme based on task design features. Comparing students' performances on tasks of different complexity and using two distinct measurement tools, we found that the multiple-choice measurement only partially predicts performance in the interactive programming task. Additionally, its predictive capacity varies significantly between task types of differing complexity."
A Computational Inflection for Scientific Discovery,"Hope, Tom and Downey, Doug and Weld, Daniel S. and Etzioni, Oren and Horvitz, Eric",2023,Enabling researchers to leverage systems to overcome the limits of human cognitive capacity.
A computational thinking course accessible to non-stem majors,"Kafura, Dennis and Bart, Austin Cory and Chowdhury, Bushra",2018,"We describe the content, pedagogy and technology of a computational thinking course. While open to students in all majors, in practice the course serves students in predominantly non-STEM majors. We have seen the positive impact on student motivation of the data science context used in the course and the pedagogical value of the ""cohort"" model of collaborative peer learning. The technology includes a scaffolded programming environment for accessing curated real-world data sets."
A Computational Thinking Course for Pre-Service Teachers,"Oliveira, Eduardo C. and Correia, Ronaldo C. M. and Azevedo, Rodolfo and Telles, Simone and Macedo, Alessandra A. and Bittencourt, Roberto A.",2022,Sin Valor
A computational thinking module for secondary students and pre-service teachers using Bebras-style tasks,"Lehtim\""{a}ki, Taina and Hamm, James and Mooney, Aidan and Casey, Kevin and Monahan, Rosemary and Naughton, Thomas J.",2022,"We have developed a Transition Year (TY) computational thinking module (for 15-16 year olds) based on Bebras tasks that was delivered online by teachers at 240 schools in Ireland during 2021-2022. To serve primary and secondary pre-service teachers, we have started developing a 24-hour module based on this TY module. We are co-creating the module with education experts and CS academics working collaboratively. The education experts consist of academics and pre-service teachers from both primary and secondary teaching departments at our institution."
A Computational Thinking Obstacle Course Based on Bebras Tasks for K-12 Schools,"Lehtim\""{a}ki, Taina and Monahan, Rosemary and Mooney, Aidan and Casey, Kevin and Naughton, Thomas J.",2023,"This paper describes an unplugged computational thinking (CT) resource for primary and secondary schools developed from Bebras tasks. In Ireland, CT is not part of the primary school curriculum or mandatory in secondary schools. However, the National Council for Curriculum and Assessment is in the process of revising the primary school curriculum to include aspects of CT. Our aim for creating this CT Obstacle Course is to introduce teachers (and pupils) without formal computer science training to the subject of CT. This is done in a manner that informs and motivates, and gives them the confidence to deliver CT materials in the classroom. We also want to find out from teachers how useful and important this type of resource is for developing problem-solving skills, and if our unplugged activity can support learning at various skill levels. Our CT Obstacle Course includes 14 Bebras tasks for primary schools and an additional 6 Bebras tasks for secondary schools. The activity is suitable for indoors and outdoors and is completed in groups, promoting teamwork and communication. We have delivered it to 146 primary school classes during 38 school visits between May 2021 and June 2022. It has been undertaken by 3,445 pupils and 195 teachers and other school staff. This paper describes our CT resource in detail, and reports teacher feedback from primary schools."
A Computational Thinking Test for Senior High School Students,"Hu, Chiu-Fan and Wu, Cheng-Chih",2023,"We have developed a quantitative tool for assessing senior high school students' computational thinking skills and administered it in the Taipei metropolitan area of Taiwan. Our CT test is language/tool/knowledge-independent and focuses on four key CT concepts: decomposition, data representation, algorithms, and pattern generalization. Our paper outlines the development process of the CT test, including its constructs, reliability, and validity, and discusses its educational implications for computing courses. This CT test provides a valuable resource for computing teachers who wish to assess their students' CT abilities and tailor their teaching methods accordingly."
A Computational-thinking-oriented Progressive Teaching Mode for Python Course,"Ren, Haodong and Yang, Li and Jiang, Liheng and Bai, Yu and Lu, Wei and Chang, Jie",2021,Sin Valor
A conceptual model for cooperative thinking,"Russo, Daniel and Missiroli, Marcello and Ciancarini, Paolo",2018,"Training computer scientists to address wicked problems means to focus respectively on the individual capability to think in a computational-oriented way (i.e., Computational Thinking), and on the social dimension of coding (i.e., Agile Values). In this study we propose the conceptual model of Cooperative Thinking, a new education construct of team-based computational problem solving. Cooperative Thinking is not only the sum of Computational Thinking and Agile Values, rather it is a new overarching competence suitable to deal with complex software engineering problems. We suggest to tackle the Cooperative Thinking construct as an education goal, to train new generations of software developers to Pareto-optimize both their individual and teaming performances."
A congress for children and computational thinking for everyone,"Sabitzer, Barbara and Demarle-Meusel, Heike",2018,"As final event of the project ""Informatics - A Child's Play?!"", which aimed at introducing computational thinking in primary and secondary schools, the authors initiated the first Children's Congress in 2016 with the main theme of ""Languages - Pictures - Information"". This is now an annual event, where all participating children can slip into the role of researchers and present the results of their projects accomplished together with their teachers as well as teacher students of different master courses. As preparation the project teams get an introduction into computational thinking and several computer science concepts with the task of applying at least one of them in their project and the development of creative products. The themes of the Children's Congress are relatively open and fit into every subject, because our main aim is introducing computational thinking ""by the way"" to all participants. During their work on cross-curricular or even subject specific projects, pupils, students and teachers learn that basics of computational thinking are or can be integrated in every subject. This paper reports on the implementation and procedure of the Children's Congress and gives an overview of the projects accomplished in the first two years (2016 and 2017). It describes how and where computational thinking has been integrated and presents the main results of the evaluation gained from interviews and questionnaires."
A container terminal logistics computational architecture with MPSoC distributed cooperative computing perspective,"Bin, Li",2015,Sin Valor
A curriculum of computational thinking as a central idea of information &amp; media literacy,"Dengel, Andreas and Heuer, Ute",2018,"Using, processing and evaluating digitized information is relevant to every subject in primary and secondary school education. As this information is represented, modified and perceived through analog and digital media, competencies including critical reflection, knowledge, usage, and creation of information and media have been included in the German education system. Due to the highly inter- and transdisciplinary character of these skills, the development of a combined information and media literacy to teach the critical handling, reflection and design of information and (digital) media similar to a classical literacy concerning reading and writing skills. As this skill is fundamental for understanding the everyday digital environment, Computational Thinking poses a central idea of information and media literacy in order to understand how information of the real or fictional world are represented through digital media, how this digitized information is automaticly processed and displayed using media systems as well as how the resulting representations are interpreted. Information and media literacy adresses every subject and school type which is why it has to be integrated into future teacher education curricula. This paper shows the conception and implementation of an Information and Media Literacy certificate for student teachers with a focus on Computational Thinking. Based on recent studies, established curricula for Media Literacy, Computer Literacy and Digital Literacy as well as present Bavarian school curricula for Computer Science, we built the curriculum for the Computational Thinking part of the certificate upon fundamental ideas of Computer Science: Representation of Information, Software Engineering, Algorithms, Networks, Data Integrity and Data Security, Languages, and Physical Computing."
A Design and Development of Internet of Things (IoT) System and Learning Activity to Promote Computational Thinking,"Sonsilphong, Suphachoke and Sonsilphong, Amornthep and Hormdee, Daranee and Sae-Joo, Phongthanat",2022,Sin Valor
A designerly approach as a foundation for school children's computational thinking skills while developing digital games,"Brooks, Eva and Sj\""{o}berg, Jeanette",2020,"This paper contributes to the contemporary debate on the increasing use of computational thinking (CT) in primary schools. It is based on an empirical study in which 28 Swedish third-grade school children (9-10 years of age) participated in a creative workshop where they were challenged to design a digital game using stop-motion film technique, working in groups. The study applies a designerly approach to game design activities to investigate what aspects of computational skills can be identified when children employ stop motion filmmaking as a means to envision a digital game design idea and how a designerly approach can enable them to enact dimensions of their computational skills? The data included video observations, casual conversations, and stop-motion videos representing the children's game design ideas. The analysis identified three aspects of computational thinking strategies while children produced stop-motion films: step-by-step procedural skills; design and arrangement skills; and computational perspectives."
A Didactic Scenario for Implementation of Computational Thinking using Inquiry Game Learning,"Psycharis, Sarantos and Kotzampasaki, Evangelia",2017,"We present an education scenario for the simulation of the ""pixel"" of a computer screen. The teaching and learning process is implemented as a game problem based scenario related to the ""rescue"" of an object by the students. We used the Arduino controller and the Ejs and S4A software in order to motivate students to be involved in the computational experiment methodology and the dimensions of the computational thinking (CT). Research is in process for the effectiveness of this scenario to 5th and 6th grade students using a CT questionnaire."
A Digital Game-Based Model for Assessing Computational Thinking Skills,"Yi, Xitian and Liu, Fanhua and Zhan, Zehui",2022,Sin Valor
A Feasibility Study of Arducation Bot : An Educational Robotics and Mobile Application Kit for Computational Thinking Skills,"Phetsrikran, Titiphan and Massagram, Wansuree and Phoka, Thanathorn and Harfield, Antony",2018,Sin Valor
A first proposal of Pedagogic Conversational Agents to develop Computational Thinking in children,"Urrutia, Elizabeth K. Morales and Oca\~{n}a, Jos\'{e} Miguel and P\'{e}rez-Mar\'{\i}n, Diana and Tamayo, Silvia",2017,"Pedagogic Conversational Agents are interactive systems that teach by talking to the students. They have been used in several domains to develop competences such as storytelling or negotiation from University to Pre-Primary Education. However, in the literature, no cases of using agents for teaching programming to develop computational thinking in children have been found. In the last decades, there is a growing interest in developing computational thinking in children. According to some authors, if children develop computational thinking, they will be able to solve not only computer problems but their daily life problems in a better way. It is under research which educational technologies and methodologies can be more adequate depending on the context to achieve this goal. In this paper, it is proposed, for the first time, the use of Pedagogic Conversational Agents to develop computational thinking in children. Given the complexity of designing this new type of agent, and as it has been done in previous occasions when trying to design a new agent, the MEDIE methodology will be followed to eventually integrate the agent into the classrooms."
A Formative Assessment Tool to Support Computational Thinking in the Classroom,"Orozco-Garcia, Laura and Gonzalez, Carolina and Montano, Juan and Mondragon, Cristian and Tobar-Munoz, Hendrys",2019,Sin Valor
A Four Point Student-Led Strategy for Attracting Diverse Small College Commuter Campus Students to Computer Science: (Abstract Only),"Zahuantitla, Gabrielle I. and Holder, Aryanna",2018,"Currently, there is a push for integrating computer science education and computational thinking into the classroom. For example, major local and national organizations such as CS4ALL: NYC and Code.org aim to expose all students, including typically underrepresented groups, to computer science education nurturing students' intrinsic motivation. Furthermore, current research indicates that first-exposure to computer science is an important deciding factor as to whether students are open to computer science in future endeavors. Being one of the most diverse campuses in the nation, and a commuter campus, The State University of New York (SUNY) Old Westbury provides a unique opportunity to pilot how one might go about creating a motivating first exposure to computer science. Through a four point student-led strategy, we explore student pre-conceived attitudes towards computer science and programming to better understand what strategies might increase CS engagement. In order to do this, we host workshops revolving around creative computer science activities such as 3D game design and multimedia art projects. During these workshops, we collect pre and post questionnaires and use their data to gain insight into the Old Westbury student body's notions of computer science. Initial analyzed pre-survey data shows that 70% of students thought Computer Science was difficult. However, post-survey data shows that, after the experience, approximately 90% of students want to take additional workshops involving Computer Science."
A framework for computational thinking across the curriculum,"Perkovi\'{c}, Ljubomir and Settle, Amber and Hwang, Sungsoon and Jones, Joshua",2010,"We describe a framework for implementing computational thinking in a broad variety of general education courses. The framework is designed to be used by faculty without formal training in information technology in order to understand and integrate computational thinking into their own general education courses. The framework includes examples of computational thinking in a variety of general education courses, as well as sample in-class activities, assignments, and other assessments for the courses. The examples in the different courses are related and differentiated using categories taken from Denning Great Principles of Computing, so that similar types of computational thinking appearing in different contexts are brought together. This aids understanding of the computational thinking found in the courses and provides a template for future work on new course materials. Specific examples of computational thinking in the design category are provided in the context of three distinct courses."
A Framework for Decomposition in Computational Thinking,"Rich, Peter J. and Egan, Garrett and Ellsworth, Jordan",2019,"Computational Thinking has become an important cognitive skill to develop in all areas of education. Despite its increasing popularity, the construct itself is only partially understood. There are few measures currently in place that advance our understanding of computational thinking and its subconstructs. In this article, we analyze existing measures of computational thinking (CT), looking specifically at their measures of decomposition. Decomposition is defined as the process of breaking down a problem into its sub-components. Even though most definitions of computational thinking include decomposition, fewbreak down the decompositional process beyond a basic definition. As one of the first steps in the computational thinking process, it is important to better understand the various manners in which decomposition occurs, which methods are most effective, and under what conditions. To better understand the decompositional process, we analyze evidence of decompositional process in a variety of disciplines. We then present a framework for decomposition in computational thinking. We demonstrate how this framework may help educators to better prepare students to break down complex problems, as well as provide guidance for how decompositional ability might be measured."
A framework for hypothesis-driven approaches to support data-driven learning analytics in measuring computational thinking in block-based programming,"Grover, Shuchi and Bienkowski, Marie and Basu, Satabdi and Eagle, Michael and Diana, Nicholas and Stamper, John",2017,"K-12 classrooms use block-based programming environments (BBPEs) for teaching computer science and computational thinking (CT). To support assessment of student learning in BBPEs, we propose a learning analytics framework that combines hypothesis- and data-driven approaches to discern students' programming strategies from BBPE log data. We use a principled approach to design assessment tasks to elicit evidence of specific CT skills. Piloting these tasks in high school classrooms enabled us to analyze student programs and video recordings of students as they built their programs. We discuss a priori patterns derived from this analysis to support data-driven analysis of log data in order to better assess understanding and use of CT in BBPEs."
A Framework for Using Hypothesis-Driven Approaches to Support Data-Driven Learning Analytics in Measuring Computational Thinking in Block-Based Programming Environments,"Grover, Shuchi and Basu, Satabdi and Bienkowski, Marie and Eagle, Michael and Diana, Nicholas and Stamper, John",2017,"Systematic endeavors to take computer science (CS) and computational thinking (CT) to scale in middle and high school classrooms are underway with curricula that emphasize the enactment of authentic CT skills, especially in the context of programming in block-based programming environments. There is, therefore, a growing need to measure students’ learning of CT in the context of programming and also support all learners through this process of learning computational problem solving. The goal of this research is to explore hypothesis-driven approaches that can be combined with data-driven ones to better interpret student actions and processes in log data captured from block-based programming environments with the goal of measuring and assessing students’ CT skills. Informed by past literature and based on our empirical work examining a dataset from the use of the Fairy Assessment in the Alice programming environment in middle schools, we present a framework that formalizes a process where a hypothesis-driven approach informed by Evidence-Centered Design effectively complements data-driven learning analytics in interpreting students’ programming process and assessing CT in block-based programming environments. We apply the framework to the design of Alice tasks for high school CS to be used for measuring CT during programming."
A Framework to Assess Melodic Effectiveness in Training Computational Thinking to Visually Impaired People,"Costa, Rui and Neto, Alvaro Costa and Araújo, Cristiana and Henriques, Pedro Rangel",2022,Sin Valor
A Free-Choice Social Learning Network for Computational Thinking,"Jamil, Hasan",2018,Sin Valor
A Game Development to Promote Computational Thinking,"Prompolmaueng, Waraporn and Wetmaha, Apisit and Jamsri, Pornsuree",2021,Sin Valor
A Gang Scheduling Computational Paradigm for Container Terminal Logistics with Processor Affinity,"Li, Bin and Shen, Weiming",2015,Sin Valor
A Generator of Game Programming Challenges for Computational Thinking Development,"de Jesus, Ângelo Magno and Frango Silveira, Ismar",2020,Sin Valor
A Guide Towards a Definition of Computational Thinking in K-12,"Ismail, Redar and Steinbach, Theresa A. and Miller, Craig S.",2022,Sin Valor
A Hands-On Cybersecurity Curriculum Using a Robotics Platform,"Yett, Bernard and Hutchins, Nicole and Stein, Gordon and Zare, Hamid and Snyder, Caitlin and Biswas, Gautam and Metelko, Mary and L\'{e}deczi, \'{A}kos",2020,"This paper presents a study using a robotics platform for teaching computing and cybersecurity concepts to high school students. 38 students attended a week-long camp, starting with projects such as a simulation-only game and a simple autonomous driving program for the robots in order to learn and apply computational thinking (CT) and networking skills. They were then assigned a series of challenges that required developing progressively more advanced cybersecurity measures to protect their robots. This culminated in a final challenge that required implementing defensive measures such as encryption, secure key exchange and sequence numbers. We used an evidence-centered design framework to construct rubrics for grading student work. The pre- and post-test results show that the interventions helped students learn cybersecurity and CT concepts, but they had difficulties with networking concepts. These results correlate with scores from the game and the final challenge. Overall, surveys show that the competition-based robotics learning framework engaged students and supported their overall learning, but our intervention needs to be modified to help students learn networking concepts"
A K-8 Debugging Learning Trajectory Derived from Research Literature,"Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Franklin, Diana",2019,"Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5."
A Literature Review Examining Broadening Participation in Upper Elementary CS Education,"Shehzad, Umar and Recker, Mimi and Clarke-Midura, Jody",2023,"Despite proliferated efforts to integrate computer science in elementary education, there is a dearth of studies that synthesize the current state of CS education research in formal educational contexts, specifically in upper elementary classrooms. Further, while numerous studies have investigated approaches and strategies that broaden participation in computing, the majority of them focus on secondary and post-secondary settings. The present study uses a systematic literature review process to review research conducted with students in formal classroom settings in grades 4, 5, and 6 and published since 2013. We review the research through two questions: What are barriers to broadening participation in CS in upper elementary (grades 4-6)? What instructional approaches and strategies help broaden participation in CS in upper elementary (grades 4-6)? A systematic search of the literature highlighted approaches used for broadening participation, including using various teaching media, designing scaffolds in instruction, and integrating into other subject areas. We conclude by identifying gaps in the research and identifying areas for further research."
A longitudinal study of the effects of a high school robotics and computational thinking class on academic achievement (WIP),"Ko, Pat",2013,Sin Valor
A Machine Learning-Based Adaptive Feedback System to Enhance Programming Skill Using Computational Thinking,"Kaleem, Muhammad and Hassan, Muhammad Awais and Khurshid, Syed Khaldoon",2024,Sin Valor
A Mapping Study of Computational Thinking and Programming in Brazilian K-12 Education,"Santos, Priscila S. C. and Araujo, Luis Gustavo J. and Bittencourt, Roberto A.",2018,Sin Valor
A media-reduced approach towards informatics at primary level,"Antonitsch, Peter K. and Gigacher, Cornelia and Hanisch, Liselotte and Sabitzer, Barbara",2013,"At the moment, informatics education stretches downward to reach primary education. This article emphasizes computational thinking, focuses upon goals of primary education and unveils how to connect to existing teaching and learning patterns when integrating computational thinking into primary education. Furthermore, a framework is sketched to combine computational thinking with computational doing in a media-reduced way."
A method for assessing computational thinking in students using source code analysis,"Pacheco-Portuguez, Steven and Gonzalez-Torres, Antonio and Sancho-Chavarria, Lilliana and Trejos-Zelaya, Ignacio and Monge-Fallas, Jorge and Navas-Su, Jose and Cañas, Alberto J. and Rodríguez, Andrés and Chinchilla, Carol Angulo",2022,Sin Valor
A Method for Assigning Weight to the Assessment Indicators of Computational Thinking with XGBoost,"Zeng, Xinyao and Zhang, Wei and Chen, Yi and Chen, Hao",2023,Sin Valor
A Method of Modifying a ScratchJr Project by Resorting to JSON Stored Project Data,"Spasic, Aleksandar J. and Jankovic, Dragan S. and Djordjevic, Andjelija I.",2021,Sin Valor
A Model for Infusing Computational Thinking Skills at Teacher Colleges in a Developing Country,"Simmonds, Jocelyn and Gutierrez, Francisco J. and Hitschfeld, Nancy and Torrent, Catalina and Casanova, Cecilia and Toro-Guajardo, Sebasti\'{a}n and Mu\~{n}oz, Valent\'{\i}n",2022,"Current advances emphasize that young learners benefit from developing and applying computational thinking (CT) skills to solve problems in a variety of subjects, not limited to mathematics and science. Under this scenario, the inclusion of CT in primary and secondary education will not scale up if pre-service teachers do not actively acquire these skills during their formation. However, how this should be done is not clear. We propose an integration model to infuse CT skills at teacher colleges in Chile, which takes into account our previous work on the topic, as well as current standards, interests, and educational policies in Chile."
A model for piloting pathways for computational thinking in a general education curriculum,"Dierbach, Charles and Hochheiser, Harry and Collins, Samuel and Jerome, Gerald and Ariza, Christopher and Kelleher, Tina and Kleinsasser, William and Dehlinger, Josh and Kaza, Siddharth",2011,"Computational thinking has been identified as a necessary fundamental skill for all students. University curricula, however, are currently not designed to provide such knowledge to a broad student population. In this paper, we report on our experiences in the development of a model for incorporating computational thinking into the undergraduate, general education curriculum at Towson University. We discuss the model in terms of eliciting faculty interest, institutional support, and positive student response. In the first two years of this NSF-funded three-year project, we have developed, piloted and assessed five computational thinking general education courses - an Everyday Computational Thinking course, and four discipline-specific computational thinking general education courses. Initial assessments show promising and significant student, instructor and administration interest in computational thinking as a basis in courses covering multiple disciplines within the general education curriculum."
A Model of Cultivating Computational Thinking Based on Visual Programming,"Xiao, Min and Yu, Xiaohua",2017,Sin Valor
"A MOOC on Computational Thinking for All: Pedagogical Principles, Challenges, and Their Application","Ragonis, Noa and Hazzan, Orit",2022,Sin Valor
A multidisciplinary approach towards computational thinking for science majors,"Hambrusch, Susanne and Hoffmann, Christoph and Korb, John T. and Haugan, Mark and Hosking, Antony L.",2009,"This paper describes the development and initial evaluation of a new course ``Introduction to Computational Thinking'' taken by science majors to fulfill a college computing requirement. The course was developed by computer science faculty in collaboration with science faculty and it focuses on the role of computing and computational principles in scientific inquiry. It uses Python and Python libraries to teach computational thinking via basic programming concepts, data management concepts, simulation, and visualization. Problems with a computational aspect are drawn from different scientific disciplines and are complemented with lectures from faculty in those areas. Our initial evaluation indicates that the problem-driven approach focused on scientific discovery and computational principles increases the student's interest in computing."
A National INCLUDES Alliance Effort to Integrate Problem-Solving Skills into Computer Science Curriculum,"Gates, Ann Q. and Villa, Elsa Q. and Hug, Sarah and Convertino, Christina and Strobel, Johannes",2019,Sin Valor
A Natural User Interface implementation for an Interactive Learning Environment,"Barron-Estrada, Maria Lucia and Zatarain-Cabada, Ramon and Cardenas-Sainz, Brandon Antonio",2020,Sin Valor
A new perspective on computational thinking,"Ya\c{s}ar, Osman",2018,"Addressing its cognitive essence, universal value, and curricular practices."
A New Teaching Pattern Based on PBL and Visual Programming in Computational Thinking Course,"Gao, Peipei and Lu, Mingxiao and Zhao, Hong and Li, Min",2019,Sin Valor
A new way of thinking about computational thinking,"Astrachan, Owen",2009,"Computational Thinking has emerged as an enduring metaphor in teaching and thinking about Computer Science since Jeanette Wing brought the term to our attention in a 2006 CACM article. Computational thinking involves abstraction, but a definition that is too abstract does not help in explaining computational thinking to someone who doesn't already have an intuitive idea of what it is:"
A novel interdisciplinary course in gerontechnology for disseminating computational thinking,"Yang, Hen-I and Martin, Peter and Satterfield, Debra and Babbitt, Ryan and Wong, Johnny and Shelley, Mack and Chang, Carl K.",2011,Sin Valor
A Pair of ACES: An Analysis of Isomorphic Questions on an Elementary Computing Assessment,"Parker, Miranda C. and Garcia, Leiny and Kao, Yvonne S. and Franklin, Diana and Krause, Susan and Warschauer, Mark",2022,"Background and Context. With increasing efforts to bring computing education opportunities into elementary schools, there is a growing need for assessments, with arguments for validity, to support research evaluation at these grade levels. After successfully piloting a 10-question computational thinking assessment (Assessment of Computing for Elementary Students – ACES) for 4th graders in Spring 2020, we used our analyses of item difficulty and discrimination to iterate on the assessment. Objectives. To increase the number of potential items for ACES, we created isomorphic versions of existing questions. The nature of the changes varied from incidental changes that we did not believe would impact student performance to more radical changes that seemed likely to influence question difficulty. We sought to understand the impact of these changes on student performance. Method. Using these isomorphic questions, we created two versions of our assessment and piloted them in Spring 2021 with 235 upper-elementary (4th grade) students. We analyzed the reliability of the assessments using Cronbach’s alpha. We used Chi-squared tests to analyze questions that were identical across the two assessments to form a baseline of comparison and then ran Chi-Squared and Kruskal-Wallis H tests to analyze the differences between the isomorphic copies of the questions. Findings. Both assessment versions demonstrated good reliability, with identical Cronbach’s alphas of 0.868. We found statistically similar performance on the identical questions between our two groups of students, allowing us to compare their performance on the isomorphic questions. Students performed differently on the isomorphic questions, indicating the changes to the questions had a differential impact on student performance. Implications. This paper builds on existing work by presenting methods for creating isomorphic questions. We provide valuable lessons learned, both on those methods and on the impact of specific types of changes on student performance."
A Pedagogical Framework for Developing Abstraction Skills,"Begum, Marjahan and Crossley, Julia and Str\""{o}mb\""{a}ck, Filip and Akrida, Eleni and Alpizar-Chacon, Isaac and Evans, Abigail and Gross, Joshua B. and Haglund, Pontus and Lonati, Violetta and Satyavolu, Chandrika and Thorgeirsson, Sverrir",2025,"Abstraction is a fundamental yet challenging skill to teach and learn in Computer Science education. Traditional frameworks of abstraction and concept formation often emphasize understanding an abstraction over its application, the latter being critical for practical Computer Science. Additionally, a common issue in education is when students may understand a concept in a classroom or a very specific setting but struggle to apply it outside of that context. In response, we present here a novel pedagogical framework designed to enhance both the development and application of abstraction skills in diverse educational contexts within the field of Computer Science. Our framework synthesizes common themes from existing models while introducing a new dimension focused explicitly on the actionable development of abstraction skills. Educators can adapt the framework to various educational contexts to support development of students' abstraction skills. Our framework was iteratively developed through a combination of theoretical analysis and reflective practice across multiple teaching contexts. We demonstrate the suitability of the framework by applying it to various case studies, demonstrating its broad applicability and practical utility. By offering a flexible yet comprehensive structure, our framework enables educators to effectively organize and deliver educational content, guiding students from abstract theoretical concepts to their practical application in Computer Science."
A pedagogy of tinkering: The pedagogical values of productive failure in childhood programming education,"Samuelsson, Robin",2024,"Programming is increasingly becoming a subject across the spectrum of educational environments for preschool children. Concerns have been raised regarding a too instrumental and uncritical implementation of programming. This study follows a preschool and reports on the obstacles infused during a six-month design-based study introducing a programmable floor robot with children, featuring formative focus group sessions and pedagogical development. An activity theoretical approach was taken to examine the various tensions with existing pedagogies that arose during the project and how these led to pedagogical development toward a programming ethos based on making pedagogical materials and tinkering activities, where failure is an inherent part of the educational process. The paper discusses the potential problems of using new subjects with current curricula and how new technologies are part of reshaping childhood pedagogies."
A Physical Computing Workshop to Engage Girls from Low-Income Backgrounds,"Vergara, Katherine",2024,"The persistent gender gap in computer science, especially among women from low-income backgrounds, continues to limit diversity and innovation within the technological sector. This underrepresentation also restricts access to career paths that can enhance social mobility, particularly for women in developing countries. Physical computing offers a hands-on approach that can improve programming skills and computational thinking through interaction with tangible hardware. This research focuses on developing a short physical computing workshop tailored to young girls from low-income communities. The study combines education, tangible interfaces, and coding. Through a series of classroom-based studies and laboratory experiments, this PhD work will assess the impact of the workshop on self-efficacy and learning in programming and computational thinking. The anticipated contributions of this research include insights into the effectiveness of tangible, user-friendly physical computing workshops in increasing engagement among underrepresented groups in computer science."
A Pilot Computer Science and Programming Course for Primary School Students,"Duncan, Caitlin and Bell, Tim",2015,"Computer Science and programming are being introduced to school curricula in many western countries in an effort to equip students with Computational Thinking skills. However, as these subjects are still relatively new to pre-tertiary education there is much investigation to be done into how best to present these topics and how to prepare teachers. In this study we focus on the presentation of topics relating to computing, Computational Thinking, and Computer Science for primary schools.We analyse English-language curricula that have been published, specifically the English, Australian and CSTA curricula for primary schools. From this we establish the main topics covered, and how they are positioned to be suitable for students from the first year of school to approximately their eighth year.We then report on a pilot study of a curriculum based on Computational Thinking; long term the study will encompass a range of topics and year levels, but the pilot focused on topics suitable for 11 to 12 year old students. Here we detail the design of this part of the curriculum, the manner of its delivery, and the experiences and observations of the generalist teacher who taught the course. Through assessment data, student responses to an attitude survey, and class observations we have evaluated the pilot curriculum. The findings of this study are being used to inform the design of a planned larger scale study."
"A plan for immediate immersion of computational thinking into the high school math classroom through a partnership with the Alabama math, science, and technology initiative","Jenkins, Janet T. and Jerkins, James A. and Stenger, Cynthia L.",2012,"This paper describes a design for an immediate immersion of computational thinking into current high school math classrooms in Alabama. Most schools in our region have eliminated computer science classes from the curriculum. Alabama has an existing state initiative to improve mathematics, science and technology education in K-12. The Alabama Math, Science, and Technology Initiative (AMSTI) emphasizes learning by doing, with hands-on, activity based instruction. We have developed an instructional treatment that uses strategically designed computer exercises to push students to form the mental foundation necessary for abstraction and generalization. We selected popular problems from the AMSTI mathematics curriculum and applied our instructional design.The first step we took in implementing our plan for reintroducing computational thinking into the secondary schools was to conduct a workshop for math education leaders. This training was sponsored and supported by AMSTI. Results from the workshop included demonstrating to a select group of math education leaders that computer programming could be easily integrated with the AMSTI math curriculum and could be used to meet the educational goals of the initiative and the educators."
A practical research on the training of middle school students' computational thinking based on problem solving in systematic information process view,"Zhao, Miaomiao and Hu, Weixing",2022,Sin Valor
A pragmatic approach to develop computational thinking skills in novices in Computing Education,"Philip, Mintu and Renumol, V. G. and Gopeekrishnan, R",2013,Sin Valor
A Principled Approach to Designing a Computational Thinking Practices Assessment for Early Grades,"Basu, Satabdi and Rutstein, Daisy and Xu, Yuning and Shear, Linda",2020,"In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. Several existing K-12 CT assessments focus on concepts like variables, iterations and conditionals without emphasizing practices like algorithmic thinking, reusing and remixing, and debugging. In this paper, we discuss the development of and results from a validated CT Practices assessment for 4th-6th grade students. The assessment tasks are multilingual, shifting the focus to CT practices, and making the assessment useful for students using different CS curricula and different programming languages. Results from an implementation of the assessment with about 15000 upper elementary students in Hong Kong indicate challenges with algorithm comparison given constraints, deciding when code can be reused, and choosing debugging test cases. These results point to the utility of our assessment as a curricular tool and the need for emphasizing CT practices in future curricular initiatives and teacher professional development."
A Qualitative Content Analysis of K-8 Coding Curriculum,"Floyd, Steven",2019,"A number of educational jurisdictions in Canada and abroad are integrating coding and computational thinking (CT) concepts into their K-8 curriculum, however; very little investigation has been done comparing these nascent curricular reforms. This study will use qualitative content analysis to investigate the differences and similarities of K-8 coding and CT curriculum by comparing the concepts, themes, goals and objectives found in current documents. The study hopes to shed light on an important and under-addressed area of curriculum studies that will prove important as computer science education plays a bigger role in K-8 education."
A Qualitative Study of Students' Computational Thinking Skills in a Data-Driven Computing Class,"Yuen, Timothy T. and Robbins, Kay A.",2014,"Critical thinking, problem solving, the use of tools, and the ability to consume and analyze information are important skills for the 21st century workforce. This article presents a qualitative case study that follows five undergraduate biology majors in a computer science course (CS0). This CS0 course teaches programming within a data-driven context and is part of a university-wide initiative to improve students' quantitative scholarship. In this course, students learn computing concepts and computational thinking by writing programs in MATLAB that compute with data, by performing meaningful analyses, and by writing about the results. The goal of the study reported here is to better understand the thought processes students use in such a data-driven approach. Findings show that students engage in an ongoing organizational process to understand the structure of the data. The computational and visualization tasks appear to be closely linked, and the visualization component appears to provide valuable feedback for students in accomplishing the programming tasks."
A Redesigned Reconstruction Kit for Rapid Collaborative Debugging and Designing of E-Textiles,"Fields, Deborah A. and Lin, Yuhan and Jayathirtha, Gayithri and Kafai, Yasmin B.",2021,"In this paper, we present an iteration on a ""reconstruction kit"" for e-textiles, a flexible-state construction kit that allows for rapid deconstruction and reconstruction of sewn, programmable circuits. The reconstruction kit was redesigned to be more modular and was tested in more computationally and spatially challenging debugging and design situations by four pairs of students, familiar with e-textiles, in an introductory computer science course in a U.S. high school. Analyzing think-aloud protocols of the four sessions, we examined affordances and limitations of how students debugged and designed with the reconstruction kit and in which ways collaborative interactions were supported."
"A review of models for introducing computational thinking, computer science and computing in K-12 education","Heintz, Fredrik and Mannila, Linda and Färnqvist, Tommy",2016,Sin Valor
A robotics-based approach to foster programming skills and computational thinking: Pilot experience in the classroom of early childhood education,"Gonz\'{a}lez, Yen Air Caballero and Mu\~{n}oz-Repiso, Ana Garc\'{\i}a-Valc\'{a}rcel",2018,"This document has the purpose to present some results obtained in the pilot experience, play and program with Bee-Bot. The activities were developed in the framework of the doctoral research project whose purpose is the design and integration of learning activities with robotics to foster programming skills and computational thinking in the classroom of early childhood. Teachers and students of the second cycle of early childhood education of a concerted school participated in the experience during 2016-2017 academic period. School is in Salamanca, Spain. The activity allowed students to solve programming challenges using the Bee-Bot floor robot. Instruments were used to collect data, such as: questionnaires, interviews, rubrics and field diary. In general terms, the results obtained were positive. The technical, pedagogical and social aspects proposed in this research have received the favorable acceptance of teachers and students. Therefore, the information generated allowed to strengthen the design, structure and evaluation of the robotics program would be used in later stages of the investigation."
A Robotics-based Learning Environment Supporting Computational Thinking Skills — Design and Development,"Tengler, Karin and Kastner-Hauler, Oliver and Sabitzer, Barbara",2021,Sin Valor
A Scheme of STEAM Interactive Learning Toy for Musical and Computational Thinking,"Su, Jun-Ming and Liao, Chu-Ti and Chen, Chih-Ting and Wang, Li-Hung",2019,Sin Valor
A STEM Course for Computational Thinking Development with BEAM Robotics,"Boya-Lara, Carlos and Diaz-Solano, Daniela and Fehrenbach, Aaron and Saavedra, Doris",2022,Sin Valor
A Strategy for the Development of Computational Thinking from Game Design Specifications,"Tavares Fernandes, Kleber and Lucena, Marcia and Aranha, Eduardo",2019,Sin Valor
A strategy to assess computational thinking,"Gonzalez-Torres, Antonio and Sancho-Chavarria, Lilliana and Zuniga-Cespedes, Magaly and Monge-Fallas, Jorge and Navas-Su, Jose",2021,Sin Valor
A Study of Micro:bit Teaching Design Based on the Development of Computational Thinking of Secondary School Students,"Liu, Junjie and Xia, Xiaojun and Bai, Yi and Liu, Pingyao",2022,Sin Valor
A study of the Classified teaching of “Fundamentals of Information Technology” course based on computational thinking,"Chun-Hong, Wang and Qiao-Ling, Wang",2011,Sin Valor
A Study on the Assessment of Introductory Computational Thinking via Scratch Programming in Primary Schools,"Fagerlund, Janne",2018,"Computational thinking (CT), a transversal intellectual foundation integral to computer science, is making its way into compulsory comprehensive education worldwide. Students are expected to attain skills and knowledge in such interdisciplinary CT principles as Algorithmic thinking, Data representation, and Debugging. Problem-solving by designing and manipulating interactive media with Scratch, a graphical programming tool, is popular especially at the primary school level. However, there has been confusion regarding how introductory CT can be operationalized for educational practice. Teachers and students need research-based knowledge for setting appropriate learning goals in addition to instruments for formative assessment that potentially improve the quality of learning. This study contributes to these issues by developing the assessment for learning of CT via Scratch in primary school settings. A review on prior studies involving the assessment of CT-related computational ideas in Scratch has led to the conceptualization of a revised assessment framework. Next steps in the study are analyzing fourth grade students' (N=58) Scratch projects and exploring complementary methods for analyzing CT in video recordings of the students' programming processes."
A Study on the Impact of Multidisciplinary Collaboration on Computational Thinking,"Pulimood, Sarah Monisha and Pearson, Kim and Bates, Diane C.",2016,"This paper reports on a multi-semester study of the impact on student perceptions of their computational thinking abilities as a result of collaboration between students in computer science (CS) and journalism courses to solve a problem for a community partner, Habitat for Humanity. Interdisciplinary computing collaborations have become a popular mode of instruction in upper-level CS courses. In many cases, these collaborations have been with other STEM disciplines. However, there are non-STEM fields that have been transformed by computer science and can also serve as fruitful test beds for curricular innovation; journalism is one such field. In this study, undergraduate students in CS and journalism courses focused on creating a computational solution to address a real community need. The study investigates whether immersion in multidisciplinary collaborative experiences increases the computational thinking abilities of both CS and non-CS students. 41 CS students participated in the study alongside 96 students in a range of other STEM and non-STEM majors. Quantitative data were collected to gauge students' attainment of concepts and skills constitutive to computational thinking. Pre-test data indicate that CS students were no different from other STEM students in their own assessment of computational thinking and skills. Post-test data indicate that while all students made significant gains in self-assessment of skills and knowledge, CS majors fared significantly better than their peers. It is particularly noteworthy that CS majors' gains outpaced those of computer engineering majors. Further research is planned to gain additional insight into the possible reasons behind these results."
A Summer Computing Camp Using ChainReaction and jABC,"Lamprecht, Anna-Lena and Margaria, Tiziana and McInerney, Clare",2016,Sin Valor
A survey of resources for introducing coding into schools,"Garc\'{\i}a-Pe\~{n}alvo, Francisco J. and Rees, Angela Marie and Hughes, Jenny and Jormanainen, Ilkka and Toivonen, Tapani and Vermeersch, Jens",2016,"Within TACCLE 3 -- Coding European Union Erasmus+ KA2 Programme project, a review and evaluation of a set of resources that can contribute to teaching programming to younger children has made. This paper presents a survey of this review including the most outstanding products in order to help teachers to introduce programming in pre-university studies."
A Systematic Literature Review in Robotics Experiential Learning With Computational and Adversarial Thinking,"Adnan, Noridayu and Abdullah, Siti Norul Huda Sheikh and Raja Yusof, Raja Jamilah and Zainal, Noor Faridatul Ainun and Qamar, Faizan and Yadegaridehkordi, Elaheh",2023,Sin Valor
A Systematic Literature Review of Computational Thinking in K-8 Education Setting Through The Lens Of a Pedagogical Content Knowledge Analysis,"Lin, Ting -Jun and Yeter, Ibrahim H. and Jiang, Shiyan and Yaşar, Osman and Looi, Chee -Kit",2022,Sin Valor
A systematic mapping study on assessing computational thinking abilities,"de Araujo, Ana Liz Souto O. and Andrade, Wilkerson L. and Serey Guerrero, Dalton D.",2016,Sin Valor
A Systematic Review of Computational Thinking Approach for Programming Education in Higher Education Institutions,"Agbo, Friday Joseph and Oyelere, Solomon Sunday and Suhonen, Jarkko and Adewumi, Sunday",2019,"This study examined how computational thinking (CT) has been used to teach problem-solving skills and programming education in the recent past. This study specifically (i) identified articles that discussed CT approach for programming education at higher education institutions (HEIs), (ii) classified the different CT approaches and tools employed for programming education at HEIs, (iii) synthesised and discussed results that are reported by relevant studies that utilized CT for teaching programming at HEIs. A systematic literature review methodology was adopted in this study. Out of 161 articles retrieved, 33 of them that met the inclusion criteria were reviewed. Our study revealed that the use of CT at HEIs for programming education began in 2010; many studies did not specify the context of use, but the use of CT is found to be gaining grounds in many contexts, especially the developed countries; course design approach was mostly employed by educators to introduce CT at HEIs for programming education. Furthermore, this study pointed out how CT approach can be explored for designing a smart learning environment to support students in learning computer programming."
A Systematic Review of Empowerment in Child-Computer Interaction Research,"Van Mechelen, Maarten and Have Musaeus, Line and Iversen, Ole Sejer and Dindler, Christian and Hjorth, Arthur",2021,"Based on a systematic review we explore how empowerment has been articulated in 188 papers in Child-Computer Interaction (CCI) literature since 2003. Using an existing framework outlining functional, educational, democratic, mainstream, and critical empowerment, our analysis shows that while empowerment is rarely defined in CCI papers, a wide range of different articulations coexists. We explore the prevalence of different articulations in the literature and how this has shifted over time. We show that although empowerment has been part of the CCI discourse since the early days, a shift can be noticed in terms of how empowerment is articulated from an emphasis on empowerment in its functional meaning towards a more even distribution and the advent of critical articulations of empowerment. We conclude the paper by looking ahead into a new decade of CCI research and posing three questions to assist CCI researchers in more clearly articulating the nature and understanding of empowerment."
"A Tangible, Story-Construction Process Employing Spatial, Computational-Thinking","Soleimani, Arash and Green, Keith Evan and Herro, Danielle and Walker, Ian D.",2016,"The outcome of a multidisciplinary and iterative process, CyberPLAYce is a tangible, interactive, cyber-physical learning tool for children supporting computational thinking and, particularly, playful storytelling. CyberPLAYce finds inspiration in the concept of child-computer interaction, where meaning is constructed through spatially reconfiguring the physical environment. The novel aspect of CyberPLAYce is its extension of cyber-learning to the dimension of space where children construct meaning at a larger physical scale. This paper outlines the motivations for CyberPLAYce, focuses on the full arc of design and evaluation activities concerning computational thinking (CT) practices that engaged 8-12-year-old storytellers, and concludes with a consideration of future work focusing on spatial thinking with CyberPLAYce. Results from our empirical study suggest that cyber-physical play afforded by CyberPLAYce scaffolds computational thinking, creating, and sharing in children. Particularly for IDC researchers in the educational domain, CyberPLAYce represents a Research-through-design exemplar supporting children's enjoyment of learning and meaning-construction."
A Teacher Workshop for Introducing Computational Thinking in Rural and Vulnerable Environments,"Simmonds, Jocelyn and Gutierrez, Francisco J. and Casanova, Cecilia and Sotomayor, Cecilia and Hitschfeld, Nancy",2019,"In Latin America, computational thinking workshops are mostly developed in urban areas, charging participation fees. And although teachers are increasingly being expected to include technology in their classrooms, computational thinking and programming are not mandatory topics in teacher training programs. This hinders the development of digital skills among Latino students, and we expect that the digital gap between urban and rural populations will expand over time, especially in socio-economically vulnerable populations. Believing that teachers can be agents of change, we designed a 12 hour workshop to train the K-8 teaching staff in a rural and vulnerable school. The goal of this experience was to help these teachers develop basic computational thinking skills and devise new ways to incorporate what they learned in their classrooms. In this paper, we report our experience facilitating this workshop, and analyze the teacher perceptions before and after the intervention. Teacher attitudes changed drastically during the execution of the workshop, and they were able to come up with creative ways of incorporating computational thinking activities into their subjects. The reported experience can be used as input to develop public policies with respect to how computational thinking should be introduced in rural and vulnerable environments."
A Teacher-Focused Impact Assessment in Scratch4All Project,"Vasconcelos, Verónica and Bigotte, Emília and Marques, Luís and Almeida, Ricardo",2023,Sin Valor
A teaching scheme using forerun computing-culture cases for computational-thinking oriented course,"Xu, Yiyi and Liu, Pengfei and Zhao, Jun",2018,"Computational thinking (CT) ability has been described as a new training objective of basic computer courses in Chinese university. Currently, contents and methods of basic computer course teaching in college have been unable to meet the actual needs to develop CT ability. This paper firstly makes an analysis of possible reasons for the above challenge and then aimed to how to teach and what to teach in a practical way. Our research discussed the basic concept and research status of ""computing culture"" discussed and extracted above 60 typical cases based ""computing culture"". These cases focused on discovery joinery of prophetic computer scientists etc. As the main line of teaching, these cases run through in-class teaching and organize every teaching step, such as leading-in, explanation, discussion, dialogue, and conclusion and so on. The several years teaching practice prove the strategies for teaching design put forward in this study is effective to foster a student's sense of ""computing"" and to arouse the students' interest. The finding concludes that developing the broader value of computing-culture and continued investing in the refine of computing-culture based cases are valuable."
A Template for Teaching Computational Modelling in High School,"Musaeus, Line Have and Caspersen, Michael E. and Musaeus, Peter",2023,"Computing education is becoming increasingly important in high schools. Computational modelling is important in computing and many sciences, but there is a lack of research on how teachers should teach computational modelling in high schools. This study was a design-based research study with 86 teachers teaching 12 different subjects at 44 Danish high schools. The study aimed to develop a template to help design and classify didactical questions on computational modelling. Teachers participated in one of two courses on computational modelling. The intervention group (Prog+) included an introduction to agent-based modelling and programming in NetLogo. The comparison group (Prog-) included a general introduction to agent-based modelling. A template consisting of 16 modelling parameters was developed with teachers. Results showed that the template was helpful for teachers to design didactical questions and for the research team to classify the taxonomical levels of these questions. A total of 51 teaching activities were developed by teachers and didactical questions were derived. The strength of this design based research study was that it included a control group and inspired teachers to design and evaluate didactical questions in computational modelling in a wide range of high school subjects. Future studies are needed to evaluate the validity of the template."
A Tool for the Introduction of Programming and Computational Thinking with Motivation using Virtual Reality,"Barbosa Raposo, Alberto and Curasma, Herminio Paucar",2018,Sin Valor
A Topic Modeling Approach to Characterizing Colombian Teachers' Conceptions of Computational Thinking,"Castellanos, Hugo and Vieira, Camilo and Magana, Alejandra",2023,Sin Valor
A Typology of Models for Integrating Computational Thinking in Science (CT+S),"Krakowski, Ari and Greenwald, Eric and Comstock, Meghan and Roman, Natalie and Duke, Jacob",2021,Sin Valor
A Web Prototype to Teach Music and Computational Thinking Through Building Blocks,"Barat\`{e}, Adriano and Ludovico, Luca A. and Mauro, Davide A.",2019,"This paper presents the recent evolution of a Web prototype originally conceived to teach music and computational thinking to preschool and primary school learners through a gamification approach. The software tool, called Legato, is based on the metaphor of building blocks, whose characteristics (e.g., position in space, shape, and color) can be associated with basic music parameters (e.g., pitch, rhythm, and timbre). Legato is a Web app written using standard languages, such as HTML5, CSS and JavaScript; besides, it adopts the Web MIDI API to produce sounds. The prototype is made publicly available for evaluation and use in an educational context."
A Web-Based learning activity integrated with scratch tool to support programming learning,"Su, Jun-Ming and Wang, Sin-Jie",2017,Sin Valor
A Wolf in Lamb's Clothing: Computer Science in a Mathematics Course,"Friend, Michelle and Swift, Andrew W. and Love, Betty and Winter, Victor",2023,"If computer science programs face a challenge of convincing students that programming is fun and achievable, they have nothing on mathematics departments who face societal beliefs that math is hard and scary. Several movements in computer science education have focused on broadening participation within computer science and across disciplines. The ""CS + X"" efforts have focused on helping computer science integrate into other disciplines. The ""CS For All"" movement has highlighted the importance of providing high quality computing education for all students. Simultaneously, there is increasing attention to the need to provide general education alternatives to college algebra. This paper describes a course designed to combine these goals: a course that uses programming to introduce students to functions, patterns, and spatial and computational thinking in order to meet quantitative reasoning goals set by the university. The course initially used Bricklayer as the programming environment, then transitioned to Processing. Students were successful in writing programs that created art, demonstrated mastery of quantitative literacy, and had improved attitudes following the course. This project suggests that in addition to the creation of introductory computer science classes, courses which embed computer science into disciplinary requirements can be a successful pathway to expand opportunities for students to learn computing."
A Work in Progress Paper: Evaluating a Microworlds-based Learning Approach for Developing Literacy and Computational Thinking in Cross-curricular Contexts,"Jenkins, Craig",2015,"In the 1960s, Papert and his team at the Massachusetts Institute of Technology (MIT) developed Turtle Graphics using the LOGO programming language. Underpinning this development was a profound new philosophy of how learning happens with computers: a microworlds-based approach to learning. The wider aim of this research project is to examine how a microworlds-based approach may be revived in contemporary educational contexts by secondary school teachers in cross-curricular subject areas. It examines the microworld as a tool for secondary level learning at ages eleven-to-fourteen and explores its potential role in making relevant conceptual learning accessible through practical, constructionist approaches in cross-curricular applications.This particular work-in-progress paper reports on a comparative evaluation of a microworlds-based approach to teaching poetic verse in the subject domain of drama. A quasi-experimental design was used in order to measure performance gains in specific aspects of computational thinking and literacy development following the microworld-based intervention. Preliminary data reveals a higher improvement in performance but further qualitative data needs to be collected in order to provide further insight to support the quantitative findings."
Abenteuer informatik: hands-on exhibits for learning about computational thinking,"Gallenbacher, Jens",2012,"Computational thinking is one of the pillars of the ACM-CSTA standards for teaching computer science from kindergarten to college. Our approaches Abenteuer Informatik -- Informatik begreifen (adventures in informatics -- hands on computer science) and Abenteuer Technik are well established in the german-speaking community as means to connect computer science with other subjects and as means of clarifying some prejudices against computer science, especially problematic for establishing computer science as subject in schools."
Abstraction Through Multiple Representations in an Integrated Computational Thinking Environment,"Gautam, Aakash and Bortz, Whitney and Tatar, Deborah",2020,"We present reflections based on qualitative analysis of data from the CHEM+C Project which promotes computational thinking (CT) in classrooms through integration with science classes. The curriculum utilizes multiple representations, requiring students to work with physical phenomena, chemical equations, digital simulations, and modifiable code-based representations. Much CT focus on abstraction naturally emphasizes (1) extraction of a set of features from an object or process, and (2) finding commonality between objects and processes. But Rosen encourages us to think about abstraction as also including the production of new concepts or actions. Integrating CT into science offers the possibility of enhancing this aspect of abstraction. Changing the representational affordances available to the students allows them to take their CT thinking beyond learning-to-abstract towards learning-through-abstraction. This perspective moves computation from an internally focused exercise into the expression of valued ideas in a computational medium."
"Accelerating K-12 computational thinking using scaffolding, staging, and abstraction","Touretzky, David S. and Marghitu, Daniela and Ludi, Stephanie and Bernstein, Debra and Ni, Lijun",2013,"We describe a three-stage model of computing instruction beginning with a simple, highly scaffolded programming environment (Kodu) and progressing to more challenging frameworks (Alice and Lego NXT-G). In moving between frameworks, students explore the similarities and differences in how concepts such as variables, conditionals, and looping are realized. This can potentially lead to a deeper understanding of programming, bringing students closer to true computational thinking. Some novel strategies for teaching with Kodu are outlined. Finally, we briefly report on our methodology and select preliminary results from a pilot study using this curriculum with students ages 10-17, including several with disabilities."
Accembly at Home: Accessible Spatial Programming for Children with Visual Impairments and their Families,"Rocha, Filipa and Pires, Ana Cristina and Neto, Isabel and Nicolau, Hugo and Guerreiro, Tiago",2021,"Accessible introductory programming environments are scarce, and their study within ecological settings (e.g., at home) is almost non-existent. We present ACCembly, an accessible block-based environment that enables children with visual impairments to perform spatial programming activities. ACCembly allows children to assemble tangible blocks to program a multimodal robot. We evaluated this approach with seven families that used the system autonomously at home. Results showed that both the children and family members learned from what was an inclusive and engaging experience. Children leveraged fundamental computational thinking concepts to solve spatial programming challenges; parents took different roles as mediators, some actively teaching and scaffolding, others learning together with their child. We contribute with an environment that enables children with visual impairments to engage in spatial programming activities, an analysis of parent-child interactions, and reflections on inclusive programming environments within a shared family experience."
ACCtic Master Programme on STEAM + SciArt,"Garcia-Robles, Rocio and Mu\~{n}oz-Del Amo, Aurea",2022,"A new master university programme on STEAM + SciArt is presented. It will be taught in University of Seville (Spain).Its objectives, structure and subjects are further described."
Achieving CSforAll: Preparing Special Education Pre-service Teachers to Bring Computing to Students with Disabilities,"Yadav, Aman and Israel, Maya and Bouck, Emily and Cobo, Alexis and Samuels, John",2022,"While computational thinking has gained popularity in K-12 schools to increase access to computing tools and practices, there is still limited understanding on how to broaden participation of students with disabilities in computational thinking (CT). One approach to increasing access to computing to students with disabilities is to educate future special education teachers to bring CT into their instruction. This study examined the influence of integrating CT into assistive technology course for special education pre-service teachers. Our results suggest that integrating CT into special educa- tion teacher preparation coursework can have a positive impact on how pre-service teachers see the value of bringing computational practices to students with disabilities."
ACKNOWLEDGMENTS,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Activities to develop computational thinking contextualized with COVID-19 pandemic: a case study,"Santos, Icleia and Grebogy, Elaine Cristina and Castilho, Marcos Alexandre",2022,Sin Valor
Adapting an OER Textbook for the Inverted Classroom Model — How To Flip the Classroom with BBC micro:bit Example Tasks,"Kastner-Hauler, Oliver and Tengler, Karin and Demarle-Meusel, Heike and Sabitzer, Barbara",2021,Sin Valor
"Adopting, Integrating, and Evaluating Computational Creativity Exercises and an Experience Report","Soh, Leen-Kiat and Peteranetz, Markeya S. and Glebova, Olga",2020,"In this workshop, participants will learn how to integrate into their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing one of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, an experience report, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop"
"Adopting, Integrating, and Evaluating Computational Creativity Exercises and An Experience Report","Soh, Leen-Kiat and Peteranetz, Markeya S. and Glebova, Olga",2021,"In this workshop, participants will learn about how to integrate computational thinking and creative thinking activities that have been shown to significantly improve student learning and performance in their classes via rigorous research investigations. In particular, participants will be familiarized with the suite of Computational Creativity Exercises (CCEs) (which are non-programming-based, group-based, active learning exercises), practice hands-on how to complete such an CCE, learn about how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these CCEs. Participants will also learn how to conduct evidence-based educational research studies. Workshop sessions will include presentations, panel-based Q&amp;A, an experience report, breakout group discussions, and hands-on activities. A suite of resources including the survey instruments, CCEs, implementation strategies, and research findings will be shared post-workshop. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop2021."
"Adopting, Integrating, and Evaluating Computational Creativity Exercises to Improve Student Learning","Soh, Leen-Kiat and Peteranetz, Markeya S.",2019,"In this workshop, participants will learn how to integrate in their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing two of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop"
Advanced Computing for Social Change: Educating and Engaging Our Students to Compete in a Changing Workforce,"Gaither, Kelly and Gomez, Rosalia and Akli, Linda and Mendenhall, Ruby and Bland, Marques and Fratkin, Susan and Rivera, Lorna and DeStefano, Lizanne",2017,"Visualization taps into the very best capabilities of our brains, transforming data that is fundamentally abstract as numbers into something that communicates and illuminates information ranging from the simple to the complex. There is a growing interdependence amongst society, humanity, technology and science. Simultaneously, interdisciplinary science has taken a critical role in understanding and solving what has become a multi-faceted realm of large, complex problems. This is contrasted by a looming global workforce shortage in those educated in computational science. In response, we have developed a new model for engaging students, the advanced computing for social change initiative, teaching computational skills in the context of relevant social issues. This paper provides rationale for our inaugural challenge, including evaluation data and recommendations1."
Advances in Computational thinking and robotics in education,"Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e} and Conde, Miguel \'{A}ngel and Gon\c{c}alves, Jos\'{e} and Lima, Jos\'{e}",2021,"After the computational thinking sessions in the previous 2016-2019 editions of TEEM Conference, the fifth edition of this track has been organized in the current 2020 edition. Computational thinking is still a very significant topic, especially, but not only, in pre-university education. In this edition, the robotic has a special role in the track, with a strength relationship with the STEM and STEAM education of children at the pre-university levels, seeding the future of our society."
Advancing Opportunities for CS Teachers: How To Best Support Professional Development for Experienced Teachers in K-12 CS Education,"Kafai, Yasmin and Goode, Joanna and Twarek, Bryan and Fields, Deborah and Yadav, Aman and Logan, Linnea",2022,"In K-12 education, nearly all efforts focused on expanding computer science education center on the induction of new computer science teachers, with very little attention given to support the ongoing needs of experienced computer science teachers. More seasoned teachers benefit from deepening their content knowledge, pedagogical practices, and knowledge and capacity to provide equitable and inclusive learning experiences that results in students feeling a sense of belonging in computer science. This panel will discuss the needs of experienced CS teachers from a variety of perspectives, including teacher education researchers, professional development leaders, and high school practitioners and teacher facilitators. The panel will collectively outline a research and practice agenda that focuses on supporting, retaining, and further developing experienced teachers through expanded professional development, leadership opportunities, and community for CS teachers."
Air Pollution Data Analysis Platform for Computer Science Education Projects: (Abstract Only),"Angelvik, Nina",2018,"We have developed an applied computer science project to introduce students in upper secondary schools to computer science and engineering. In the project, students build and code their own air quality sensor kits before investigating a research question by analyzing their collected data. An important part of the analysis is to investigate the air quality data in context of other data sources, such as data from other sensor kits or climate data. The task of curating such datasets are too complex for such an introductory project and it therefore requires a specialized service. In this poster we present the design and implementation of an air pollution data analysis platform that stores air quality measurements collected by students, combines it with open environmental data, and provides students with an open interface to analyze their data. During spring 2018, ten school classes from Northern Norway are going to use the platform, online at airbit.uit.no, to study air quality patterns across Northern Norway. We also provide the source code for the platform at the same address."
AlfaDatizando: a Data Visualization Platform to work Computational Thinking in Digital Humanities,"Beatriz, Lliteras Alejandra and Alejandro, Artopoulos and Alejandro, Fernández and Jimena, Huarte",2022,Sin Valor
Alg-Design: Facilitates to Learn Algorithmic Thinking for Beginners,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
Algo.Rhythm: computational thinking through tangible music device,"Peng, Huaishu",2012,"I present the design of Algo.Rhythm, a tangible computational drum kit with programmable behaviors. By arranging and physically connecting a number of drum-bots, each of them records beat patterns from outside world or its precursor, replays the patterns in selectable ways, and passes the rhythm to its neighbors along the drum-bot's surface in 3D space. The construction of drum-bots and the delivery of the beat patterns provide users a unique opportunity to learn a set of computational concepts like sequential execution, iteration, or forking through composing music."
Algorithmic composition: computational thinking in music,"Edwards, Michael",2011,The composer still composes but also gets to take a programming-enabled journey of musical discovery.
Algorithmic thinking in early childhood,"Kanaki, Kalliopi and Kalogiannakis, Michail",2023,"The rising interest of educators, researchers, and policymakers around the world as far as the development of computational thinking skills in compulsory education is concerned is echoed in the plethora of research studies discussed in the pertinent literature. However, the successful injection of computation thinking in formal educational settings demands the construction of developmentally appropriate assessment tools. In this paper, we discuss a novel framework for assessing computational thinking skills in early childhood settings. The proposed framework was employed in a relevant quantitative research study conducted in the city of Heraklion, Crete, from February to June 2019, with a sample of 435 first and second graders and within the context of the Environmental Study course. This paper also provides evidence regarding the examination of age, gender, and learning achievements in the Environmental Study course as predictive factors of one of the core computational thinking competencies, namely algorithmic thinking. The research findings revealed that age and learning achievements in the Environmental Study course constitute predictive factors for algorithmic thinking skills in the first and second grade level of primary school. On the contrary, algorithmic thinking skills are not related to first and second graders’ gender. The results of this study provide a solid background for designing and implementing developmentally appropriate tools for cultivating and assessing computational thinking skills in the early years of schooling."
AlgoThink: An Algorithmic Computational Thinking Approach,"Altaher, Marah and Ferchichi, Ahmed",2018,Sin Valor
Aligning Computing Education with engineering workforce computational needs: New curricular directions to improve computational thinking in engineering graduates,"Vergara, Claudia E. and Urban-Lurain, Mark and Dresen, Cindee and Coxen, Tammy and MacFarlane, Taryn and Frazier, Kysha and Briedis, Daina and Buch, Neeraj and Esfahanian, Abdol-Hossein and Paquette, Louise and Sticklen, Jon and LaPrad, Jeannine and Wolff, Thomas F.",2009,Sin Valor
Alternate realities for computational thinking,"Doore, Karen",2013,"Alternate Reality Games (ARGs) can be utilized as an educational platform to engage students in a collaborative exploration of the field of computing as a means to increase interest in computing. This paper will review the use of ARGs for educational purposes, the educational value of using ARGS, and how ARGs can be designed for re-use. My research is focused on exploring the use of ARGS as component of a computing education framework."
American Indian Storytelling with Alice: (Abstract Only),"Micka, Samuel Adam and Fasy, Brittany Terese and Hancock, Stacey A. and Madubuko, Jachiike C. and Theobold, Allison Shay",2018,"Montana is home to a large American Indian population and a rich history. The Indian Education for All (IEFA) Act, passed in 1999, reinforces the educational goals stated in Montana's 1972 Constitution that ""every Montanan, whether Indian or non-Indian, be encouraged to learn about the distinct and unique heritage of American Indians in a culturally responsive manner."" IEFA requires that American Indian education be integrated into ""the education of each Montana citizen,"" making Montana the only state to mandate Indian education by law. We propose an integration of CS concepts into existing content standards using the IEFA curricula. To make these concepts approachable, we utilize Alice, a drag-and-drop programming environment. This software allows students to animate stories while learning programming techniques in a user-friendly way. Furthermore, Alice 2 allows customized models; in particular, we can create models specific to American Indian culture. In this poster, we present an overview of the Storytelling project and preliminary results, an example lesson plan, evaluation techniques, and a description of the 3D model creation process. With these lesson plans and customized models, we strive to broaden participation of students from rural and American Indian communities in CS and related fields."
An Accelerated CS0 for Online Mature-Age Part-Time Students,"Billingsley, William and Vitale, Jonathan",2021,"In this paper, we present the design of a ""CS0"" Computational Thinking course at an Australian regional university, that is also offered to non-enrolled students via the Open Universities Australia network. Unlike many CS0 courses, this targets a predominantly mature age and part-time demographic, although high school leavers are also included. Our design attempts to recognise that computational thinking experiences are increasingly incorporated into school experiences, both through curricula and outreach. Consequently, a CS0 course no longer has the sole purpose of introducing students to computing. It also serves a bridging role, giving a compressed form of outreach and school experiences to adult learners who might have missed them. It also brings brings opportunities to compress the introduction of programming, so that more time can be spent in challenges that stretch students' experience, and in demonstrating its application to areas such as robotics and social AI."
An Analysis of K-12 Programming Education Utilizing the Minecraft Metaverse Amidst the COVID-19 Pandemic,"Sawada, Chiyoko and Terazono, Masafumi and Hagino, Tatsuya and Hattori, Takashi",2025,"In March 2020, all elementary, middle, and high schools in Japan were temporarily closed for approximately one month in response to the COVID-19 pandemic. During this interval, we initiated a programming education program for students ranging from elementary to high school, utilizing the metaverse capabilities of Minecraft. The primary participants in this initiative were educators and students from two private programming institutions. Students engaged in a simulated school experience that leveraged Minecraft's command and Redstone based programming functionalities. Furthermore, the collaborative nature of the metaverse enhanced students' programming and computational thinking abilities. This poster will first delineate the distinctive features of Minecraft's programming environment in contrast to visual programming platforms such as Scratch. Subsequently, we will analyze students' experiences within the metaverse, focusing on peer interaction and the enhancement of motivation towards programming. Finally, we will conduct an evaluation and propose directions for future research."
An Analysis of Use-Modify-Create Pedagogical Approach's Success in Balancing Structure and Student Agency,"Franklin, Diana and Coenraad, Merijke and Palmer, Jennifer and Eatinger, Donna and Zipp, Anna and Anaya, Marco and White, Max and Pham, Hoang and G\""{o}kdemir, Ozan and Weintrop, David",2020,"As computer science instruction gets offered to more young learners, transitioning from elective to requirement, it is important to explore the relationship between pedagogical approach and student behavior. While different pedagogical approaches have particular motivations and intended goals, little is known about to what degree they satisfy those goals.In this paper, we present analysis of 536 students' (age 9-14, grades 4-8) work within a Scratch-based, Use-Modify-Create (UMC) curriculum, Scratch Encore. We investigate to what degree the UMC progression encourages students to engage with the content of the lesson while providing the flexibility for creativity and exploration.Our findings show that this approach does balance structure with flexibility and creativity, allowing teachers wide variation in the degree to which they adhere to the structured tasks. Many students utilized recently-learned blocks in open-ended activities, yet they also explored blocks not formally taught. In addition, they took advantage of open-ended projects to change sprites, backgrounds, and integrate narratives into their projects."
An Architectural Design of ScratchThAI: A conversational agent for Computational Thinking Development using Scratch,"Katchapakirin, Kantinee and Anutariya, Chutiporn",2018,"Scratch is a visual, block-based programming language, adopted as a computational thinking development tool in elementary education among many countries. Thailand has also recently included Scratch as part of the computing science course in its basic education. However, Thailand is facing a shortage of ICT teachers who are skillful in Scratch programming, especially in small provincial schools. This research aims to overcome the shortage by developing ScratchThAI, a Scratch tutorial chatbot. It is designed to assist young learners directly through a messaging platform. By giving supports through a textual conversation, more relevant advice, knowledge, and resources could be provided precisely. Different levels of each computational thinking concept are extracted and evaluated by the designed assessment algorithm. Extra predefined exercises are assigned based on the analyzed learner's strengths and weaknesses in order to actively improving the learner's understanding. Moreover, gamification is incorporated to engage and motivate young learners in computational thinking development."
An Automatic Analysis Tool Based on Computational Thinking for BlockPy Programs,"Xu, Can and Feng, Zhiyong and Qi, Peng and Sun, Yan",2020,Sin Valor
An automatic grading system for a high school-level computational thinking course,"Tisha, Sirazum Munira and Oregon, Rufino A. and Baumgartner, Gerald and Alegre, Fernando and Moreno, Juana",2023,"Automatic grading systems help lessen the load of manual grading. Most existent autograders are based on unit testing, which focuses on the correctness of the code, but has limited scope for judging code quality. Moreover, it is cumbersome to implement unit testing for evaluating graphical output code. We propose an autograder that can effectively judge the code quality of the visual output codes created by students enrolled in a high school-level computational thinking course. We aim to provide suggestions to teachers on an essential aspect of their grading, namely the level of student competency in using abstraction within their codes. A dataset from five different assignments, including open-ended problems, is used to evaluate the effectiveness of our autograder. Our initial experiments show that our method can classify the students' submissions even for open-ended problems, where existing autograders fail to do so. Additionally, survey responses from course teachers support the importance of our work."
An Automatic Grading System for a High School-level Computational Thinking Course,"Tisha, Sirazum Munira and Oregon, Rufino A. and Baumgartner, Gerald and Alegre, Fernando and Moreno, Juana",2022,Sin Valor
An Educational Game to Promote the Development of Computational Thinking in Children Both Neurotypical and with Intellectual Disabilities,"Geremias, Matheus Soppa and Dutra, Taynara Cerigueli and Gasparini, Isabela and Maschio, Eleandro",2023,Sin Valor
An educational transmedia storytelling proposal to teach computational thinking for children,"Sim\~{o}es Gomes, Tanci and Pontual Falc\~{a}o, Taciana and Tedesco, Patricia",2022,"Teaching computational thinking for children has reached ample dimensions along the last decade, and has culminated in the creation of various products, programs and projects that aim to democratize the access to this body of knowledge. However, cognitive, motor and affective factors have appeared as particular challenges when we are teaching computational thinking to children in the literacy phase, where the stories are a particularly relevant part of the learning process and children's development. Thus this study has aimed to articulate the inclusion of storytelling in experiences of teaching computational thinking to young children, analyzing this possibility considering the proposition of an artifact based on transmedia storytelling for teaching computational thinking and seeks to understand what are the implications of child-computer interaction in this artifact."
An Effective Approach to Teach an Introductory Computer Science Course with Computational Thinking and Flow-Chart Based Visual Programming,"Rahman, Md Mahmudur and Sharker, Monir H. and Paudel, Roshan",2020,Sin Valor
An Effective Microlearning Approach Using Living Book to Promote Vocational Students' Computational Thinking,"Leela, Soralak and Chookeaw, Sasithorn and Nilsook, Prachyanun",2020,"The purpose of this study was to describe the effectiveness of using living books (mobile leaning and augmented reality) within the context of microlearning approach to promote vocational students' computational thinking. The participants were 97 vocational students that included experimental group (n=52) and control group (n=45) vocational college who enrolled in the basic of mathematics career in 2nd semester of academic year 2018. The instruments of this research include learning materials: mobile learning and AR book, the lesson plan of surface area and volume topic in basic mathematics career subject, pre and post-tests, and the computational thinking assessment. The results showed that the students' learning achievement of experimental group employed microlearning approach using living books, the control group employed traditional learning was statistically significant at level of .01. In addition, the result of students' computational thinking in the experimental group using of microlearning living book have been the computational thinking at the high level."
An embodied interface for teaching computational thinking,"Good, Judith and Romero, Pablo and du Boulay, Benedict and Reid, Henry and Howland, Katherine and Robertson, Judy",2008,"We describe an innovative educational system designed to, firstly, motivate young people to engage with computational concepts and secondly, provide them with tools to do so in an embodied manner. The interface is designed as a ""magic mirror"" in which users can, through augmented reality technology, take on the role of a character and control the character's movements via their own movements. They are able to record movements, and using a Wii Remote as a mouse and pointing device, organise these movements into sequences. We are now working on ways in which the recorded movements can be manipulated in ways that foster computational thinking."
An Empirical Study on Blended Learning to Promote the Development of Computational Thinking Ability of College Students,"Liao, Lihua and Liang, Jin",2017,Sin Valor
An empirical study on designing STEM + AI teaching to cultivate primary school students ' computational thinking perspective,"Li, Xing and Xiang, Hui and Zhou, Xiaochun and Jing, Huang",2023,"With the development of the era of artificial intelligence (AI), China has put forward the cultivation of computational thinking (CT) in the compulsory education curriculum standard. CT includes three dimensions: CT concept, CT practice and CT perspective. As a part of CT, the development of CT perspective can promote the growth of students ' connection ability, questioning ability and expression ability. CT perspective promotes the formation of computational identity through the internalization of concepts. At present, there are relatively few studies on the CT perspective. Based on this, this study proposes a design-based STEM + AI teaching model, aiming to create a combination of artificial intelligence and interdisciplinary to cultivate pupils ' CT perspective. In this study, a single group of pre-test and post-test experiments were conducted to test the CT perspective of students in third grade of a primary school in Wuhan. The research shows that the design-based STEM + AI teaching has significantly improved the expression ability and questioning ability of primary school students, but the improvement of connection ability is not significant. The implementation of STEM + AI teaching helps students to internalize ideas from the perspective of CT, thus cultivating students ' computational identity."
An Empirical Study on Designing STEM+AI Teaching to Cultivate Primary School Students' Computational Thinking Perspective and Identity,"Li, Xing and Xiang, Hui and Zhao, MingYue and Zhou, XiaoChun and Huang, Jing",2024,Sin Valor
An empirical study on the design-based STEM + VR teaching approach to cultivate college students' computational thinking,"Li, Xing and Zhao, MingYue and Ai, Di and Zhou, XiaoChun and Xiang, Hui",2024,"Virtual reality (VR) technology has been widely used in many industries. Therefore, the cultivation of virtual reality technology talents is imminent. However, there are relatively few universities that carry out virtual reality courses. At the same time, the virtual reality course is a good carrier to cultivate computational thinking. It can improve students ' problem-solving ability, creativity and teamwork ability, which are also necessary to cultivate computational thinking. Computational thinking, as a necessary basic skill for talents in the 21 st century, needs to be improved in the training approach of college teaching. However, there are relatively few teaching approachs to cultivate computational thinking through virtual reality (VR) courses. Based on this, this study constructs a design-based STEM+VR teaching approach, which combines the interdisciplinary knowledge of STEM education with VR subject knowledge, aiming to cultivate college students ' computational thinking through virtual reality courses. In this study, a single group of pre-test and post-test experiments were conducted to investigate the complex ability of computational thinking of a college student in Wuhan, including five sub-dimensions:creativity,algorithmic hinking, collaborative ability, critical thinking and dimensional problem solving.The research shows that after the design-based STEM + VR teaching, the abilities in the sub-dimension of computational thinking are significantly improved. The design-based STEM + VR teaching case provided in this study is expected to provide some reference for the use of virtual reality courses to cultivate computational thinking in college education."
An Empirical Study on the Effect of Gamified Teaching in Scratch Courses on Developing Elementary Students' Computational Thinking,"Chen, Yuxi and Zhao, Yang and Wang, Min",2024,Sin Valor
An Examination of Abstraction in K-12 Computer Science Education,"Liebe, Christine and Camp, Tracy",2019,"Computer scientists have been working towards a common definition of abstraction; however, the instruction and assessment of abstraction remain categorically under-researched. Abstraction is often cited as a component of computational thinking and can be likened to a higher order thinking skill. Most K-12 educators have studied critical thinking (e.g., Bloom's taxonomy, Marzano &amp; Kendall's new taxonomy) more than computational thinking. Overlapping characteristics of abstraction and critical thinking can provide educators with instructional guidance. The qualitative examination of how teachers determine curriculum, deliver instruction, and design assessments in K-12 computer science education contributes insights into current instructional practices and variables for future quantitative study. The instructional strategies, objectives, and assessments of 12 K-12 computer science teachers from three states in the United States were examined in this descriptive qualitative examination of instruction using thematic coding analysis. The majority of teachers interviewed had little to no professional development regarding teaching abstraction. All teachers in the study were unsure what student abstraction abilities should be according to grade level. Teachers' understanding of abstraction ranged from very little knowledge to very knowledgeable. The majority of teachers interviewed did not assess abstraction intentionally. Teachers described successfully teaching abstraction through multiple instructional practices and spiraling curriculum. This examination of abstraction in K-12 computer science education offers practical descriptive insights and illuminates additional variables for researching the instruction of abstraction qualitatively and quantitatively. Anecdotal instructional successes are included in the results."
An Expansively-framed Unplugged Weaving Sequence Intended to Bear Computational Fruit of the Loom,"Lee, Victor R. and Vincent, Heidee",2019,"We report on a late-breaking project that centralizes the Maker practice of loom-based weaving as a locus for unplugged computational thinking. While unplugged activities are appealing for making computation accessible, they also come with the risk of developing inert knowledge. To address and mitigate that risk, we introduce a new framework that we are developing called ""Expansively-framed Unplugged"" (EfU) computing education. We report on some initial testing and refinement of a learning sequence that starts with weaving on a loom and ends with optimizing code in Scratch. The testing was done with a school librarian who is will be implementing a coding program with students at a middle school library using this EfU sequence."
An Experience Report on Teaching Programming and Computational Thinking to Elementary Level Children Using Lego Robotics Education Kit,"Chaudhary, Vidushi and Agrawal, Vishnu and Sureka, Pragya and Sureka, Ashish",2016,Sin Valor
An exploratory study of augmented embodiment for computational thinking,"Chung, Cheng-Yu and Hsiao, I-Han",2019,"The contiguity of physical and digital content of embodied learning has been shown to increase student's engagement in educational contexts. Applications with various kinds of physical interactions have been deployed to enhance the learning experiences in many engineering domains. However, even though computer science education (CSE) is one of zestful topics in the recent years, there are few studies focusing on the embodiment of CSE materials, by which the abstract and intangible concepts could be transformed into an intuitive affordance that utilizes sensorimotor experiences during the learning process. We propose an augmented embodiment mobile app designed for computational thinking (CT), specifically the debugging practices and abstraction concept, that makes use of gestures and augmented reality for learners to interact with the content. We examine the logic by the design framework for embodied learning and discuss potential extensions of multimodal analytics in such an application. Our preliminary user study in a middle school shows students' engagement in the application, however, it also reflected several design issues that need to be solved in the next iteration. The future plan of data analysis and experiments is also discussed."
An Expression-Oriented Approach to Programming Education,"Alda, Enzo and Baralt-Torrijos, Jorge",2023,Sin Valor
An informatics perspective on computational thinking,"Walden, James and Doyle, Maureen and Garns, Rudy and Hart, Zachary",2013,"In this paper, we examine computational thinking and its connections to critical thinking from the perspective of in- formatics. We developed an introductory course for students in our College of Informatics, which includes majors rang- ing from journalism to computer science. The course cov- ered a set of principles of informatics, using both lectures and active learning sessions designed to develop informat- ics and computational thinking skills. The set of principles was drawn from a wide set of sources, and included broad principles like those of Denning and Loidl, as well as more limited principles related to topics like universal computa- tion and undecidability. We evaluated the change in both computational and critical thinking skills over the course of the semester, using a well-known validated critical thinking test and a computational thinking test of our own devising."
An Innovative Approach to Teaching an Undergraduate Software Engineering Course,"Lester, Cynthia Y.",2008,Sin Valor
"An instructional framework, model lessons, and professional learning program for science standards-aligned computing in 4th-12th grade classrooms","Lehmkuhl-Dakhwe, K. Virginia",2018,Sin Valor
An Integration of Computational Thinking and Language Arts: The Contribution of Digital Storytelling to Students’ Learning,"Yeni, Sabiha and Nijenhuis-Voogt, Jacqueline and Hermans, Felienne and Barendsen, Erik",2022,"Embedding Computational Thinking (CT) in the context of various school subjects across the curriculum, not only CS or STEM, is receiving increased attention. CT skills can be instrumental in many subjects, which makes the integration an opportunity for learning CT but also for deepening subject specific learning. This study focuses on language arts, in particular English as a second language. It investigates digital storytelling as a way to integrate CT, analyzing its impact on students’ learning both of English and of CT, and on students’ attitudes toward the CT integrated English lesson. A class of 8th grade students (average age 13 years) participated in the study. The impact of the CT integrated lessons was investigated using students’ final products, surveys, rubrics, exit tickets and focus group interviews. The results suggest that the digital storytelling approach may improve students’ learning of English and of CT, and that it helped enhancing students’ creativity and collaboration, thus promoting their digital participation."
An Intelligent Pedagogical Agent for In-The-Wild Interaction in an Open-Ended Learning Environment for Computational Thinking,"Murali, Rohit and Lall\'{e}, S\'{e}bastien and Conati, Cristina",2024,"Adaptive support can help learners in Open-Ended Learning Environments (OELEs), where the free-form nature of the interaction can be confusing to students. In this paper, we design and evaluate an Intelligent Pedagogical Agent (IPA) for an OELE designed to foster Computational Thinking (CT). Specifically, we design help interventions for an in-the-wild scenario where students interact with the OELE in an unmonitored, self-directed manner. We build a student model by extracting meaningful student behaviors on real-world interaction data obtained during interaction in online classrooms and including expert insights. We show that these student models perform better than a baseline and have the potential for adaptive support in self-directed interaction with the OELE. We design an IPA with the help of teachers, leveraging the student behaviors extracted from data. Lastly, we get insights into the value of these help interventions by empirically evaluating the IPA in a formal user study."
An Intelligent Pedagogical Agent to Foster Computational Thinking in Open-Ended Game Design Activities,"Yal\c{c}in, \""{O}zge Nilay and Lalle, Sebastien and Conati, Cristina",2022,"Free-form Game-Design (GD) environments show promise in fostering Computational Thinking (CT) skills at a young age. However, such environments can be challenging to some students due to their highly open-ended nature. Our long-term goal is to alleviate this difficulty via pedagogical agents that can monitor the student interaction with the environment, detect when the student needs help and provide personalized support accordingly. In this paper, we present a preliminary evaluation of one such agent deployed in a real-word free-form GD learning environment to foster CT in the early K-12 education, Unity-CT. We focus on the effect of repetition by comparing student behaviors between no intervention, 1-shot, and repeated intervention groups for two different errors that are known to be challenging in the online lessons of Unity-CT environment. Our findings showed that the agent was perceived very positively by the students and the repeated intervention showed promising results in terms of helping students make less errors and more correct behaviors, albeit only for one of the two target errors. Based on these results, we provide insights on how to improve the delivery of the agent’s interventions in free-form GD environments."
An Interactive Picture Storybook Scheme for Lower-Grade Elementary Students to Learn Music and Computational Thinking,"Su, Jun-Ming and Lin, Yu-En and Hsu, Wei-Fang and Wu, Ting-Ti",2024,Sin Valor
An Investigation into the Relationship Between Structured Dance Activities and Computational Thinking Skills,"Fairlie, Fiona",2021,Computational thinking skills are linked with success in learning to program. There is evidence that aspects of dance and choreography may improve cognitive skills related to computational thinking. This project aims to investigate the relationship and develop activities which enhance computational thinking skills and encourage girls to engage with programming.
An Investigation of Undergraduates’ Computational Thinking in a Sophomore-Level Biomedical Engineering Course,"Shoaib, Huma and Cardella, Monica and Madamanchi, Aasakiran and Umulis, David",2019,Sin Valor
An ISMP Approach for Promoting Design Innovation Capability and Its Interaction With Personal Characters,"Chen, Ganxin and He, Yuexia and Yang, Tongguang",2020,Sin Valor
An Ontology based approach to teach Computational Thinking,"Araújo, Cristiana and Lima, Lázaro V O and Henriques, Pedro Rangel",2019,Sin Valor
An operationalized model for defining computational thinking,"Lowe, Tony and Brophy, Sean",2017,Sin Valor
Analogies and Active Engagement: Introducing Computer Science,"Parham-Mocello, Jennifer and Erwig, Martin and Niess, Margaret",2024,"We describe a new introductory CS curriculum initiative that uses analogies and active engagement to develop students' conceptual understanding before applying the concepts to programming. We believe that traditional coding approaches to introducing computer science concepts rely on students to build their own conceptual understanding, rather than grounding their understanding of concepts in what they know from everyday experiences. Using constructivism as a foundation for this curriculum initiative, our approach builds a framework for student understanding anchored in the physical world using simple games and stories to stimulate mental engagement through embodied learning.For example, we teach the concept of abstraction and representation by presenting the game of Tic-Tac-Toe as an island divided into nine regions, but the middle one you cannot get to by boat, which is the way two teams arrive to the island. After playing the game once and realizing the game is really just Tic-Tac-Toe, the students understand the example is a representation with modified rules and game pieces. Then we talk about how the set of rules for a simple game like Tic-Tac-Toe is an algorithm with instructions for how to play the game, and we use playing the game to explain computation as the execution of an algorithm.Based on observations using analogies and active engagement in 6th grade classrooms, we provide many examples explaining how this curriculum initiative is an engaging, effective, and flexible approach for introducing CS concepts."
Analysis of Collaborative Learning in a Computational Thinking Class,"Chowdhury, Bushra and Bart, Austin Cory and Kafura, Dennis",2018,"Collaborative learning can help reduce the anxiety level of learners, improve understanding and thus create a positive atmosphere for learning. This study analyzes students' collaborative learning experiences within small interdisciplinary ""cohorts"" while learning computational thinking in a university-level class. The cohort allows students from different disciplines to contribute diverse perspectives, socially interact with each other and in turn create situations where two or more students learn together. This study uses both qualitative and quantitative means to explore students' collaborative learning experiences. Ethnographically-informed qualitative data using Stahl's collaborative framework is analyzed. The analysis revealed that most students found the cohort model to be valuable in learning computational thinking by allowing them to ask about and explain problems, especially with students from different disciplines who perceive and explain a problem differently. Quantitative data from a multi-term survey complements and confirms the findings from the qualitative data. Our study helps to inform those teaching foundational computing concepts to a diverse audience of learners."
Analysis of Sentiment Toward Computer Science in Pre-University Education,"Herrero-Álvarez, Rafael and Callejas-Castro, Enrique and Miranda, Gara and León, Coromoto",2024,Sin Valor
Analysis of the Curriculum Reform Method Based on the Combination of Computational Thinking and Engineering Thinking,"Wang, Feng and Wang, Hong",2019,Sin Valor
Analysis of the relationship between computational thinking and mathematical abstraction in primary education,"Chaabi, Hasnaa and Azmani, Amina and Dodero, Juan Manuel",2019,The aim of this paper is to broaden our view on the relationship between Computational Thinking and the development of the abstraction skill applied to mathematics. It was aimed to reveal trends and new potential solutions to be explored in the teaching of mathematics. We carefully selected sixty-four papers related with the objective above cited. From which we inspected twenty-four discovering that abstraction is a key skill for mathematics and Computational Thinking. We also discovered that we need to define which type of abstraction are we going to work on together with choosing between the two ways of teaching CT: integrating it to the curricula or as an after-school program.
Analyzing Computational Thinking Gameplay: Identifying Struggles and the Role of Experience,"Veng, Sotheara and Zhang, Yifan and Bergwall, Ekaterina and Rutherford, Teomara",2025,"Computational thinking (CT) skills are essential for navigating daily life, but how best to teach these skills is still being explored. Educational programming games can provide engaging environments to develop CT, yet uncovering student struggles during gameplay remains challenging. This study analyzed 15 undergraduates with varying programming experience playing the CT game, Fox and Field, utilizing gameplay videos, heart rate data, and surveys. Results revealed common struggle points in understanding the character's perspective, degree angles, and debugging, with notable differences between novice and experienced players. Findings suggest support targeting abstraction, pattern recognition, and debugging skills to improve future game design and scaffolding."
Analyzing the Effect of Computational Thinking on Mathematics through Educational Robotics,"Isabelle M. L., Souza and Andrade, Wilkerson L. and Lívia M. R., Sampaio",2019,Sin Valor
Analyzing the Impact of Computer Science Workshops on Middle School Teachers,"Morais, Isabel and Bachrach, Mayra S.",2019,Sin Valor
Analyzing the Learning Process in Online Educational Game Design: A Case Study,"Ahmadi, Navid and Jazayeri, Mehdi",2014,Sin Valor
Analyzing-Evaluating-Creating: Assessing Computational Thinking and Problem Solving in Visual Programming Domains,"Ghosh, Ahana and Malva, Liina and Singla, Adish",2024,"Computational thinking (CT) and problem-solving skills are increasingly integrated into K-8 school curricula worldwide. Consequently, there is a growing need to develop reliable assessments for measuring students' proficiency in these skills. Recent works have proposed tests for assessing these skills across various CT concepts and practices, in particular, based on multi-choice items enabling psychometric validation and usage in large-scale studies. Despite their practical relevance, these tests are limited in how they measure students' computational creativity, a crucial ability when applying CT and problem solving in real-world settings. In our work, we have developed ACE, a novel test focusing on the three higher cognitive levels in Bloom's Taxonomy, i.e., Analyze, Evaluate, and Create. ACE comprises a diverse set of 7x3 multi-choice items spanning these three levels, grounded in elementary block-based visual programming. We evaluate the psychometric properties of ACE through a study conducted with 371 students in grades 3-7 from 10 schools. Based on several psychometric analysis frameworks, our results confirm the reliability and validity of ACE. Our study also shows a positive correlation between students' performance on ACE and performance on Hour of Code: Maze Challenge by Code.org."
Appalachian Ingenuity and the Need for Rurally Sustaining Computational Thinking Pathways,"Dunbar, Kyle M. and Coenraad, Merijke and Iwatani, Emi",2024,"Our research-practice partnership with two school districts in Eastern Kentucky has created a rurally sustaining computational thinking (CT) pathway. In this paper we share our project's operational understanding of the concept of rural sustainability in the context of CT pathways. We posit that an effective CT pathway for rural communities must be firmly rooted in their cultural wealth, funds of knowledge, and socioeconomic priorities. Moreover, it should empower students to draw upon their own innovation heritage, leveraging CT as a tool to identify and address community challenges. Emphasizing the necessity of incorporating rural contexts into discussions on equitable access to computing education, our conceptualization provides insights into how policy and research can contribute to this important goal."
Application of Concept Map in the Study of Computational Thinking Training,"Xu, Ling and Tong, Ming-Wen and Li, Bin and Meng, Jiang and Fan, Chen-Yao",2019,Sin Valor
Application of Contextual Teaching and Learning model through Interdisciplinary Student Projects – An approach to enhancing Accounting and IT skills,"Banerjee, Rachna and Tarazi, Jumana and Ahli, Moaza Juma Abdulla",2019,Sin Valor
Applications of Machine Learning to Form-giving in Industrial Design,"Wang, Hung-Hsiang",2022,Sin Valor
Applying a Blended Board Game System with Robotic Arm for Training Computational Thinking: Learning through Human-Machine Competition,"Yong, Lin and Zhan, Zehui and Zou, Xuanxuan and Chen, Li and Lin, Zhihang and Zhan, Weiyu",2023,"The purpose of this study is to design and developed a blended board game system with robotic arm for training students' computational thinking, and examine its effect in an elementary school's information technology course. A board game virtual interface was developed based on Unity-3D, and the corresponding device with a robotic arm was set up based on ESP32-CAM development board. The learning system enables a dual interaction mechanism by learning through Human-Machine Competition virtually or physically. By participating in the game, students faced challenges such as board game step reasoning, model abstract, decision-making, and strategic planning, thereby enhancing their computational thinking and problem-solving skills. Results indicated that the blended board game improve students’ overall computational thinking skills, especially reasoning, decision-making and strategic planning. This research provides an innovative approach to develop virtual-physical integrated game-based learning system for promoting students' computational thinking through human-machine competition."
"Applying Game Learning Analytics to a Voluntary Video Game: Intrinsic Motivation, Persistence, and Rewards in Learning to Program at an Early Age","Zapata-Cáceres, María and Martín-Barroso, Estefanía",2021,Sin Valor
Approaches for teaching computational thinking strategies in an educational game: A position paper,"Bauer, Aaron and Butler, Eric and Popović, Zoran",2015,Sin Valor
Approaches of Learning and Computational Thinking in Students that get into the Computer Sciences Career,"Villalba-Condori, Klinge Orlando and Cuba-Sayco, Sonia Esther Castro and Ch\'{a}vez, Evelyn Paola Guillen and Deco, Claudia and Bender, Cristina",2018,"The way in which the student processes the information, codifies it and recovers it, constitutes its learning approach. The learning process differentiates two qualitative ways of dealing with this process: the deep approach and the superficial approach. The use of each approach depends on the context. However, the adoption of a deep learning approach is positively related to the academic performance. Computational Thinking is defined as a competence of the XXI century, which allows solving problems from a computational point of view, and there is a variety of instruments that allow to measure it, and to know the state in which the evaluated student is. In this paper, we verified the existence of the positive significant relationship between the learning approach and computational thinking in students entering the career of Computer Sciences. By applying Pearson correlation test to verify the relationship between Learning Approaches and Computational Thinking, we found that both variables have homogeneous behaviors and that students show similar conditions. Men are in better conditions than women on the evaluated aspects of the Computational Thinking, Also, we found a significantly positive relationship between Computational Thinking and the Learning Approach (r = 0,882). This result shows that the learning approaches that students' practice are linked to the computational thinking they demonstrate. According to the results, the teachers of this career must develop active and deep methodological strategies due to the predisposition in these students."
Are Children More Motivated with Plugged or Unplugged Approach to Computational Thinking? (Abstract Only),"Jiang, Shan and Wong, Gary K.W.",2018,"In recent years, we have seen an increasing interest in bringing programming back to K-12 education. Many educators begin to recognize the necessity of helping children develop computational thinking (CT) as an essential skill to address 21st century challenges. In this poster, we report the preliminary findings from the first year of a 3-year longitudinal study based on a coding curriculum for Grade 4 to Grade 6. This 3-year study aims to gain an understanding of how coding activities helps children at upper primary school ages develop CT for problem solving, and if this problem-solving mindset is transferrable to other contexts, for example, daily life scenario and mathematical field. A part of the research focuses on a comparative study between students' intrinsic motivation of coding (i.e. ""plugged"") activities and ""unplugged"" activities (i.e. learning concepts from computer science through paper-based games without programming), which helps us understand the advantages and disadvantages of different learning approaches to CT. At the end of the first year, around 600 fourth graders"" were assessed with their CT competence and affective tendency through: (1) a pre/post-test on the CT skill and mathematical ability; (2) a questionnaire on intrinsic motivation in plugged and unplugged activities. The preliminary findings indicate that students have gained a good programming-related knowledge and improved problem-solving skills through our curriculum. They were intrinsically motivated to participated in both types of activities. However, students did not show the ability to transfer computational thinking to mathematical context."
Are robots vegan? Unexpected behaviours in child-robot interactions and their design implications,"Wr\'{o}bel, Alicja and \'{Z}r\'{o}bek, Karolina and Indurkhya, Bipin and Schaper, Marie-Monique and Gunia, Artur and Zguda, Paulina Maria",2023,"A robot’s unexpected behaviors, such as a social faux pas or system errors, affect how a child perceives or interacts with the robot. In this study, we conducted two child-robot interaction workshops on active reading in a museum of modern art, and observed the behavior and attitudes of 18 children from two age groups (6-7 yrs and 10-12 yrs). The video and audio data from this event was analyzed to observe how children in a group respond to the robot’s unexpected behaviors. We extracted six different types of robot’s surprising behaviors: robot’s personality, movement malfunctions, inconsistent behavior, mispronunciation, delays and freezing. We analyzed how children in the younger and the older age groups respond to each of these behaviours, and what are the similarities and differences between the two groups. Based on this analysis, we suggest guidelines for designing age-appropriate learning interactions with social robots."
ARQuest: A Tangible Augmented Reality Approach to Developing Computational Thinking Skills,"Gardeli, Anna and Vosinakis, Spyros",2019,Sin Valor
Artistic Activity Through Computational Thinking,"Deng, Tzong Sheng",2018,Sin Valor
Assessing Computational Thinking in CS Unplugged Activities,"Rodriguez, Brandon and Kennicutt, Stephen and Rader, Cyndi and Camp, Tracy",2017,"Computer Science (CS) Unplugged activities have been deployed in many informal settings to present computing concepts in an engaging manner. To justify use in the classroom, however, it is critical for activities to have a strong educational component. For the past three years, we have been developing and refining a CS Unplugged curriculum for use in middle school classrooms. In this paper, we describe an assessment that maps questions from a comprehensive project to computational thinking (CT) skills and Bloom's Taxonomy. We present results from two different deployments and discuss limitations and implications of our approach."
Assessing Computational Thinking in Students' Game Designs,"Hoover, Amy K. and Barnes, Jackie and Fatehi, Borna and Moreno-Le\'{o}n, Jes\'{u}s and Puttick, Gillian and Tucker-Raymond, Eli and Harteveld, Casper",2016,"Designing games requires a complex sequence of planning and executing actions. This paper suggests that game design requires computational thinking, and discusses two methods for analyzing computational thinking in games designed by students in the visual programming language Scratch. We present how these two analyses produce different narratives of computational thinking for our case studies, and reflect on how we plan to move forward with our larger analysis."
"Assessing Computational Thinking Pedagogy in Serious Games Through Questionnaires, Think-aloud Testing, and Automated Data Logging","Fanfarelli, Joey R.",2021,Sin Valor
Assessing Computational Thinking Skills at First Stages of Schooling,"Kalliopi, Kanaki and Michail, Kalogiannakis",2020,"Computational thinking has already been acknowledged as an important learning objective for all students in compulsory education. Our research interests focus on the assessment of fundamental computational thinking competencies, such as collection, organisation and analysis of data, algorithmic thinking and abstraction. For the needs of our research, we implemented the digital platform PhysGramming, which constitutes the backbone of a relevant assessment tool we have built. PhysGramming is developmentally appropriate for first and second grade primary school students and provides the opportunity to create their own digital games, transforming them from passive consumers to active creators of digital technology. The assessment tool has been applied to 450 students in the first and second grade of primary schools on Crete, Greece from February to June 2019. The research was conducted attuned to the ethical guidelines of educational research, within the framework of the physical and natural science courses and evolved around three axes: (a) Checking the validity and the reliability of the results that come out when applying the proposed assessment tool. (b) Designating the levels of computational thinking skills of students at first stages of schooling. (c) Checking the correlation between the levels of computational thinking skills and the comprehension of the lesson's content. In other words, we check whether high learning performance is a necessary and sufficient condition for diagnosing high levels of basic computational thinking skills. In this paper, we shortly describe the assessment tool we propose."
Assessing Elementary Teachers' Knowledge of Integrated Computational Thinking,"Joshi, Deepti and Joswick, Candace and Albert, Jennifer and Jocius, Robin and Blanton, Melanie and Petrulis, Robert and Dawson, Trent",2025,"During the UnboxingCT project summer professional development, the Integrated CT Assessment was piloted with 72 elementary teachers. The assessment is based on computational thinking integration literature and asks teachers to identify different computational thinking concepts in content area scenarios. The assessment allowed us to identify which computational thinking concepts teachers were most familiar with prior to the professional development and assess changes in their understanding following the professional development. Our next step will be validation of the assessment with a larger group of teachers."
Assessing implicit computational thinking in zoombinis gameplay,"Rowe, Elizabeth and Asbell-Clarke, Jodi and Gasca, Santiago and Cunningham, Kathryn",2017,"In this study we examine how playing Zoombinis can help upper elementary and middle school learners build implicit computational thinking (CT) skills. Building on prior methods used with the digital science learning games, Impulse and Quantum Spectre, we are combining video analysis and educational data mining to identify implicit computational thinking that emerges through gameplay [1]. This paper reports on the first phase of this process: developing a human labeling system for evidence of specific CT skills (e.g., problem decomposition, pattern recognition, algorithmic thinking, abstraction) in three Zoombinis puzzle by analyzing video data from a sample of elementary learners, middle school learners, game experts, and computer scientists. Future work will combine these human-labeled video data with game log data from these 70+ learners and computer scientists to create automated assessments of implicit computational thinking skills from gameplay behaviors in large player audiences. This poster with video examples will share results of this work-in-progress."
"Assessing Implicit Computational Thinking in Zoombinis Gameplay: Pizza Pass, Fleens &amp; Bubblewonder Abyss","Rowe, Elizabeth and Asbell-Clarke, Jodi and Cunningham, Kathryn and Gasca, Santiago",2017,"Players can build implicit understanding of challenging scientific concepts when playing digital science learning games [1]. In this study, we examine implicit computational thinking (CT) skills among upper elementary and middle school students during Zoombinis gameplay. We report on the development of a human labeling system for gameplay evidence of four CT skills: problem decomposition, pattern recognition, algorithmic thinking, and abstraction. We define labels that identify use of these skills in three Zoombinis puzzles, based on analysis of video data from both CT novices (upper elementary and middle school students) and CT experts (computer scientists and expert Zoombinis players). Future work will involve the construction of detectors for implicit CT skills based on these human labels, in order to analyze gamelog data at scale and give feedback to teachers."
Assessing In-service Teachers' Development of Computational Thinking Practices in Teacher Development Courses,"Kong, Siu-Cheung and Lao, Andrew Chan-Chio",2019,"To promote computational thinking (CT) education in primary schools, in-service teachers need to attend CT teacher development programmes. One of the intended learning outcomes of the programme is to improve CT practices of teachers, which is one of the three key elements in the CT framework proposed by Brennan and Resnick. Assessing one's CT practices is challenging because there is no universally agreed-upon assessment method on CT practices in the existing literature. This study adopted the Evidence-centered Assessment Design (ECD) method to design test questions to evaluate teachers' development of CT practices. This study provided two Teacher Development Courses (TDCs) to enable teachers to teach CT through programming. TDC 1 focused on developing CT concepts, practices and perspectives of teachers, while TDC 2 put emphasis on pedagogies of teaching CT. 80 teachers participated in the two courses. The CT practices tests were administered before the courses, between the two courses and after the courses respectively. Results indicated that CT practices were improved progressively when the in-service teachers attended the two courses. It indicated that it is useful for teachers to experience programming practices in their initial learning as well as during their pedagogical development."
Assessing Learning Behavior and Cognitive Bias from Web Logs,"Rao, Rashmi Jayathirtha and Stewart, Christopher and Perez, Arnulfo and Renganathan, Siva Meenakshi",2018,Sin Valor
Assessing Middle School Students' Computational Thinking Through Programming Trajectory Analysis,"Akram, Bita and Min, Wookhee and Wiebe, Eric and Mott, Bradford and Boyer, Kristy Elizabeth and Lester, James",2019,"With national K-12 education initiatives such as ""CSForAll,"" block-based programming environments have emerged as widely used tools for teaching novice programming. A key challenge presented by block-based programming environments is assessing students' computational thinking (CT) and programming competencies. Developing assessment methods that can evaluate students' use of CT practices such as testing and refining, and developing and using appropriate algorithms, can help teachers evaluate students learning and provide appropriate scaffolding. In this work, we utilize an evidence-centered assessment design approach to devise a three-dimensional assessment to evaluate students' CT competencies based on evidence extracted from their programming trajectories in a block-based programming environment. In this assessment, the first dimension assesses students' knowledge of essential CT concepts, the second dimension assesses students' dynamic testing and refining strategies, and the third dimension assesses their overall problem-solving efficiency. We apply the assessment framework to data collected from students' interactions with a game-based learning environment designed to develop middle-grade students' CT competencies and programming skills. The results demonstrate that students' knowledge of basic CT constructs, such as appropriate use and combination of control structures, serves as the foundation for designing and implementing effective algorithms. Further, we assessed students testing and refining strategies over the three dimensions of novelty, positivity, and scale. The results demonstrate that students with higher algorithmic capabilities tend to make more novel, positive, and small-scale changes. The results reveal distinctive patterns in students' approaches to computational thinking problem solving and make a step toward identifying and assessing productive computational thinking practices."
Assessing Pre-Service Elementary Science Education Teachers’ Professional Knowledge in the Field of Computational Thinking,"Arndt, Nicolas and Br\""{u}ckmann, Maja",2023,"Computational thinking is a key competence for children to learn in today’s digitized world. In order to effectively teach computational thinking, elementary science teachers need to have appropriate professional knowledge, consisting of content as well as pedagogical content knowledge and pedagogical knowledge [15]. This research project will adapt the Computational Thinking Test (CTt) to assess German pre-service teachers’ content knowledge in the area of computational thinking, and develop corresponding items based on case vignettes to assess pedagogical content knowledge."
Assessing primary school students' intrinsic motivation of computational thinking,"Jiang, Shan and Wong, Gary K.W.",2017,Sin Valor
Assessing Self-Efficacy Method for Enhancing Computational Thinking in Educational Game Environment,"Nobnop, Ratchanon and Chondamrongkul, Nacha and Temdee, Punnarumol",2024,Sin Valor
Assessing the Current Level of the Computational Thinking Within the Primary and Lower Secondary School Students using Educational Robotics Tasks,"Bryndov\'{a}, Lucie and Mali\v{s}\r{u}, Petri",2020,"The aim of this research was to develop a set of tasks assessing prerequisite Computational Thinking (CT) skills within Czech primary school students using an educational robotics as a supporting tool. Czech Republic, along with numerous European countries, currently implements a revision of the existing computer science curriculum at the primary and secondary education level, to widen the national information literacy and embed the development of CT into the basic STEM education. The integration of the CT development at a level of a national school education raises a question of assessing actual CT skills of the students and creating a standardized methodology for a such assessment. This paper discusses the results of the research aimed to assess the CT skills within primary school students which was tested on a sample number of 90 students age 8 - 13 during extended education classes and events."
Assessing the Impact of Gamification in Higher Education: An Experimental Study using Kahoot! and Nearpod During COVID-19 Pandemic,"Al Redhaei, Aneesa and Awad, Mohammed and Salameh, Khouloud",2022,Sin Valor
Assessment Methods and Interventions to Develop Computational Thinking — A Literature Review,"Vinu Varghese, V.V. and Renumol, V.G.",2021,Sin Valor
Assessment of Computational Thinking in regular basic education: case I.E.T.P. “José Obrero”,"Curasma, Ronald Paucar and Jara, Nolan Jara and Curasma, Herminio Paucar and Ornetta, Victor Cruz",2019,Sin Valor
Assessment of Computational Thinking Skills: A Systematic Review of the Literature,"Muñoz, Rene Fabián Zúñiga and Alegría, Julio Ariel Hurtado and Robles, Gregorio",2023,Sin Valor
Assessments for Computational Thinking in K-12 (Abstract Only),"Grover, Shuchi and Bienkowski, Marie and Snow, Eric",2015,"As computer science (CS) and computational thinking (CT) make their way into all levels of K-12 education, valid assessments aligned with new curricula can assist in measuring student learning, easing the way for adoption of new computing courses, and evaluation of pedagogical approaches for teaching computing ideas and concepts. Without attention to rigorous assessment, CT can have little hope of making its way successfully into K-12 school education settings at scale. This BoF session will involve discussion around ongoing work at SRI International (under several NSF-funded projects) on the design and development of formative and summative assessments for the ECS curriculum. Additionally, various forms of assessment (including free response and multiple-choice questions, and computational artifacts), and insights from past research on their use will be discussed. BOF attendees will be able to discuss multiple viewpoints, connect with others who care about assessment of CT, and share resources and ideas."
Attitude towards Computational Thinking of in-service teachers,"Laime-Choque, Adriana Maria and Mamani-Calcina, Jorge Gilbert and Cardona-Reyes, Hector and Ponce-Aranibar, Maria Del Pilar and Vera-Vasquez, Cesar Gonzalo and Espinoza-Suarez, Silvia",2022,Sin Valor
Attractive Educational Robotics Motivates Younger Students to Learn Programming and Computational Thinking,"Jormanainen, Ilkka and Tukiainen, Markku",2021,"Educational robotics and physical computing have proved to be good sources of motivation for students of all ages and school levels. We conducted a series of workshops in the primary schools of city of Joensuu in eastern Finland, focusing on training the fundamental computational thinking (CT) skills by using a programmable and interactive Teddy Bear toy. Educational robotics and physical computing devices have proved to be an efficient way to teach these skills regardless the students’ age group or previous background. To assess the students’ intrinsic motivation towards Teddy Bear programming, we devised a survey for workshop participants and conducted a statistical analysis to compare differences between the genders and age groups. The results of the large-scale empirical study (n=1440) show that the students at the age of 9-10 years (Grades 3-4) are significantly more motivated towards such a learning tool than the students of age 11-12 years (Grades 5-6). Furthermore, we show that especially young girls find the Teddy Bear programming motivating and they are eager to learn more. This indicates that appealing tools play a key role when teaching programming and CT concepts to young school children."
Auglets: Intelligent Tutors for Learning Good Coding Practices by Solving Refactoring Problems,"Kumar, Amruth N.",2024,"Code quality is of universal concern among educators. Refactoring code, i.e., revising the structure of a program without changing its behavior is one approach for improving code quality. Numerous software tools have been created to help students refactor the code they write. Only a few software tutors have been reported in literature that help students proactively learn code quality by solving refactoring problems. But they suffer false positive and false negative grading issues because they allow freehand coding. We investigated whether refactoring tutors that do not allow freehand coding could be used to help students learn about non-trivial anti-patterns. We developed and deployed two software tutors for refactoring problems that are based on the principle of ""refactoring without rewriting code"", and cover a subset of refactoring problems that can be solved using only deletion, duplication, reordering and token-wise editing of lines of code. We investigated whether students needed to learn the anti-patterns covered by the tutors and whether they benefited from using the tutors. In this experience report, we start by describing the tutors - the list of refactoring concepts covered, the user interface, grading, feedback and usage. We report our experience using the tutors over three semesters, which confirmed that both introductory and advanced students needed and benefited from using the tutors despite the limitations of the tutors' coverage. We reflect on what worked and what did not. The tutors currently cover C++, Java and C#. They are available for free for educational use on the web at auglets.org."
AuthentiCT: Making CT Authentic to Learners,"Satavlekar, Spruha and Mishra, Shitanshu and Iyer, Sridhar",2023,"Novice learners initiating computational Thinking face challenges of complexity and have a longer learning curve to understand the interfaces. The contexts in an introductory CT lesson are seldom situated in the learners' real-life. In order to make CT authentic to learners, the environment AuthentiCT has been designed with activities rooted in learners' everyday tasks to make CT skills meaningful. A study with 16 middle-schoolers performing AuthentiCT activities showed that learners found CT relevant and applied problem-solving in similar contexts in their everyday life."
Automated Feedback and Authentic Assessment for Online Computational Thinking Tutoring Systems,"Jamil, Hasan M. and Mou, Xin",2022,Sin Valor
Automated Feedback in Software Engineering: Enhancing Computational Thinking Process,"Parsa, Faraz and Moghadam, Amir Ali Amiri and Ashuri, Turaj",2024,Sin Valor
Automated Personalized Assessment of Computational Thinking MOOC Assignments,"Jamil, Hasan M.",2017,Sin Valor
Automated Structural Evaluation of Block-based Coding Assignments,"Damle, Param and Bull, Glen and Watts, Jo and Nguyen, N. Rich",2023,"As computer science is integrated into a wider variety of fields, block-based programming languages like Snap!, which assemble code with visual blocks rather than text syntax, are increasingly used to teach computational thinking (CT) to students from diverse backgrounds. Although automated evaluators (autograders) for programming assignments usually focus on runtime efficiency and output accuracy, effective evaluation of a student's CT skills requires assessing coding best practices, such as decomposition, abstraction, and algorithm design. While autograders are commonplace for text languages like Python, we present a machine learning approach to assess how effectively block-based code demonstrates understanding of CT fundamentals. Our dataset consists of Snap! programs written by students new to coding and evaluated by instructors using a CT rubric. We explore how to best transform these programs into low-dimensional features to allow encapsulation and repetition patterns to emerge. Experimentation involves comparing the effectiveness of a suite of clustering models and similarity metrics by analyzing how directly automated feedback correlates to the course staff's manual evaluation. Lastly, we demonstrate the practical application of the autograder in a classroom setting and discuss scalability and feasibility in other domains of CS education."
Automatic Classification of Computational Thinking Skills in Elementary School Math Questions,"Costa, Erick J. F. and Campelo, Cláudio E. C. and Campos, Lívia M. R. Sampaio",2019,Sin Valor
Automatic Formative Assessment in Computer Science: Guidance to Model-Driven Design,"Marchisio, Marina and Margaria, Tiziana and Sacchet, Matteo",2020,Sin Valor
Automating the Detection of Personally Identifiable Information (PII) in Japanese-American WWII Incarceration Camp Records,"Marciano, Richard and Underwood, William and Hanaee, Mohammad and Mullane, Connor and Singh, Aakanksha and Tethong, Zayden",2018,Sin Valor
Bebras as a Teaching Resource: Classifying the Tasks Corpus Using Computational Thinking Skills,"Lonati, Violetta and Malchiodi, Dario and Monga, Mattia and Morpurgo, Anna",2017,"We present a new classification method for Bebras tasks based on the ISTE/CSTA operational definition of computational thinking. The classification can be appreciated by teachers without a formal education in informatics and it helps in detecting the cognitive skills involved by tasks, and makes their educational potential more explicit."
Bebras-inspired Computational Thinking Primary School Resources Co-created by Computer Science Academics and Teachers,"Lehtim\""{a}ki, Taina and Monahan, Rosemary and Mooney, Aidan and Casey, Kevin and Naughton, Thomas J.",2022,"This paper describes our process of creating computational thinking (CT) resources for primary school teachers in Ireland. The National Council for Curriculum and Assessment has proposed a revised primary mathematics curriculum with an emphasis on CT skills and problem solving, and some teachers would like to introduce it already on an informal basis. However, CT is not yet part of teacher training. Our motivating question has been: how can teachers without a computer science background deliver CT at primary level in Ireland? Our process involves third-level computer science academics co-creating resources with in-service and pre-service teachers during workshops. The resources comprise a workbook and lesson plans. Our resources are based on tasks from the International Bebras Challenge, a well-known large-scale international CT contest with a reasonably gender-neutral profile of school-age participants. The workbook consists of ten Bebras tasks, each followed by a page of original activities on the theme of the task. A set of ten lesson plans accompanies the workbook. Each lesson plan has information about how to use the corresponding workbook activities in the classroom, where the activity might fit into the existing curriculum, categorisation of the task in terms of eight CT topics, differentiation, and extension activities. This paper explains our process of workshop planning, workbook creation, and lesson plan co-creation. Preliminary evaluation of our process uses teacher feedback."
Before You Write Code ... Putting Data and Ethics at the Center of Introductory Computing,"Rentz, Zach and Clements, John and Wood, Zo\""{e} and Keen, Aaron",2021,"Computing is a large and growing presence in society in 2020, and like many others, we see a strong demand from non-computing majors for ""CS For All"" courses. Unlike many others, we do not feel that putting traditional programming first is the best way to do this. Instead, we are rethinking the way we introduce computing to allow a broad audience to engage with this discipline.Any computational problem we might tackle requires that we explicitly think about the data involved to solve the problem. Likewise, many computational problems potentially have deep implications for the effect of emerging technologies on society including complex racial and social justice issues. When training novice computer scientists, too often the focus is on learning to write code, but not on explicitly learning computational thinking (data-first, declarative) and how to spot, analyze, and mitigate the ethical implications of potential computing solutions. When teaching those from other disciplines about computer science, the importance of learning to write code is diminished still further, relative to skills in computational thinking and in reasoning about ethical issues in computing and emerging technologies."
BeLLE: Multinational Research Collaboration on Bebras &amp; ViLLE,"Kaarto, Heidi and Hyyr\""{o}, Heikki and Parviainen, Marika",2023,The annual Bebras challenge aims to grow students' interest in computer science via engaging problem solving tasks whereas ViLLE is a widely used digital learning environment with a built-in assessment tool and analytics for large number of students. The BeLLE collaboration connects the two by adapting ViLLE's assessment tool in the Bebras challenge. The goal is to analyze the interplay of computer science education and students' computational thinking development in the participating countries. BeLLE welcomes new interested countries to join the collaboration.
Benefits of Computational Thinking in Entrepreneurship,"Nuar, Ahmad Najmi Amerhaider and Rozan, Mohd Zaidi Abd",2019,Sin Valor
Best Practices for Developing Computational Thinking,"Garcia, Dan and Garcha, Sonia and Mukund, Madhavan and Shah, Vipul",2023,"CSforALL is an umbrella term for a movement that seeks to bring engaging, culturally-relevant, and meaningful computer science to all students. It includes many avenues for learning – after-school outreach activities, once-a-year ''Hour of Code'' activities as well as formalized instruction in classes, led by an inspiring and well-prepared teacher. There is a perennial need to support pre-service and in-service teachers with curricula and pedagogical content knowledge (PCK) so they can be successful in the classroom, but where to start?Jeannette Wing has long evangelized computational thinking (CT) as a skill ''for everyone, everywhere. Computational thinking will be a reality when it is so integral to human endeavors it disappears as an explicit philosophy''. [2] We have found that CT offers a remarkable foundation of engagement, intuition, and grounding upon which to build higher-level computer science fluency. This panel brings together four seasoned experts who have collectively provided computer science and CT professional development to a vast multitude of teachers and students to share their best practices."
Beyond Boundaries: Towards Symbiotic Relationship Between Ecological Arts and Computational Thinking for Sustainability,"Gaikwad, Snehalkumar 'Neil' S.",2020,"In today's Anthropocene era, human-and-climate induced sustainability challenges threaten the livelihood of vulnerable communities across the planet. To mitigate the risks of sustainability threats, data-and-theory driven scientific models, artistic practices, and environment designs play a critical role. However, these methods alone fail to reach a broader audience and translate into public discourse for participatory collective action. In this paper, we present Beyond Boundaries, a renaissance that re-envisions the relationship between ecological arts and computational thinking to contextualize threats to sustainability at regional and global scales. We establish an integrated framework combining Earth remote sensing satellite time-series, half a decade of ecological arts, and a public exhibition to curate the symbiotic relationship between arts and science. Beyond Boundaries sheds new light on how synergistic associations among disciplines can inspire scientific inquiry, artistic imaginations, and civic engagement-and-discourse for sustainability."
Beyond computer science: computational thinking across disciplines,"Settle, Amber and Goldberg, Debra S. and Barr, Valerie",2013,Sin Valor
Beyond Minecraft: Facilitating Computational Thinking through Modeling and Programming in 3D,"Repenning, Alexander and Webb, David C. and Brand, Catharine and Gluck, Fred and Grover, Ryan and Miller, Susan and Nickerson, Hilarie and Song, Muyang",2014,Sin Valor
Beyond Programming: A Computer-Based Assessment of Computational Thinking Competency,"Lai, Rina P. Y.",2021,"Computational Thinking (CT), entailing both domain-general and domain-specific skills, is a competency fundamental to computing education and beyond. However, as a cross-domain competency, appropriate assessment design and method remain equivocal. Indeed, the majority of the existing assessments have a predominant focus on measuring programming proficiency and neglecting other contexts in which CT can also be manifested. To broaden the promotion and practice of CT, it is necessary to integrate diverse problem types and item formats using a competency-based assessment method to measure CT. Taking a psychometric approach, this article evaluates a novel computer-based assessment of CT competency, Computational Thinking Challenge. The assessment was administered to 119 British upper secondary school students (M = 16.11; SD = 1.19) with a range of prior programming experiences. Results from several reliability analyses, a convergent validity analysis, and a Rasch analysis, provided evidence to support the quality of the assessment. Taken together, the study demonstrated the feasibility to expand from traditional assessment methods to integrating multiple contexts, problem types, and item formats in measuring CT competency in a comprehensive manner."
Beyond the Lab: Using Technology Toys to Engage South African Youth in Computational Thinking,"Lin, Veronica and Shaer, Orit",2016,"We present a two-part case study to explore how technology toys can promote computational thinking for young children. First, we conducted a formal study using littleBits, a commercially available technology toy, to explore its potential as a learning tool for computational thinking in three different educational settings. Our findings revealed differences in learning indicators across settings. We applied these insights during a teaching project in Cape Town, South Africa, where we partnered with an educational NGO, ORT SA CAPE, to offer enriching learning opportunities for both privileged and impoverished children. We describe our methods, observations, and lessons learned using littleBits to teach computational thinking to children in early elementary school, and discuss how our lab study informed practical work in the developing world."
BingBee @ RaglanRoad - A field trial with unattended educational kiosks,"Wentworth, Peter",2010,Sin Valor
"Blended Learning of ""Data Structure"" Course Based on Computational Thinking","Tang, Yanqin and Chen, Weiwei and Li, Zhigang and Shi, Lei and Wu, Yongfen",2018,Sin Valor
Blending Entrepreneurial Education in Senior and Graduate-level Electrical Engineering Courses,"Tabassum, Shawana and Sundaravadivel, Prabha",2023,Sin Valor
Blending Mobile Programming and Liberal Education in a Social-Economic High School,"Fronza, Ilenia and El Ioini, Nabil and Corral, Luis",2016,Sin Valor
Block-based Programming Enabling Students to Gain and Transfer Knowledge with a No-code Approach,"Corral, Luis and Fronza, Ilenia and Pahl, Claus",2021,"In this article, we describe our experience designing and teaching a curriculum on mobile software development that has benefitted from the no-code philosophy leveraging the power of block-based programming tools. We review a journey of 10 years using block-based programming platforms to lay foundations on software development skills, and empower the creative potential of high school students. Our objective is to provide a review of the evolution, capabilities and technical coverage of the block-based software platforms, and to discuss the impact that we have observed on users and developers who have become acquainted on the use of block-based programming tools through our courses"
Block-oriented programming with tangibles: An engaging way to learn computational thinking skills,"Malizia, Alessio and Turchi, Tommaso and Olsen, Kai A.",2017,Sin Valor
BlueAI: Designing Artificial Intelligence for Environment Science and Climate Change Learning Experiences for K12 Students,"Dogan, Gulustan and Sahin, Elif and Wilkinson, Catherine Fay and Moody, Amelia K. and Song, Yang",2024,"The subject of teaching artificial intelligence (AI) in K-12 settings is rapidly expanding and will significantly affect computer education. While AI is currently a required part of computing curricula at universities, there are unique challenges in incorporating AI into K-12 education. The goal of BlueAI is to prepare K-12 educators to use game-based lessons to teach computational thinking, AI, and computer science skills that will interest children while incorporating important environmental and marine science subjects. We conducted assessments where we taught lessons at two different schools, and presented our findings."
"Blurring the Boundaries between Science, Math and Computer Science","Orban, Chris",2024,"In 2017 the STEMcoding project was launched, which aimed to develop and disseminate free content that mixes content from science, math and computer science standards. Early work focused on ''physics of video games'' activities for high school physical science and physics while later work has ventured into content for astronomy and high school mathematics. Some of these activities appear on hourofcode.com and in ''instructional supports'' for physical science in Ohio. An important component of our efforts is creating high quality videos that walk through our activities on the STEMcoding youtube channel (http://youtube.com/STEMcoding). These videos frequently feature women and students from underrepresented groups. Ultimately our goal is to encourage high school science and math teachers to integrate computer science and data science content into their subjects, even if they do not have the credentials to teach computer science. This can enhance science and math classes, and as these teachers become comfortable with this approach, some go on to become certified to teach computer science."
Boardgames and Computational Thinking: how to identify games with potential to support CT in the classroom,"Scirea, Marco and Valente, Andrea",2020,"Boardgames exist that explicitly address Computational Thinking (CT for short) concepts and practices. Some are actual games, while others are more akin to gamified learning activities. And since CT has been formalized only recently, many existing boardgames unknowingly might support aspects of CT. To help educators and game practitioners navigate this complex landscape, we analyze a selected sample of analog games, and propose to categorize their features with respect to CT concepts and practices. The main contribution of this paper is a novel way to identify potential CT-relevant games, that leverages on the authors’ experience with digital and analog games, playful and game-based learning. Although limited, this approach appears promising and practical for CT teachers and game designers interested in adapting existing games to the classroom or developing better CT-supporting boardgames."
Bridge to Computing: An outreach program for at-risk young men,"Cateté, Veronica and Bell, Dave and Isvik, Amy and Lytle, Nicholas and Dong, Yihuan and Barnes, Tiffany",2020,Sin Valor
Bridging the Gap: Computational Thinking as a Pathway to Equitable Math Education for Neurodiverse Learners,"Kastelein, Kate and Dawson, Kelsie and Tate, Rhonda",2024,"Students who receive special services in mathematics or neurodiverse learners (NDLs) deserve to learn mathematics at a rigorous and equitable level as their peers. Yet, many of these students are not reaching proficiency. Computational thinking (CT) may function as a bridge between students' mathematical learning and their everyday lives. We argue that computational thinking is a pathway for NDLs to follow that will bridge the connections between math instruction and the real-life problems with which NDLs are eager to engage. We identified the critical elements needed to support rural special educators' integration of CT into math instruction by identifying intersections between CT, Math, and the assets of NDLs, as well as barriers to implementation. By leveraging connections from an existing RPP (Research-Practice Partnership), which focuses on CS education and Business intersection in rural Maine schools, we created an opportunity for participatory research for special educators and paraprofessionals often overlooked in these processes. We employed a multi-method, design-based research (DBR) approach. Through observational, survey, and interview data, we found that 1) educators are not currently receiving support for integrating CT in special education classrooms, 2) activities piloted by our educators were well received by students, 3) current standards and Individualized Educational Plan (IEP) requirements for NDLs are a significant barrier to implementation. The need for expanded, regular PD for special educators is evident, as is the potential for CT as a bridge for mathematical understanding for NDLs."
Bridging the Quantum Computing Skills Gap: Integrating Quantum Education into Computer Science Curricula,"Bahadori, Farzin and Dvorak, Radana",2024,"The lack of a skilled workforce in quantum computing parallels the current cybersecurity skills gap. [7], [6], [8] To prevent a similar gap in quantum computing as currently industry is experiencing in filling cybersecurity jobs, we present proactive education strategies to address the issue. This tutorial will present current efforts in quantum education and how Saint Martin's Computer Science Department contributes to these efforts by integrating quantum computing modules into existing curricula using the KEEN Entrepreneurial Mindset framework [2]. Participants will be able to implement one of the introductory models utilizing open-source tools and resources to engage students in solving problems using quantum computing concepts."
Bringing Computational Thinking Skills Into Physics Classroom Through Project-Based Learning,"Handayani, Rif’Ati Dina and Lesmono, Albertus Djoko and Prastowo, Srihandono Budi and Supriadi, Bambang and Dewi, Nila Mutia",2022,Sin Valor
Bringing Computational Thinking to Hospital Classrooms,"Gonz\'{a}lez-Gonz\'{a}lez, Carina S. and C\'{a}ceres-Garc\'{\i}a, Lorena and Violant-Holz, Ver\'{o}nica",2019,"The fundamental rights of hospitalized minors include receiving educational and emotional attention during the illness situation. Currently the teaching of computational thinking and programming constitute a new literacy that must be carried to all classrooms, including hospital classrooms. This paper presents an exploratory case study on an educational intervention that is inclusive and adaptable to the characteristics of hospital classrooms for the teaching of computational thinking in a transversal way and programming without screens and robots, including working with emotions. In this study, 22 minors participated in five sessions developed in a hospital classroom. The results indicate that the intervention has improved the emotional state of the children, as well as their knowledge regarding computational thinking."
Bringing computational thinking to K-12: what is Involved and what is the role of the computer science education community?,"Barr, Valerie and Stephenson, Chris",2011,"The process of increasing student exposure to computational thinking in K-12 is complex, requiring systemic change, teacher engagement, and development of signifi cant resources. Collaboration with the computer science education community is vital to this effort."
Bringing computational thinking to teachers' training: a workshop review,"Dodero, Juan Manuel and Mota, Jos\'{e} Miguel and Ruiz-Rube, Iv\'{a}n",2017,"In recent years, several visual programming languages and tools are emerging, which allow young students to easily program applications. Particularly, the block-based language used by Scratch has been the standard in most school initiatives to introduce Computational thinking (CT) in courses unrelated to computing. However, CT competences are not specifically included in the curricula of many Higher Education degrees that future teachers of Primary and Secondary Education have to complete. This paper describes a workshop for teachers' training on CT. It is based on the block-based common language of Scratch, but focused on enhancing teachers' skills to develop mobile applications with a tool based on the MIT's AppInventor. This workshop provided some insights on the capabilities of future teachers in the use of programming tools1."
Bringing computational thinking to the digital humanities: introducing students to explorations of digitized texts,"LeBlanc, Mark D.",2017,"The rapid digitization of texts presents both new opportunities and real barriers of entry to computer-assisted explorations of texts for both faculty and students. Computer science programs, especially those on liberal arts campuses, are well positioned to help faculty and students across the humanities (and social sciences) who seek to apply computational techniques to their digitized corpora of interest. This workshop provides hands-on practice with Lexos [1], a web-based workflow for entry-level text processing, statistical analysis, and visualization of results when exploring digitized texts. Funded by the National Endowment for the Humanities (NEH), Lexos reflects six years of software development with undergraduates in a model that blends a start-up company with interdisciplinary research. In addition to hands-on play, participants will be introduced to course materials used in our ""Computing for Poets"" course as well as share in discussions of effective practices for outreach to the digital humanities on their campuses. More information on our successful use in the classroom and in our own research is available at our website [2]. The software for Lexos is available on our GitHub repo [3]."
Bringing Teachers and Researchers Together through Participatory Design and Cooperative Prototyping in Computing Education,"Musaeus, Line Have and Petersen, Marianne Graves and Klokmose, Clemens Nylandsted",2024,"Computing education is becoming increasingly important in high school curricula, but there are challenges in teaching computing, including teachers' professional development and the development of appropriate learning tools. Participatory design and cooperative prototyping offer opportunities for identifying challenges in computing education and ways for teachers to be involved in the design of new learning tools. This study describes the process of codesigning a learning tool to overcome some of these challenges for computing education in high school, involving teachers, developers, and researchers as collaborators. The study investigating how cooperative prototyping and participatory design can lead to mutual learning about challenges in teaching computing. We prototyped learning activities and the learning tool, CoTinker, in collaboration between six teachers, two developers, and four researchers in four subcases and implemented them in classrooms with a total of 83 students. We show how challenges such as students' collaboration and transfer of knowledge in computing education were overcome by applying the prototypes in computing education classrooms in high school."
"Build Bridges between Conversation, Story, Visual Programming, and Text-based Programming in K-8 Education","Yang, Yueming and Augustine, Chase and Werts, Christopher and Wang, Yongzhe and Sherwin, Jordan",2023,Sin Valor
"Build Bridges between Play, Computation, Visual Programming, and Text-based Programming in Early Childhood Education","Sherwin, Jordan and Wang, Yongzhe and Yang, Yueming",2021,"In this poster, we focus on a learning path that can smoothly connect the unplugged activities with the plugged programming ones. Our approach is to provide young children with visual programming and text-based programming materials that are directly associated with the computational logic in some selected children's games or literature stories. We demonstrate this combo-design idea with examples of role-play, Scratch programming, and Python code. Our method could be adapted to any suitable children's activities in different school settings."
Building Awareness of Computational Thinking Pathways across a Large School District,"Rangel, Alessandra and Coenraad, Merijke and Ruiz, Pati and Dunbar, Kyle and Milenkovic, Lisa and Arriola, Sheryl and Marousky, Annmargareth",2024,"As states move to adopt computer science (CS) and computational thinking (CT) standards to prepare students for an increasingly technological world, school districts are integrating curriculum with CT skills and practices, building the capacity of their teachers and administrators through professional development, and increasing the knowledge infrastructure to support CT opportunities for students. One challenge that districts face when scaling new initiatives occurs when the work becomes siloed to one ''champion'' teacher or a singular motivated department. This poster presents Broward County Public Schools' use of an interactive infographic to build awareness of their CT initiative, including considerations for utilizing an infographic tool and the design decisions made to engage various stakeholders. The poster provides examples of methods to build knowledge of an emerging initiative and adds to the growing body of work in supporting districts as they scale their CS/CT initiatives."
Building Computational Creativity in an Online Course for Non-Majors,"Peteranetz, Markeya S. and Soh, Leen-Kiat and Ingraham, Elizabeth",2019,"In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These ""computational thinking"" courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course."
Building Technological Improvisation Skills through Student-devised Coursework Topics,"Johnson, Colin G.",2023,"The ability of improvise solutions to problems using a variety of technologies is an important, if often tacit, desired outcome from advanced computer science education. This paper will describe experience from three modules at two universities where students design their own assessment topic, based on a set of requirements aligned with the learning outcomes.The paper discusses why these technological improvisation skills are important, and how students can learn to cope with combining a variety variety of techniques, ideas and technologies that don't immediately fit well together. This helps students to build important high-level and meta-cognitive skills, and at a practical level provides students with projects that they can demonstrate to prospective employers after graduation.We discuss how these assessments were presented to students, and how the resulting student activities were aligned with learning objectives. We describe how complex ideas such as added value were explained to students, and how these assignments encouraged students to work on projects of ambition and substance, and to encourage their curiosity.Finally, we discuss some difficulties with this kind of assessment, and how we have endeavoured to tackle these difficulties. These include how such a diversity of assessments were marked fairly and consistently, how students who are struggling with the core module content can engage effectively, and how these kind of assessments can be devised without an excessive burden on teaching staff."
Building-Blocks: Generating 3D Design by Snapping Blocks,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
CABECT: collaborating across boundaries to engage undergraduates in computational thinking (abstract only),"Pulimood, Sarah Monisha and Pearson, Kim and Bates, Diane C.",2014,"Innovative solutions for complex problems entail diversity of perspectives, and students must learn to integrate concepts from multiple disciplinary areas. Yet, to provide collaborative experiences that cross disciplinary boundaries, educators must navigate numerous administrative and pedagogical challenges. In this hands-on workshop participants will learn how to leverage existing courses for students and faculty to collaborate across disciplines and with a community partner, to develop socially-relevant computational solutions for real-world problems. Participants will also brainstorm ideas on addressing specific challenges at their own institutions. The intended audience is educators interested in engaging their students in deep computational thinking through immersive multidisciplinary collaborative experiences. Registered participants will be reimbursed the workshop registration fee through NSF Award# 1141170. We will additionally offer a stipend to participants who adopt our model, administer assessments and provide us with their results for analysis and inclusion in reports. More information will be available at http://tardis.tcnj.edu/cabect/. Laptop Recommended."
Can Computational Thinking contribute to EFL learning and teaching?,"Tang, Youjun and Ma, Xiaomei",2023,Sin Valor
Can Computational Thinking help me? A quantitative study of its effects on education,"Rodrigues, Rivanilson S. and Andrade, Wilkerson L. and Campos, Livia M. R. Sampaio",2016,Sin Valor
Can computational thinking predict academic performance?,"Haddad, Rami J. and Kalaani, Youakim",2015,Sin Valor
Can computational thinking reduce marginalization in the future Internet?,"Wentworth, Peter",2010,Sin Valor
Can Majoring in Computer Science Improve General Problem-solving Skills?,"Salehi, Shima and Wang, Karen D. and Toorawa, Ruqayya and Wieman, Carl",2020,"Teaching students to become skillful problem solvers is a goal of university education, but it has been difficult to measure such skill or demonstrate the benefits of particular educational experiences. This paper presents a study of college students solving a problem unrelated to their academic majors. The analysis suggests that the educational experiences of Computer Science (CS) students may better train them in problem-solving than the experiences of other majors. In this study, students from a variety of undergraduate majors and grade levels were given a 15-minute problem-solving task embedded in an interactive science simulation. The complex task calls upon many problem-solving practices needed by scientists and engineers in their professions. Although this task has little resemblance to the problems encountered in a computer science course, CS students performed significantly better than students in any other major. In addition, only for CS students was there an indication of improvement in problem-solving from lower to upper grade levels. We propose that general problem-solving and computational thinking share some common practices, such as problem decomposition and comprehensive data collection. Furthermore, we present preliminary evidence that training in computational thinking is transferable to problem-solving tasks across domains and discuss how the unique features of CS programming assignments could be generalized to other science and engineering courses to foster students' general problem-solving skills."
Capitalizing on a Small Dataset to Refine a Mixed Methods Study,"Polasik, Alison",2022,Sin Valor
"Cartoonimator: A Low-cost, Paper-based Animation Kit for Computational Thinking","Ranjan, Krithik and Gyory, Peter and Rivera, Michael L and Do, Ellen Yi-Luen",2023,"Computational thinking has been identified as an important skill for children to learn in the 21st century, and many innovative kits and tools have been developed to integrate it into children’s learning. Yet, most solutions require the use of devices like computers or other expensive hardware, thus being inaccessible to low-income schools and communities. We present Cartoonimator, a low-cost, paper-based computational kit for children to create animations and engage with computational thinking. Cartoonimator requires only paper and a smartphone to use, offering an affordable learning experience. Children can draw the scenes and characters for their animation on the paper, which is printed with computer vision markers. We developed the mobile web app to provide an interface to capture keyframes and compile them into animations. In this paper, we describe the implementation and workflow of Cartoonimator, its deployment with children at a local STEAM event, and a planned evaluation for the kit."
Case for Integrating Computational Thinking and Science in a Low-Resource Setting,"Gautam, Aakash and Bortz, Whitney Elaine Wall and Tatar, Deborah",2017,"There is a growing need to use computers to formulate problems and their solutions across domains. It has thus become imperative that students across the globe be able to work with computing to express themselves. However, teaching computer science in a traditional way may not be possible in all settings. We studied a method to integrate computational thinking, the ability to express problems and their solutions to a computing device, into an existing science classroom with the goal of deepening learning in both science and computational thinking in a low-resource setting in Nepal. In this note, we present findings from the study. The proposed curricular method acknowledges local differences and presents a way to adapt to those differences through adaptable multiple layers of activities and representational variability. We hope that interested educators and development practitioners would try our method in classrooms."
Centering the Identities of Girls of Color in Computational Thinking Programs,"Garcia, Patricia and Jackson, Ashley and Jacobs, Laura-Ann",2020,Sin Valor
CEO: A Triangulated Evaluation of a Modeling-Based CT-Infused CS Activity for Non-CS Middle Grade Students,"Lytle, Nicholas and Catet\'{e}, Veronica and Dong, Yihuan and Boulden, Danielle and Akram, Bita and Houchins, Jennifer and Barnes, Tiffany and Wiebe, Eric",2019,"With the increased demand for introducing computational thinking (CT) in K-12 classrooms, educational researchers are developing integrated lesson plans that can teach CT fundamentals in non-computing specific classrooms. Although these lessons reach more students through the core curriculum, proper evaluation methods are needed to ensure the quality of the design and integration. As part of a research practice partnership, we work to infuse research-backed curricula into science courses. We find a three-pronged approach of evaluation can help us make better decisions on how to improve experimental curricula for active classrooms. This CEO model uses three data sources (student code traces, exit ticket responses, and field observations) as a triangulated approach that can be used to identify programming behavior among novice developers, preferred task ordering for the assignment, and scaffolding recommendations to teachers. This approach allows us to evaluate the practical implementations of our initiative and create a focused approach for designing more effective lessons."
Challenges and Unexpected Affordances of Physical Computing Going Remote,"Chakarov, Alexandra Gendreau and Bush, Jeffrey and Biddy, Quentin L and Jacobs, Jennifer and Elliott, Colin Hennessy and Sumner, Tamara",2021,"Engaging in physical computing activities involving both hardware and software provides a hands-on introduction to computer science. The move to remote learning for primary and secondary schools during the 2020-2021 school year due to COVID-19 made implementing physical computing activities especially challenging. However, it is important that these activities are not simply eliminated from the curriculum. This paper explores how a unit centered around students investigating how programmable sensors that can support data-driven scientific inquiry was collaboratively adapted for remote instruction. A case study of one teacher’s experience implementing the unit with a group of middle school students (ages 11 to 14) in her STEM elective class examines how her students could still engage in computational thinking practices around data and programming. The discussion includes both the challenges and unexpected affordances of engaging in physical computing activities remotely that emerged from her implementation."
"Champion, Collaborator, Curator, Anchor: Supporting K-12 Teachers to Integrate Computational Thinking","Coenraad, Merijke and Rangel, Alessandra and Burke, Quinn and Mills, Kelly and Ruiz, Pati and Dunbar, Kyle",2024,"Computational thinking (CT) provides opportunities for students to build the skills they need for everyday life, future academic success, and careers. Increasingly, districts are integrating CT into K-12 disciplinary subjects and a growing number of teachers need the knowledge to lead CT learning opportunities. CT is still nascent in teacher education, however, and not all teachers are receiving professional learning on the job. Teachers need effective methods of support to ensure they are providing students with high quality CT learning opportunities. We present methods of support for integrating CT into schools. The poster highlights four methods to support teacher professional learning: allowing ample time for collaboration, a school-based advocate championing CT integration, posting and promoting curated resources, and a foundational person anchoring the work as the initiative expands. In doing so, this poster provides interrelated examples of teacher support and highlights methods of continuous support for teachers integrating CT across content areas."
Changing perceptions of computer science and computational thinking among high school teachers,"Morreale, Patricia and Joiner, David",2011,"Interest in specific college majors begins in high school. The influence of high school math and science teachers is important, both for high school preparation of future computer science undergraduates, and for the understanding and interest in prospective majors high school teachers can encourage in their students. With the simultaneous decline in high school computer science curriculum offerings and undergraduate majors in computer science, an effort has been made to update the perception of computer science and computational thinking among high school teachers by hosting local non-residential summer workshops for high school teachers and their students.Pre- and post- workshop surveys show that the summer workshops have changed the perceptions high school teachers had regarding careers in computer science, resulting in a 50% increase in the likelihood that a high school teacher would recommend computer science, computational science, or information technology to their students as a career. By changing teacher perceptions of computer science and computational thinking, high school teachers are more likely to include computer science as one of the college majors suggested to their students."
"Changing Teacher Perceptions about Computational Thinking in Grades 1-6, through a National Training Program","Simmonds, Jocelyn and Gutierrez, Francisco J. and Meza, Federico and Torrent, Catalina and Villalobos, Jaime",2021,"Chile is a medium-sized developing country, with approximately 3,500,000 school-aged children. Computational thinking (CT) has been recognized as a tool for developing XXI century skills, but Chile has a large population of in-service teachers that do not know what CT is, limiting its application in classrooms. In response, the government has enacted a training program for in-service primary school teachers, focusing on changing their perceptions about CT, and showing them how it can be used in classroom. This training program was designed for grades 1-6 and piloted in the capital region during 2018. The program initially focused on coding activities, but was then redesigned to show how CT can be used to help meet the learning objectives of different subjects in the curriculum. The program was then scaled up nationwide. In this experience report, we discuss the outcomes of this program. The training program scaled as intended and we identified positive changes in teacher perceptions about CT, especially among female participants. We conclude with the lessons we learned from this experience."
Character animation and embodiment in teaching computational thinking,"J\""{o}rg, Sophie and Leonard, Alison E. and Babu, Sabarish and Gundersen, Kara and Parmar, Dhaval and Boggs, Kevin and Daily, Shaundra Bryant",2014,Sin Valor
Characterizing Student Artifacts in a Multi-disciplinary Biomimicry and Robotics Unit,"Shaw, Fayette and Kshirsagar, Khushbu and Wendell, Kristen and Danahy, Ethan and Bernstein, Debra and Puttick, Gillian and Cassidy, Michael",2021,"As states are adopting NGSS, engineering is increasingly being integrated in K-12 science education. While middle schools have typically segregated learning by discipline, educators are recognizing the importance of making connections across STEM disciplines. This paper presents robot artifacts built by students in an interdisciplinary middle school curriculum that combines biology, engineering, and computational thinking. In this curriculum, students analyze animals and use them as inspiration to build biomimetic robots - robots inspired by animals. We characterized and classified these artifacts based on their robots' mechanical structure and biomimetic structure and motion."
ChatScratch: An AI-Augmented System Toward Autonomous Visual Programming Learning for Children Aged 6-12,"Chen, Liuqing and Xiao, Shuhong and Chen, Yunnong and Song, Yaxuan and Wu, Ruoyu and Sun, Lingyun",2024,"As Computational Thinking (CT) continues to permeate younger age groups in K-12 education, established CT platforms such as Scratch face challenges in catering to these younger learners, particularly those in the elementary school (ages 6-12). Through formative investigation with Scratch experts, we uncover three key obstacles to children’s autonomous Scratch learning: artist’s block in project planning, bounded creativity in asset creation, and inadequate coding guidance during implementation. To address these barriers, we introduce ChatScratch, an AI-augmented system to facilitate autonomous programming learning for young children. ChatScratch employs structured interactive storyboards and visual cues to overcome artist’s block, integrates digital drawing and advanced image generation technologies to elevate creativity, and leverages Scratch-specialized Large Language Models (LLMs) for professional coding guidance. Our study shows that, compared to Scratch, ChatScratch efficiently fosters autonomous programming learning, and contributes to the creation of high-quality, personally meaningful Scratch projects for children."
"Children as players, modders, and creators of simulation games: A design for making sense of complex real-world problems: Children as players, modders and creators of simulation games","Grizioti, Marianthi and Kynigos, Chronis",2021,"Could computational thinking be a strong tool for children to understand complex 21st-century issues? Our knowledge is limited since most designs focus on sequential programming and on the cognitive aspects of computational thinking. This paper discusses a design that integrates ill-structured socio-scientific issues with programming and other computational concepts, in a playful and meaningful context. The design, called ChoiCo (Choices with Consequences), builds on the idea of ""integrated affordances"" that enables layered computational access, allowing children to be players and designers of choice-driven simulation games. We elaborate on a design-based research that studied children's activity, who progressively played, modified and co-created games that simulated real-world issues. We describe four strategies developed by the children to make sense of the simulated problems through a systems thinking approach. We also discuss how they formulated these strategies by utilizing the affordances of map design, data manipulation and coding."
"Children's Assessment of Co-design Skills: Creativity, Empathy and Collaboration","Van Mechelen, Maarten and Schut, Alice and Gielen, Mathieu and S\""{o}dergren, Antonia Clasina",2019,"This paper presents a co-design project in a school with 16 children ages 10 to 11 in which three learning goals were defined upfront: creativity, empathy, and collaboration. The first part of the paper demonstrates how these co-design skills were implemented through an iterative process of explanation, practice, reflection, and application. Based on the results of post-interviews and short questionnaires, the second part discusses children's assessments of these skills. Whereas children reported fluctuations in applying these skills, the findings show an overall positive trend towards the end of the project. In future work, these findings will be triangulated with observational data."
China's perspective from the viewpoint of computational thinking on CS1 for non-majors (abstract only),"Zhang, Ming and Li, Bo and Lo, Ginnie",2014,"A key challenge for the Chinese educational system is the development of a CS1 course for non-major college students that can meet the unique environment in our country. In mainland China, CS1 is required of all freshmen at their first semester, approximately 7 million freshmen per year. We have named this CS1 course ""Fundamentals of University Computer Science"" to reflect our ambitions to bring our students to the cutting edge of information technology and society. Over the past few years, many Chinese universities have advanced and experimented with their ideas for introducing computational thinking into CS1, one of the most important core courses. In this BOF session, we want share our ideas and concrete solutions and to engage in dialogue with our international colleagues in order to enrich and improve our approach. This BOF Session is sponsored by the ACM China Subcommittee on Education."
CloudDB: Components for exploring shared data with MIT app inventor,"Lao, Natalie",2017,Sin Valor
Co-de: an online learning platform for computational thinking,"Van de Staey, Zimcke and Verlinde, Tobias and Demoen, Bart and Martens, Bern",2018,"Computational thinking (CT) has gained wide recognition as an important K-12 educational goal, initially in the context of computer science (CS), and more recently also beyond CS. The development of CT teaching materials and approaches is therefore of prime importance. Here, an online learning platform for CT, named Co-De, is presented. It addresses five major aspects of CT explicitly, in the context of a variety of computational problems. Students using Co-De, work through classes, individually or in teams, doing a mixture of unplugged and online exercises and quizzes, as well as some programming. Teachers can fine-tune the default Co-De learning paths to cater for their specific groups of students and/or specific learning goals. Co-De is implemented on top of the open-source learning platform Moodle. It can be used directly at a central server, or a customised version can be installed and used locally."
Co-Designing Machine Learning Apps in K–12 With Primary School Children,"Toivonen, Tapani and Jormanainen, Ilkka and Kahila, Juho and Tedre, Matti and Valtonen, Teemu and Vartiainen, Henriikka",2020,Sin Valor
COCONATS: Combining Computational Thinking Didactics and Software Engineering in K-12,"Colombi, Alessandro and Fronza, Ilenia and Pahl, Claus and Basso, Demis",2018,"We report the status of the pre-experimental phase of a project called ""Combining Computational Thinking Didactics and Software Engineering in K-12"" (COCONATS), which aims at combining computational thinking and software engineering didactics in order to facilitate the acquisition of software engineering principles in K-12, while promoting the development of life-skills."
CodaRoutine: A Serious Game for Introducing Sequential Programming Concepts to Children with Autism,"Elshahawy, Menna and Aboelnaga, Khaled and Sharaf, Nada",2020,Sin Valor
Code and tell: assessing young children's learning of computational thinking using peer video interviews with ScratchJr,"Portelance, Dylan J. and Bers, Marina Umaschi",2015,"In this paper, we present a novel technique for assessing the learning of computational thinking in the early childhood classroom. Students in three second grade classrooms learned foundational computational thinking concepts using ScratchJr and applied what they learned to creating animated collages, stories, and games. They then conducted artifact-based video interviews with each other in pairs using their iPad cameras. As discussed in the results, this technique can show a broad range of what young children learn about computational thinking in classroom interventions using ScratchJr than more traditional assessment techniques. It simultaneously provides a developmentally appropriate educational activity (i.e. peer interviews) for early childhood classrooms."
Code Bits: An Inexpensive Tangible Computational Thinking Toolkit For K-12 Curriculum,"Goyal, Sidhant and Vijay, Rohan S. and Monga, Charu and Kalita, Pratul",2016,"The extensive research in the domain of computational thinking has identified itself as one of the critical skills that needs to be a part of regular K-12 curriculum. However, most of the tangible computational thinking toolkits that are being developed are bulky and expensive to be deployed in classroom environments. In this paper we present Code Bits, a paper based tangible computational thinking toolkit that is inexpensive, portable and scalable. The students create programs using the tangible paper bits on any flat surface and use the Code Bits mobile application to process the code, which runs on any android device with a camera and uses augmented reality based games to improve the computational thinking skills of the students. The toolkit has been designed in way so as to promote collaboration amongst students."
Code puzzles - Robot Chronicle,"Nikaido, Breeana and Ventura, John",2016,Sin Valor
"Code, Connect, Create: The 3C Professional Development Model to Support Computational Thinking Infusion","Jocius, Robin and Joshi, Deepti and Dong, Yihuan and Robinson, Richard and Catet\'{e}, Veronica and Barnes, Tiffany and Albert, Jennifer and Andrews, Ashley and Lytle, Nicholas",2020,"Despite the increasing attention to infusing CT into middle and high school content area classrooms, there is a lack of information about the most effective practices and models to support teachers in their efforts to integrate disciplinary content and CT principles. To address this need, this paper proposes the Code, Connect and Create (3C) professional development (PD) model, which was designed to support middle and high school content area teachers in infusing computational thinking into their classrooms. To evaluate the model, we analyzed quantitative and qualitative data collected from Infusing Computing PD workshops designed for in-service science, math, English language arts, and social studies teachers located in two Southeastern states. Drawing on findings from our analysis of teacher-created learning segments, surveys, and interviews, we argue that the 3C professional development model supported shifts in teacher understandings of the role of computational thinking in content area classrooms, as well as their self-efficacy and beliefs regarding CT integration into disciplinary content. We conclude by offering implications for the use of this model to increase teacher and student access to computational thinking practices in middle and high school classrooms."
CodeAttach: Engaging Children in Computational Thinking Through Physical Play Activities,"Yu, Junnan and Zheng, Clement and Tamashiro, Mariana Aki and Gonzalez-millan, Christopher and Roque, Ricarose",2020,"Many toys and kits have been developed to help cultivate computational thinking in young children in the past decade. However, a majority of these kits ask children to move a robot/character around a limited space, constraining what could otherwise be generative and creative learning experiences into pre-defined activities and challenges with uniform outcomes. How can we expand what children can program and how they can create code? In this work, we present CodeAttach, a learning kit designed to engage young children in computational thinking through physical play activities. CodeAttach consists of three parts: (1) an interactive hardware device, (2) a mobile application to program the device, and (3) supporting materials for different play activities. With CodeAttach, children can attach the device to the supporting materials or other everyday objects to create their own props for physical play. The device offers different inputs and outputs and supports children to change the rules of existing physical activities or create new activities by programming this device. We outline the principles guiding the design of CodeAttach, its initial development process, and insights from early playtest with young kids and expert researchers."
CodeFruits: Teaching Computational Thinking Skills Through Hand Gestures,"Goyal, Sidhant and Chopra, Simran and Mohanan, Dileep",2017,"Researchers in the past have explored several interactive tools and techniques to teach students abstract concepts of programming and computational thinking. They have explored playful and collaborative way to do so which includes text-based, visual or tangible programming toolkits. In CodeFruits, we are exploring hand gestures as an input interaction mechanism. These hand gestures represent different elements of programming languages such as functions and parameters. We have developed a gesture based interactive game which implicitly helps K-12 students to learn abstract concepts of computational thinking and write a computational code in an easier, playful and engaging way."
CodeNC: Integrating Computational Thinking into K-12 Instructional Activities using Animated Videos,"Nguyen, N. Rich and Poliakova, Iuliia and Meduri, Sahithi and Hutcheson, Joshua and Ke, Ryan",2019,"Increasing the representation of minorities in computer science (CS) has become a national priority. One of the many reasons minority students nationwide choose not to study CS is that they often lack mentors and role models to encourage them early in their learning. In her seminal article, Jeannette Wing argues that computational thinking (CT) is an emerging essential skill that should become an integral part of K-12 education. However, a big issue facing this initiative is that many K-12 teachers find themselves lack (1) relevant materials, (2) systematic training, and (3) a supportive community. The democratization of media, such as photos and videos, has provided a great variety of options to educate a broad audience on myriad topics. In this poster, we will describe the challenges and successes of using animated videos including its beauty, soundness, and utility as critical elements in establishing a strong CT comprehension while engaging K-12 teachers in a non-threatening way. Using a process of iterative design, we have found ways to integrate CT concepts in six non-CS disciplines in the K-12 curriculum. The teachers who have collaborated with us respond positively that this design approach provides them with a greater comprehension of the CT concepts while giving them exciting instructional activities. Therefore, this poster may be of interest to any CS educator who wishes to improve the engagement of K-12 teachers while sustaining a CT training program at their institution."
CodePlus — Designing an after school computing programme for girls,"Sullivan, K. and Byrne, J. R. and Bresnihan, N. and O'Sullivan, K. and Tangney, B.",2015,Sin Valor
Coding as a Self-Expression Tool,"Ben-Ari, Avia and Levinson, Tess Gavrielle and Umaschi Bers, Marina and Rosenberg-Kima, Rinat B.",2023,"This lighting talk discusses the potential for using coding as a new means of self-expression. Coding has been identified as a key 21st-century skill, and as such, it is expected to be vastly acquired already in the early ages of formal education. Coding is a language that adheres to a system of symbols and rules, which, when combined, convey meaning. This postulation has led a few scholars to sustain that coding is a language functioning like any other language. Thus, coding might enable its coders to produce expressive artifacts, similarly to any other natural language, potentially offering a new form of creative writing in the 21st century. A celebrated use of creative writing is in the field of emotional therapy. Writing has been proven an efficient tool in both clinical and non-clinical populations. Nevertheless, despite its effectiveness, some populations are deprived of the great benefits creative writing may enable. Among these are children who do not know how to read and write, as well as adults who struggle with expressive writing. Therefore, we suggest a way for expanding the boundaries of coding to the field of self-expressive writing. We believe that apart from promoting its acquisition as an essential tool in the 21st century, knowing coding at an early age may also endorse general well-being, offering a new, somewhat more reachable, means of self-expression."
"Coding as another language: computational thinking, robotics and literacy in first and second grade","Bers, Marina Umaschi and Govind, Madhu and Relkin, Emily",2022,"This paper explores the integration of coding, CT and literacy by describing a study conducted with first and second grade classrooms in Norfolk, Virginia. A total of 667 students and 57 educators from eight elementary schools, as well as 181 students from two comparison schools participated in a curriculum called Coding as Another Language (CAL) that utilizes KIBO robotics, a developmentally appropriate kit which does not require keyboards or screens. CAL positions the teaching of programming as a symbolic system of representation, a tool for creative expression and communication. Thus, research questions regarding the relationship between students' coding and CT outcomes and their literacy skills were explored, as well as teachers' reactions to the experience, in particular regarding the integrating of teaching computer science and literacy in the early grades. Participation in the CAL-KIBO curriculum was associated with improvement in coding and unplugged CT skills. Baseline literacy skills were related to students' acquisition of CT skills. For example, students who had higher literacy scores at the beginning of the term were more successful in CT tasks. Furthermore, although teachers varied in their perceptions of integrating coding and CT with literacy, our findings suggest that these disciplines may share some cognitive and pedagogical overlap that has yet to be extensively explored in the early computing education field."
Coding or Hacking? Exploring Inaccurate Views on Computing and Computer Scientists among K-6 Learners in Chile,"Gutierrez, Francisco J. and Simmonds, Jocelyn and Casanova, Cecilia and Sotomayor, Cecilia and Hitschfeld, Nancy",2018,"Advancing computational thinking in elementary education has been rapidly gaining attention due to the prospective of developing 21st century skills. However, interventions in this domain risk failure if they do not explicitly address the particular socio-cultural traits of the deployment scenario. This is the case in most countries of Latin America, where computing has not reached a sustainable penetration in K-12 education. In order to bridge this gap, we designed a one-week workshop for advancing computational thinking targeted to 10-12 years old Chilean students with no prior experience in programming. This paper describes our intervention and presents the results of a qualitative study analyzing positive and negative aspects of the experience. Although most participants effectively acquired basic programming skills by the end of the intervention, we also identified several inaccurate views on computing and computer scientists. For instance, computing was mostly perceived as a set of informal experiences rather than a way for enabling creation, automation, and work. The word ""hacking"" appears to be used as a metaphor for more technical terms, such as ""programming"" or ""algorithm"". Finally, negative stereotypical views of computer scientists resulting from the intervention were not as frequent as initial perceptions. These results provide fresh evidence on how to design, adapt, and evaluate computational thinking interventions targeted to K-6 students in Latin America."
Coding Together: On Co-located and Remote Collaboration between Children with Mixed-Visual Abilities,"Rocha, Filipa and Correia, Filipa and Neto, Isabel and Pires, Ana Cristina and Guerreiro, Jo\~{a}o and Guerreiro, Tiago and Nicolau, Hugo",2023,"Collaborative coding environments foster learning, social skills, computational thinking training, and supportive relationships. In the context of inclusive education, these environments have the potential to promote inclusive learning activities for children with mixed-visual abilities. However, there is limited research focusing on remote collaborative environments, despite the opportunity to design new modes of access and control of content to promote more equitable learning experiences. We investigated the tradeoffs between remote and co-located collaboration through a tangible coding kit. We asked ten pairs of mixed-visual ability children to collaborate in an interdependent and asymmetric coding game. We contribute insights on six dimensions - effectiveness, computational thinking, accessibility, communication, cooperation, and engagement - and reflect on differences, challenges, and advantages between collaborative settings related to communication, workspace awareness, and computational thinking training. Lastly, we discuss design opportunities of tangibles, audio, roles, and tasks to create inclusive learning activities in remote and co-located settings."
Coding Training Proposal from Kindergarten to High School,"Benetti, Elisa and Mazzini, Gianluca",2021,Sin Valor
Coding with Minecraft: The Development of Middle School Students’ Computational Thinking,"Kutay, Emine and Oner, Diler",2022,"The purpose of this study is to examine the role of Minecraft-based coding activities on computational thinking (CT) of middle school students. In the study, CT was conceptualized so that it encapsulates not only the knowledge of computational concepts (e.g., loops and conditionals) but also the use of CT practices (e.g., testing and debugging). Data were collected using a combination of knowledge of computational concepts tests, the Minecraft-based coding artifacts, and one-on-one student interviews focusing on the processes of developing computational artifacts. The participants were 20 fifth-grade middle school students from a low-income public school with very limited (if none) formal computer programming experiences before the study. The Minecraft-based coding activities were designed and implemented as an instructional program to last 6 weeks. The results of the study showed a statistically significant increase in students’ knowledge of computational concepts. Based on the analysis of the students’ final coding artifacts, we identified that students mostly used the concepts of sequences, events, loops, and parallelism correctly, whereas variables, operators, and conditionals appeared to be the least successfully used concepts. The qualitative analysis of the artifact-based interviews showed that students employed the CT practices of testing and debugging most of the time while developing an artifact through coding. In contrast, the least resorted CT practice appeared to be reusing and remixing."
CodyColor: Design of a Massively Multiplayer Online Game to Develop Computational Thinking Skills,"Klopfenstein, Lorenz Cuno and Delpriori, Saverio and Maldini, Riccardo and Bogliolo, Alessandro",2019,"Computational thinking and coding-based problem solving are increasingly seen as crucial cross-disciplinary skills and an important part of a well-rounded education. Coding games and problem solving exercises have been growing in popularity. Many large-scale initiatives have been launched in order to bring these initiatives into classrooms, from preschool to secondary education. CodyColor is a simplified coding game, which takes basic programming instructions representing movements (""turn left"" and ""turn right"") and represents them with color blocks. In contrast to most other coding games, color-coded programming relies on no symbolic interpretation on part of the player in order to be approachable by very young players as well. We present a massively multiplayer online version of CodyColor, discuss design and implementation specifics, and enumerate some of the possible game modes."
COEDU-IN Project: an inclusive co-educational project for teaching computational thinking and digital skills at early ages,"González-González, Carina S. and Caballero-Gil, Pino and García-Holgado, Alicia and García-Peñalvo, Francisco J. and Molina, Jezabel and del Castillo-Olivares, José M. and San Juan, Bernardo Candela and Cuesta, Sara García and Perdomo, Inmaculada and Caballero-Gil, Cándido and Gutíerrez-Vela, Francisco and Paderewski, Patricia and Holz, Verónica Violant and Iranzo, Rosa Gil and Ramos, Sofía",2021,Sin Valor
Cognitive Correlates of Computational Thinking: Evaluation of a Blended Unplugged/Plugged-In Course,"Tsarava, Katerina and Leifheit, Luzia and Ninaus, Manuel and Rom\'{a}n-Gonz\'{a}lez, Marcos and Butz, Martin V. and Golle, Jessika and Trautwein, Ulrich and Moeller, Korbinian",2019,"Coding as a practical skill and computational thinking (CT) as a cognitive ability have become an important topic in education and research. It has been suggested that CT, as an early predictor of academic success, should be introduced and fostered early in education. However, there is no consensus on the underlying cognitive correlates of CT in young elementary school children. Therefore, the present work aimed at (i) assessing CT and investigating its associations to established cognitive abilities, and (ii) evaluating a newly developed CT course for elementary school children.As such, 31 7-10-year-old children took part in 10 lessons of a structured CT course. The course aimed at introducing and fostering CT concepts in both unplugged and plugged-in ways, incorporating life-size board games, Scratch, Scratch for Arduino, and Open Roberta programming environments. In a pre-/post-test design, we assessed several cognitive abilities using standardized tests on nonverbal-visuospatial and verbal reasoning abilities, numeracy, as well as short-term memory, and measured CT using an adapted version of the only existing validated test CTt, to accommodate it to the younger sample.We identified significant associations between CT and nonverbal-visuospatial reasoning, as well as different aspects of numeracy (e.g., fact retrieval and problem completion). In line with recent theoretical accounts and empirical investigations for other age groups, these findings specify the underlying cognitive mechanism of CT in elementary school. Moreover, our results indicated that students were able to specifically improve their CT abilities through the course, as assessed by the adapted version of the CTt."
Collaboration and Computational Thinking: A classroom structure,"Worrell, Benjamin and Brand, Catharine and Repenning, Alexander",2015,Sin Valor
Collaborative Approaches for Effective and Sustainable Integration of Computational Thinking Educational Strategies,"Paludo, Giulia and Montresor, Alberto",2024,Sin Valor
Collaborative Game-Based Environment and Assessment Tool for Learning Computational Thinking in Primary School: A Case Study,"Zapata-C&#x00E1;ceres, Mar&#x00ED;a and Mart&#x00ED;n-Barroso, Estefan&#x00ED;a and Rom&#x00E1;n-Gonz&#x00E1;lez, Marcos",2021,Sin Valor
Collaborative teaching of globally distributed software development: community building workshop (CTGDSD 2011),"Faulk, Stuart and Young, Michal and Weiss, David and Yu, Lian",2011,Sin Valor
Combining Abstract Tasks and Haptic Material to Foster Computational Thinking in Computer Science Students,"B\""{o}ttcher, Axel and Thurner, Veronika",2023,"Students of Computer Science often struggle with the abstract nature of the content of their studies, especially in the student entry phase. This is partly due to the fact that on the one hand, many first year students possess only moderate abstract thinking skills, while on the other hand, Computer Science lecturers often take the existence of abstract thinking skills for granted, as they themselves are well versed in this area. To bridge this gap and foster the students’ abstract thinking skills, we employ haptic material to make abstract tasks and the corresponding solution processes more tangible. This supports the development of abstract thinking skills, and at the same time helps to actively engage students in our classes on software development. In this paper we describe our experiences with active classroom learning units based on haptic materials, as part of our inverted classroom teaching."
Combining Block-Based Programming and Hardware Prototyping to Foster Computational Thinking,"Fronza, Ilenia and Corral, Luis and Pahl, Claus",2019,"The promotion of Computational Thinking principles at different levels of education enables the development of practical competencies for software development. Several off-the-shelf technologies exist to promote computational abilities with the support of block-based programming and working hardware. However, in some contexts, a significant limitation is the complexity and costs that carry the acquisition and implementation of working hardware such as Educational Robots. In this paper, we discuss a strategy to reinforce the learning of Computational Thinking (CT) skills by providing an analogous method to Educational Robots. We offer an affordable solution to assist high school students to build a CT-based software/hardware integrated solution. We executed this strategy in a coding bootcamp where students were required to design and implement an algorithm, and illustrate its execution in software and hardware. The proposed exercise delivered the expected results engaging students to ideate the solution of a problem, implement an algorithm, and create a physical demonstration of it."
"Combining cognitive, semiotic and discourse analysis to explore the power of notations in visual programming","Ferreira, Juliana J. and de Souza, Clarisse S. and de Castro Salgado, Luciana C. and Slaviero, Cleyton and Leitão, Carla F. and Moreira, Fábio de F.",2012,Sin Valor
Combining Computational Thinking and Chibitronics and Makey Makey to Develop a Social Story Teaching Aid System to Improve Social Reciprocity and Emotional Expression Skills for Autistic Children,"Li, Xin-Zhu and Kang, Xin",2021,"This study is aimed to teach autistic children to learn social reciprocity and emotional expression through social stories, and build a social story teaching aid system with the aid of sequential computational thinking as learning strategy as well as Chibitronics and Makey Makey. This system can make autistic children to learn situational content from social stories, understand the social stories through computational thinking and arrange corresponding sequential structure. In this study, we recruited three 9 year-old autistic children, carried out teaching experiments four times and observed their behavior for story plot. It showed that technical teaching aid can improve autistic children's learning motivation and interests and provide them with contextual cue of social situation, helping build their social recognition and social reciprocity into social situation and their social reciprocity skills. I believe that autistic children can improve their social reciprocity and emotional expression skills with the help of sequential computational thinking and social teaching aid system designed with Chibitronics and Makey Makey."
Combining Data-Driven Models and Expert Knowledge for Personalized Support to Foster Computational Thinking Skills,"Lall\'{e}, S\'{e}bastien and Yal\c{c}\i{}n, \""{O}zge Nilay and Conati, Cristina",2021,"Game-Design (GD) environments show promise in fostering Computational Thinking (CT) skills at a young age. However, such environments can be challenging to some students due to their highly open-ended nature. We propose to alleviate this difficulty by learning interpretable student models from data that can drive personalization of a real-world GD learning environment to the student’s needs. We apply our approach on a dataset collected in ecological settings and evaluate the ability of the generated student models at predicting ineffective learning behaviors over the course of the interaction. We then discuss how these behaviors can be used to define personalized support in GD learning activities, by conducting extensive interviews with experienced instructors."
Combining Montessori Pedagogy and Computing Education: First Insights from a Systematic Literature Review,"Greifenstein, Luisa and Hanusch, Adrian",2024,"Montessori pedagogy has a comparatively long tradition of more than 100 years while CS education still is an innovative and future-oriented discipline. Montessori pedagogy is in particular known for its material and accompanying methods, criteria and learning theory. A combination with CS education could therefore advance it towards creating material that allows for self-empowerment of learners in a constructionist way that is also prevalent in current CS education and its research. We therefore conducted a systematic literature review and identified 34&nbsp;papers. First results show that there is a focus on programming and while all educational levels are included, there is a slight tendency towards primary school education. When looking at the specific mentions of the Montessori pedagogy, it is mostly used as a source of inspiration for, for example, creating CS teaching material. Within the results, first conclusions are drawn and finally, future work is suggested."
Combining STEM Education and Equity for Greater Impact in Late K-6 Classrooms,"Schifferle, Tobias M. and Kollegger, Nina",2024,"We present CYBATHLON @school, which aims to foster interest in STEM subjects among primary school students and promote empathy for people with disabilities. The initiative, in collaboration with various educational institutions, has developed three scalable modules that allow students to engage in interactive experiences, such as an interactive video, experimenting with prosthetic devices, and programming a mini wheelchair under the guidance of ETH students and ambassadors with a disability. The effectiveness is being assessed through an RCT, with preliminary results showing high levels of student, teacher and parent satisfaction."
Comparing computational thinking development assessment scores with software complexity metrics,"Moreno-León, Jesús and Robles, Gregorio and Román-González, Marcos",2016,Sin Valor
Comparing computational thinking skills of engineering students in urban and rural areas of Peru,"Nunez, Nicolas A. and Cornejo-Meza, Giuliana and Sánchez, Sandro A.",2020,Sin Valor
Comparing K-8 Computing Education Implementations Between South Africa and Sweden,"Lee, Michael J. and Lang, Annie and Ferwerda, Bruce",2025,"Recently, the governments of South Africa and Sweden have mandated that the youth in their respective countries receive compulsory computing education. In this study, we explored how in-service teachers in these countries learned about and taught coding to their students. Moreover, we asked students from these respective countries to report on their prior coding experience, and had them take two coding-related tests. Speaking with six teachers (3 from each country) and surveying 96 students (47 from South Africa and 49 from Sweden), we discovered several interesting results. Teachers from both countries used similar online resources to learn coding themselves. However, teachers from South Africa preferred to provide their students with direct, concrete experiences with coding using existing physical and online resources. Their counterparts in Sweden preferred to teach their students abstract concepts, integrated into other topic areas. However, regardless of the type of instruction, students from both countries did equally well on validated tests measuring their understanding of coding concepts. These results highlight each countries' teachers' dedication and effectiveness in adapting materials for their students, and the students' receptiveness and measurable learning outcomes attributed to these methods."
Comparing Outcomes Across Different Contexts in CS1,"Maxwell, Bruce A. and Taylor, Stephanie R.",2017,"Context-based CS1 courses focusing on Media Computation, Robotics, Games, or Art have been shown to improve outcomes such as retention and gender balance, both important factors in CS education. Colby College has offered a Visual Media focused CS1 course since 2008, and in response to faculty and student feedback, we expanded our curriculum to include a second context-based CS1 course focused on Science applications. Our goal was to have completely different projects but teach the same fundamental concepts. In order to measure whether students in each version were learning the same concepts, and to reduce confounding factors, the same professors co-taught both versions of CS1 and students completed the same homework, quizzes, and final exam. Our analysis of the quiz, final exam, and final overall performance showed no statistically significant difference by context or by gender. There was also no difference by context or gender in whether students took additional CS courses in the following two semesters. Furthermore, as a percentage of the students eligible to take the next offering of CS2, Data Structures and Algorithms, 48% of the students in these two offerings of CS1 registered for CS2, with no significant difference between contexts. Our conclusion is that we were successful in achieving similar outcomes, and the benefits of context-based CS1 courses, in both the Visual Media and Science versions of the course."
Comparing Pre-tertiary Curricula to Investigate the Timing of Computing Exposure,"Varoy, Elliot and Lee, Kerry and Luxton-Reilly, Andrew and Giacaman, Nasser",2021,"A comprehensive understanding of computing has become a necessary skill for students in an increasingly digital world. Consequently, many countries around the world have updated their national pre-tertiary curriculum to include the topic of computing. However, the structure and presentation of these curricula varies greatly. This makes it difficult to compare the timing that students are exposed to computing and as a result, increases the difficulty for producing effective and well-timed educational resources that are relevant for varying implementations. This research investigates the structure of international computing curricula, identifying and comparing the timing that students are exposed to computing. This will better inform researchers and resource developers about where and when their interventions are most applicable. This will also provide valuable insights for the creation of future computing curricula, by informing curriculum designers about the perspectives of various curricula and the most common approaches they have taken."
Comparing the effects of robots and IoT objects on STEM learning outcomes and computational thinking skills between programming-experienced learners and programming-novice learners,"Hu, Chih-Chien and Tseng, Hsiao-Ting and Chen, Ming-Hsien and Goh Phaik Imm, Alexis and Chen, Nian-Shing",2020,Sin Valor
Comparison between the use of pseudocode and visual programming in programming teaching: An evaluation from scratch tool,"Rezende, Críscilla M. C. and Bispo, Esdras L.",2018,Sin Valor
Comparison of the learning curve and adaptive behavior from kids to adults using computational thinking with Block-Programming to Technology Enhanced Learning,"Moreno-Vera, Felipe and León-Vera, Leonardo and Moreno-Motta, Juan and Guizado-Vasquez, Juan and Vera-Panez, Michael",2019,Sin Valor
Competency based IT experienes,"Li, Chengcheng and Said, Hazem and Michael, Rebekah and Johnson, Marcus and Meyer, Helen",2016,Sin Valor
"Complex Problem Solving as a Construct of Inquiry, Computational Thinking and Mathematical Problem Solving","Pedaste, Margus and Palts, Tauno and Kori, Külli and Sõrmus, Maarja and Leijen, Äli",2019,Sin Valor
"Comprehending Code: Understanding the Relationship between Reading and Math Proficiency, and 4th-Grade CS Learning Outcomes","Salac, Jean and Thomas, Cathy and Twarek, Bryan and Marsland, William and Franklin, Diana",2020,"As many school districts nationwide continue to incorporate Computer Science (CS) and Computational Thinking (CT) instruction at the K-8 level, it is crucial that we understand the factors and skills, such as reading and math proficiency, that contribute to the success of younger learners in a computing curriculum and are typically developed at this age. Yet, little is known about the relationship between reading and math proficiency, and the learning of key CS concepts at the elementary level. This study focused on 4th-grade students (ages 9-10) who were taught events, sequence, and repetition through an adaptation of the Creative Computing Curriculum. While all students benefited from access to such a curriculum, there were statistically-significant differences in learning outcomes, especially between students whose reading and math proficiency are below grade-level, and students whose proficiency are at or above grade-level. This performance gap suggests the need for curricular improvement and learning strategies that are CS specific for students who struggle with reading and math."
Computation and Computational Thinking,"Aho, Alfred V.",2012,Sin Valor
Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only),"Soh, Leen-Kiat and Ingraham, Elizabeth and Shell, Duane F.",2018,"In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include ""how-to"" presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!"
Computational Creativity Exercises: An Avenue for Promoting Learning in Computer Science,"Peteranetz, Markeya S. and Flanigan, Abraham E. and Shell, Duane F. and Soh, Leen-Kiat",2017,Sin Valor
Computational Empowerment in K-12 Education: Formative Assessment Strategies for Educational and Design Practices through Dialogic Learning Approaches,"Liu, Yu-Yu",2024,"In response to the evolving digitized society, it is crucial to equip children with essential skills for critically and reflectively navigating this environment. Child-Computer Interaction (CCI) researchers have established rich research to advance educational practices and technology development for computational thinking education and introduced a new concept of computational empowerment. However, the absence of effective formative assessment in the research and practices within computational education hinders the facilitation of continuous learning and the enhancement of computational empowerment. Considering this, this doctoral study will explore the core research question of how to develop formative assessment strategies for computational empowerment through the lens of dialogic learning. The research aims to conceptualize a research-based formative assessment model for educators, formative assessment design principles for computational education toolkits and provide instances through illustrative case studies. The study includes literature reviews, learning intervention case studies and participatory design workshops, stimulating discussions and innovative formative assessment strategies for computational empowerment within the CCI community and among practitioners. This doctoral study addresses the need for effective formative assessment in computational education to understand learning, foster learning and enhance computational empowerment in wider implementation. The practical research outcomes will benefit toolkit designers and educators, while the theoretical contributions aim to fill gaps of formative assessment in CCI research and pedagogies, advancing the broader landscape of computational education."
"Computational literacy, language, and culture","Jacob, Sharin and Baek, Clare and Warschauer, Mark",2023,Sin Valor
Computational Sophistication of Games Programmed by Children: A Model for Its Measurement,"Werner, Linda and Denner, Jill and Campe, Shannon and Torres, David M.",2020,"This article builds on prior work that aims to measure computational learning (CL) during middle school. Since game computational sophistication (GCS) has been used as a proxy for a student’s engagement in CL we build on their model to more completely describe the relationship between different types of building blocks of computer games and GCS. In doing so, we present a single quantitative measurement for GCS. Our model, called GCS 2.0, has face validity for 39 games, each programmed by a pair of middle school children. We choose four of these games, two with high GCS and two with low GCS, and discuss the computational building blocks found in each game. We do this to help the reader better understand our measurement of GCS and its relationship to CL."
Computational thinking,"Wing, Jeannette",2009,"My vision for the 21st Century: Computational thinking will be a fundamental skill used by everyone in the world. Just as reading, writing, and arithmetic are fundamental skills every child learns, computational thinking is a skill needed for every citizen to function in today's global society. Computational thinking is an approach to solving problems, building systems, and understanding human behavior that draws on the power and limits of computing. Computational thinking is the use of abstraction to tackle complexity and the use of automation to tackle scale. The combination of the automation of abstraction underlies the enormous capability and reach of computing. In this talk I will argue that computational thinking has already begun to influence many disciplines, from the sciences to the humanities, but that the best is yet to come. Looking to the future, we can anticipate even more profound impact of computational thinking on science, technology, and society: on the ways new discoveries will be made, innovation will occur, and cultures will evolve.Teaching computational thinking also raises new challenges for education, especially in early grades. While we have models for teaching children mathematics and physics, we do not yet have such models for teaching computational thinking. Moreover, we have the unique opportunity to make most effective use of the computer as a tool to enhance the learning of computational thinking.In this talk, I will give examples of computational thinking, including ones from our daily lives. It is exciting to imagine the day when computational thinking will be commonplace."
Computational thinking,"Henderson, Peter B. and Cortina, Thomas J. and Wing, Jeannette M.",2007,Sin Valor
Computational thinking,"Wing, Jeannette M.",2006,"It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use."
COMPUTATIONAL THINKING,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Computational Thinking & Practical Thinking Inspired Java Web Curriculum Reform Method,"Yu, Fengping and Wang, Hong",2019,Sin Valor
Computational Thinking (CT) and Rebel game Design: CT in health games,"Lim, HC",2017,Sin Valor
Computational thinking (CT): on weaving it in,"Curzon, Paul and Peckham, Joan and Taylor, Harriet and Settle, Amber and Roberts, Eric",2009,Sin Valor
Computational Thinking 2.0,"Tedre, Matti",2022,"Machine learning (ML) has triggered major changes across a great number of computing fields. People’s lives today are full of ML-driven services: eerily accurate recommendations, ability to automatically tag one’s friends in photos, and well working translation systems, for example. This keynote talk presents how ML technology upends the computational thinking (CT) consensus in computing education. It begins by presenting why and how a number of classical “CT1.0” concepts need to be re-thought for the “CT2.0” (machine learning) era, from control structures and problem-solving workflow, to correctness and notional machines. Based on a series of classroom interventions on teaching machine learning to middle schoolers, conducted by DIGS RC at University of Eastern Finland, the talk also presents how classroom pedagogy shifts between CT1.0 and CT2.0."
Computational Thinking Activities in High Schools to Enhance Interest and Skills in Programming,"Ahmad, Izzah Sakinah and Ying Sim, Tze and Talib, Corrienna Abdul and Lun Lau, Sian",2023,Sin Valor
Computational Thinking and Academic Achievement: The Mediator Roles of Problem-solving Ability and Learning Anxiety,"Zhu, Zhifang and Zhang, Yi and Zhu, Wanze and Ma, Jingsi",2023,Sin Valor
Computational Thinking and Attitudes Towards Computing: An Emerging Relationship in Elementary Students,"Ojeda-Ramirez, Santiago and Parker, Miranda C. and Garcia, Leiny and Tate, Tamara and Villa, Jillian Rae and Warschauer, Mark",2023,"This study analyzed the relationship between computational thinking (CT) and coding attitudes of upper elementary students after exposure to a year-long CT curriculum. Using ordinary least squares regression and controlling for student demographics (i.e., gender and English Learner (EL) status), we found that CT skills were a significant factor in modeling coding attitudes, regardless of demographic controls. Interviews of the students unveiled an interaction between coding interest and social values in a debugging process."
Computational Thinking and Block-Based Programming for Beginning Engineering Students: Systematic Review of the Literature,"Curasma, Ronald Paucar and Villalba-Condori, Klinge Orlando and Jara, Nolan Jara and Llamoca, Rosa Quispe and Chávez, Julio Cesar Cabrera and Ponce-Aranibar, María Del Pilar",2021,Sin Valor
Computational Thinking and Coding Subject in Primary Schools: Methodological Approach Based on Alternative Cooperative and Individual Learning Cycles,"Vlahu-Gjorgievska, Elena and Videnovik, Maja and Trajkovik, Vladimir",2018,Sin Valor
Computational thinking and computer fundamental education,Lina Wang,2011,Sin Valor
Computational Thinking and Expository Writing in the Middle School,"Wolz, Ursula and Stone, Meredith and Pearson, Kim and Pulimood, Sarah Monisha and Switzer, Mary",2011,"To broaden participation in computing we need to look beyond traditional domains of inquiry and expertise. We present results from a demonstration project in which interactive journalism was used to infuse computational thinking into the standard curriculum and regular classroom experience at a middle school with a diverse population. Outcomes indicate that we were able to develop positive attitudes about computational thinking and programming among students and teachers who did not necessarily view themselves as “math types.” By partnering with language arts, technology and math teachers at Fisher Middle School, Ewing New Jersey, we introduced the isomorphism between the journalistic process and computational thinking to 7th and 8th graders. An intense summer institute, first with the teachers and then with students recruited from the school, immersed them in the “newsroom of the future” where they researched and wrote news stories, shot and edited video, and developed procedural animations in Scratch to support their storylines. An afterschool club sustained the experience. The teachers adapted interactive journalism and Scratch programming to enrich standard language arts curriculum and are infusing computational thinking in classroom experiences throughout the school."
Computational thinking and impacts on K-12 science education,"Toedte, Ross J. and Aydeniz, Mehmet",2015,Sin Valor
Computational thinking and interdisciplinary encounters: keynote address,"Dourish, Paul",2010,"In an influential 2006 article, Jeanette Wing called for the elaboration of an approach to ""computational thinking."" Wing argued that computational thinking expresses the importance of computer science to general education, and provides a basis for interdisciplinary collaboration, by setting out the conceptual foundations of computational modeling and reasoning.In this talk, I want to reflect on alternative ways of approaching computational thinking as a site of disciplinary encounter, with a particular focus on the ways that interdisciplinary work might be generative of new forms of computational thinking. This work grows out of a collaboration with colleagues in Australia, whose research is focused on the use of information technology in the cultural practices of indigenous Australian groups, particularly the Yolngu of Northeast Arnhemland. Yolngu epistemology provides an interesting starting point for reconsidering aspects of computational practice, which suggests new perspectives on computational thinking and its practice, and on the possible relationship between computer science and other disciplines."
Computational Thinking and Notional Machines: The Missing Link,"Munasinghe, Bhagya and Bell, Tim and Robins, Anthony",2023,"In learning to program and understanding how a programming language controls a computer, learners develop both insights and misconceptions whilst their mental models are gradually refined. It is important that the learner is able to distinguish the different elements and roles of a computer (compiler, interpreter, memory, etc.), which novice programmers may find difficult to comprehend. Forming accurate mental models is one of the potential sources of difficulty inextricably linked to mastering computing concepts and processes, and for learning computer programming.It is common to use some form of representation (e.g., an abstract machine or a Computational Agent (CA)) to support technical or pedagogic explanations. The Notional Machine (NM) is a pedagogical device that entails one or more computational concepts, originally described as an idealised computer operating with the constructs of a particular programming language. It can be used to support specific or general learning goals and will typically have some concrete representation that can be referred to. Computational Thinking (CT), which is defined as a way of thinking that is used for [computational] problem solving, is often presented as using a CA to carry out information processing presented by a solution.In CT, where the typical goal is to produce an algorithm or a computer program, the CA seemingly serves a purpose very similar to an NM. Although it changes through the different stages of development (of the learner and of the curriculum), the roles of CAs and NMs can be seen as versatile tools that connect a learner’s mental model with the conceptual model of a program. In this article, we look at this relationship between CAs and NMs, and indicate how they would look at different stages of learning. We traverse the range of definitions and usages of these concepts, and articulate models that clarify how these are viewed in the literature. This includes exploring the nature of machines and agents, and how historical views of these relate to modern pedagogy for computation. We argue that the CA can be seen as an abstract, simplified variant of an NM that provides a useful perspective to the learner to support them to form robust mental models of NMs more efficiently and effectively. We propose that teaching programming should make use of the idea of a CA at different stages of learning, as a link that connects a learner’s mental model to a full NM."
Computational thinking and practice: a generic approach to computing in Danish high schools,"Caspersen, Michael E. and Nowack, Palle",2013,"Internationally, there is a growing awareness on the necessity of providing relevant computing education in schools, particularly high schools. We present a new and generic approach to Computing in Danish High Schools based on a conceptual framework derived from ideas related to computational thinking. We present two main theses on which the subject is based, and we present the included knowledge areas and didactical design principles. Finally we summarize the status and future plans for the subject and related development projects."
Computational thinking and programming education principles,"Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e}",2018,"After the computational thinking sessions in the previous 2016 and 2017 editions of TEEM Conference, the third edition of this track has been organized in the current 2018 edition. Computational thinking is still a very significant topic, especially, but not only, in pre-university education. However, an important debate exists about how computer science concepts should be introduced in pre-university studies. Most of the proposals join computational thinking issues and programming, but there are many options and opinions. In this track, some interesting contributions are presented."
Computational thinking and Relational Algorithmic Approach,"Altaher, Marah and Ferchichi, Ahmed",2017,Sin Valor
Computational thinking and robotics in education,"Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e} and Conde, Miguel \'{A}. and Gon\c{c}alves, Jos\'{e} and Lima, Jos\'{e}",2019,"After the computational thinking sessions in the previous 2016-2018 editions of TEEM Conference, the fourth edition of this track has been organized in the current 2019 edition. Computational thinking is still a very significant topic, especially, but not only, in pre-university education. In this edition, the robotic has a special role in the track, with a strength relationship with the STEM and STEAM education of children at the pre-university levels, seeding the future of our society."
Computational Thinking and User Interfaces: A Systematic Review,"Rijo-García, Sara and Segredo, Eduardo and León, Coromoto",2022,Sin Valor
Computational Thinking App Design Mat: Supporting the Development of Students' Computational Thinking Skills (Abstract Only),"Jimenez, Yerika and Hays, Theodore and Gardner-McCune, Christina",2017,"Tools like MIT App Inventor and Scratch are designed to help students develop programming and computational thinking skills by allowing them to use their interest and personal experiences to create meaningful artifacts. However, students often need additional help in translating their ideas into functional programs because they lack understanding of how to map the visual aspects of their projects to programming constructs and understanding of how to develop appropriate algorithms that bring their ideas to life. To address this issue, we created a Computational Thinking App Design Mat (App Design Mat) to scaffolds students' CT skill development in the context of creating a mobile application with MIT APP Inventor 2. The App Design Mat fosters student engagement in computational thinking through four areas of the mat: Problem Decomposition, Pattern Abstraction, Pattern Recognition, and Algorithm Design. In this poster will describe the design and results from the use of the App Design Mat with 80 eighth grade students. Our results suggest that most students understood the purpose of using the App Design Mat, used the App Design Mat effectively, and used some aspects of the App Design Mat in developing their final mobile app project."
Computational Thinking as a Computer Science Education Framework and the Related Effects on Gender Equity,"Good, Jon",2016,"I have recently completed my third year of study in the Educational Psychology and Educational Technology doctoral program at Michigan State University. I have successfully completed all of my coursework and comprehensive/qualifying exams. I will be proposing my dissertation study in the Fall semester of 2016 and expect to defend my dissertation in the Fall semester of 2017. My prior research has been focused on issues related to computational thinking, creativity, and computer science education. I am currently developing my literature review and honing my core research questions. I hope to subsequently develop my research methods and measures more fully, with plans to begin fieldwork in Fall of 2016."
Computational Thinking as a Liberal Study,"Mason, Dave and Khan, Irfan and Farafontov, Vadim",2016,"Computers and computational thinking are becoming ubiquitous in our world. They are part of the transportation systems we use, the security systems we confront, our entertainment systems, our communication systems, our financial systems, and even our social and political instruments. Computational thinking is a fundamental part of decision-making on a large and increasing number of fronts. It is sometimes hard for a computer scientist to imagine how people without access to those tools can navigate the world in an informed way.We have designed a course to bring the social, historical, cultural and technical context of these systems to the attention of students and citizens who would not otherwise have access to them, so they can better understand the world in which they will live and work. The course is a Computer Science course because it is talking about the science of computers, albeit in an approachable form for an audience without any assumed previous programming experience.The course ran in Winter 2014 and Winter 2015 meeting most of its goals, including engaging the non-traditional student who took it."
Computational thinking as an emergent learning trajectory of mathematics,"Niemel\""{a}, Pia and Partanen, Tiina and Harsu, Maarit and Lepp\""{a}nen, Leo and Ihantola, Petri",2017,"In the 21st century, the skills of computational thinking complement those of traditional math teaching. In order to gain the knowledge required to teach these skills, a cohort of math teachers participated in an in-service training scheme conducted as a massive open online course (MOOC). This paper analyses the success of this training scheme and uses the results of the study to focus on the skills of computational thinking, and to explore how math teachers expect to integrate computing into the K-12 math syllabus. The coursework and feedback from the MOOC course indicate that they readily associate computational thinking with problem solving in math. In addition, some of the teachers are inspired by the new opportunities to be creative in their teaching. However, the set of programming concepts they refer to in their essays is insubstantial and unfocused, so these concepts are consolidated here to form a hypothetical learning trajectory for computational thinking."
Computational Thinking as Play: Experiences of Children who are Blind or Low Vision in India,"India, Gesu and Ramakrishna, Geetha and Bisht, Jyoti and Swaminathan, Manohar",2019,"Torino is a tangible programming environment designed for teaching the computational thinking curriculum in the UK to children who are blind or low vision (henceforth, just children) in an inclusive setting. In this paper we describe the experience of children in Bangalore, India, when Torino was introduced to them as a toy for creating and sharing stories, songs and music. We conducted 12 play sessions with 12 children (4 girls and 8 boys) with diverse backgrounds belonging to three different schools for the blind. We briefly present the reasons for play being central to our effort of bringing computational thinking to children who are blind and low vision in India, and share some experiences of the children and some insights that we have gathered so far: Children not only enjoyed every session, they rapidly moved from playing with pre-created examples, to making changes, to demanding that their favorite stories be told. In observing such play, we could infer that they have grasped the basic concepts of computational thinking? flow of control, variables, loops? though not articulated in that vocabulary."
Computational Thinking Assessment Tools: A Systematic Review of the Literature (Initial Findings).,"Sheridan, Frances and Stynes, Paul and Pathak, Pramod and Quille, Keith",2024,"Since Jeanette Wing’s influential 2006 article, research into developing Computational Thinking (CT) skills has surged. Despite ongoing debates about CT definitions and components, reliable and valid assessment tools are crucial for measuring CT skill impact and evaluating related interventions. This systematic literature review seeks to identify CT assessment tools suitable for undergraduate computing students, by investigating the central question ""What tools are available for the assessment of CT skills?"". A comprehensive search of academic databases for CT assessment publications since 2006 yielded 202 unique articles. After applying exclusion criteria, 72 relevant articles were analyzed. The selected publications were categorized by tool type, and focus, examining tool reliability and validity. This paper presents initial findings from this review."
Computational Thinking At Primary School: Didactical and Psychological Aspects,"Moschella, Marialaura",2019,"The research project aims to identify the cognitive processes underlying the Computational Thinking (CT) skills of primary school pupils. Moreover, it investigates which didactical strategies are most effective for implementing CT in the curriculum. A mixed methods research was designed: qualitative data gathered from interviews and observations are combined with quantitative data collected through pre- and post-test measures with respect to the intervention."
Computational Thinking Between Philosophy and STEM—Programming Decision Making Applied to the Behavior of “Moral Machines” in Ethical Values Classroom,"Seoane Pardo, Antonio Miguel",2018,Sin Valor
"Computational thinking beyond STEM: an introduction to ""moral machines"" and programming decision making in ethics classroom","Seoane-Pardo, Antonio M.",2016,"This paper describes a learning activity on computational thinking in Ethics classroom with compulsory secondary school students (14-16 years). It is based on the assumption that computational thinking (or better ""logical thinking"") is applicable not only to STEM subjects but to any other field in education, and it is particularly suited to decision making in moral dilemmas. This will be carried out through the study of so called ""moral machines"", using a game-based learning approach on self-driving vehicles and the need to program such cars to perform certain behaviours under extreme situations. Students will be asked to logically base their reasoning on different ethical approaches and try to develop a schema of decision making that could serve to program a machine to respond to those situations. Students will have to deal also with the uncertainty of reaching solutions that will be debatable and not universally accepted as part of de difficulty, more ethical than technical, to provide machines with the ability to take decisions where there is no such thing as a ""right"" versus ""wrong"" answer, and potentially both (or more) of the possible actions will bring unwanted consequences."
Computational Thinking Bins: Outreach and More,"Morrison, Briana B. and Dorn, Brian and Friend, Michelle",2019,"Computational Thinking Bins are stand alone, individual boxes, each containing an activity for groups of students that teaches a computing concept.We have a devised a system that has allowed us to create an initial set, test the set, continually improve and add to our set. We currently use these bins in outreach events for middle and high school students. As we have shared this resource with K-12 teachers, many have expressed an interest in acquiring their own set. In this paper we will share our experience throughout the process, introduce the bins, and explain how you can create your own set."
Computational thinking competences training for primary education teachers,"Collado-S\'{a}nchez, Mar\'{\i}a and Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e} and Pinto-Llorente, Ana Mar\'{\i}a",2021,"This article provides a summary of a research plan as part of the ""educational robotics"" line of research of the doctoral plan for training in the Knowledge Society. The main objective of the research plan is to propose a curricular approach of Computational Thinking (CT) competences through active methodologies in Primary Education classrooms. It is a study with a mixed methodology to obtain more detailed results; the quantitative phase consists of the development of a MOOC for teacher training in CT, evaluated through questionnaires, and the qualitative phase, a didactic proposal in which these competencies are developed, evaluated through interviews, or focus groups. Thus, we start from a state of the art where it is reflected, on the one hand, that teacher training in CT competences causes positive feedback in Primary Education classrooms and, on the other hand, the need to carry out this training and include CT, programming, and robotics in educational curricula."
Computational thinking curriculum development for upper elementary school classes,"Hill, Charlotte",2014,"As computer science plays an increasingly large role in our lives, it is important to also move it into our classrooms. Computer science careers are among the fastest growing jobs, yet large groups of the population are severely underrepresented in computer science. Elementary school is a key time to introduce computer science or computational thinking because students are capable of programming and they will soon be deciding whether they see a future in the sciences. Including computational thinking as a part of the elementary school general education would give all children an introduction to the subject. In addition, elementary schools are looking for computational thinking material. We need appropriate, research-based tools and curricula for them to use.Unlike the natural sciences, computer science's domain is pliable. Through language and programming environments, developers can create new ways to represent computational thinking concepts. My research seeks 1) to understand how 4th through 6th grade students learn computational thinking, 2) to develop computational thinking learning progressions and curricula, and 3) to create a language and programming environment suitable for elementary school classes and teachers who do not have a computer science background."
Computational Thinking Curriculum for K-12 Education -- A Delphi Survey,"Chuang, Hui-Chi and Hu, Chiu-Fan and Wu, Cheng-Chih and Lin, Yu-Tzu",2015,Sin Valor
Computational Thinking Curriculum for Unmanned Aerial Systems,"Zhang, Shiqi and Stewart, Christopher",2019,Sin Valor
Computational Thinking Development in children both neurotypical and with Intellectual Disabilities by the Game “Pensar e Vestir”,"Soppa Geremias, Matheus and Cerigueli Dutra, Taynara and Maschio, Eleandro and Gasparini, Isabela",2024,"With a focus on problem resolution, Computational Thinking (CT) can assist in developing cognitive abilities. A way to work with CT is using educational digital games (EDG), a ludic tool that stimulates the students’ learning. Still, adjustments are needed so that students with Intellectual Disabilities (ID) can use these games. Based on this scenario, we presented a Bachelor’s final paper that envisioned the creation of an EDG, aiming to contribute to the learning of the target audience, based on the promotion of the development of CT. Called “Pensar e Vestir”, the game uses the four pillars of CT by addressing choosing and wearing clothes. For that, the development counted with a multidisciplinary group – stakeholders and specialists from the areas of Computer Science, Education, Specialized Educational Assistance, and ID – and followed the Simple Interaction Design lifecycle model, with the definition of requirements, designing alternatives, prototyping, and evaluation. As a result, this EDG has two phases and eight situations each: time to sleep, the school in the heat, school in the cold, costume, park, tour, teacher, and market. The game was evaluated by specialists, Computing students, and one neurotypical child, we also intend to make a large evaluation with the target audience. As an outcome, the interaction design process with different stakeholders and specialists provides different insights and improvements to the game. Also, the game is accessible to neurotypical and with ID students."
Computational Thinking Education for Children: Algorithmic Thinking and Debugging,"Wong, Gary K.W. and Jiang, Shan",2018,Sin Valor
Computational Thinking Education: Who Let the Dog Out?,"Swaid, Samar and Suid, Taima",2019,Sin Valor
Computational Thinking for All: An Experience Report on Scaling up Teaching Computational Thinking to All Students in a Major City in Sweden,"Heintz, Fredrik and Mannila, Linda",2018,"The Swedish government has recently introduced digital competence including programming in the Swedish K-9 curriculum starting no later than fall 2018. This means that 100 000 teachers need to learn programming and digital competence in less than a year. In this paper we report on our experience working with professional teacher training in Sweden's fifth largest city. The city has about 150 000 inhabitants and about 50 schools with about 14 000 students in primary education. The project has been carried out in close cooperation with the municipality.The work started in the fall of 2014 with a pilot study with 10 teachers in different subjects that was carried out during spring 2015. The pilot study was successful as the teachers were able to introduce activities related to programming and computational thinking in their subjects after only two half day workshops. The next step was to scale this up to include all the schools in the city. As expected, this turned out to be a larger challenge. More than 70 teachers were involved in the second part of the project. Some of the lessons learned are that it is quite easy to provide teacher training, but harder to get teachers to actually change their teaching and even more challenging to get teachers to help their colleagues introduce programming or computational thinking in their teaching.Based on our experience we draw some general conclusions and make suggestions for how to scale up the teaching of programming and computational thinking to all."
Computational thinking for all: an experience report on scaling up teaching computational thinking to all students in a major city in Sweden,"Heintz, Fredrik and Mannila, Linda",2018,The Swedish government has recently introduced digital competence including programming in the Swedish K-9 curriculum starting no later than fall 2018. This means that 100 000 teachers need to learn programming and digital competence in less than a year. In this paper we report on our experience working with professional teacher training in Sweden's fifth largest city. The city has about 150 000 inhabitants and about 50 schools with about 14 000 students in primary education. The project has been carried out in close cooperation with the municipality.
Computational thinking for all: the power and the peril,"Panoff, Robert Michael",2014,"Students and faculty alike at all education levels are clearly spending much more of their time interacting with computing and communication tools than with each other. Is this good? Are all uses of computational technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how computing enables multiple representations in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. Moving ""beyond PowerPointless-ness,"" we have the opportunity to demonstrate that computing really matters in teaching and learning. Computing ""matters"" because quantitative reasoning, computational thinking, and multi-scale modeling are the intellectual ""heart and soul"" of 21st Century science and therefore are the essential skills of the 21st Century workforce. Computing ""matters"" because we can apply the power of dynamic, visual, and interactive computing to reach a deeper understanding of models across math and science while exploring their role in understanding our world."
Computational thinking for computer science majors: an introduction to CS education career pathways,"Jamieson, Alan C. and Jamieson, Lindsay H.",2020,"In general, computer science majors do not consider K-12 education as a career pathway. A potential reason is a lack of introduction to the career path during their undergraduate careers. In this project, supported through a grant from the Maryland Center for Computing Education (cs4md.org), we developed a pilot computational thinking course blending computer science majors and pre-service teachers. The course focused on describing and integrating computational thinking in a way that would translate to K-12 classrooms while utilizing non-programming based computational tools to demonstrate these ideas. Participants were able to put these ideas into practice in K-8 classrooms during the course and reflect on how the lessons were received. We discuss the implementation of the course, field placement, motivations, and our initial analysis of survey data, including impacts on attitudes on education as a career choice for computer science majors."
Computational Thinking for Digital Culture Development: discussions based on a practical experience,"Ortiz, Julia and Moreira, Carolina and Menezes, Krissia and Ferrari, Bernardo and Junior, Deogenes and Pereira, Roberto",2021,"Computational Thinking has been understood as an essential ability in a society mediated by technology. However, literature in the field shows that initiatives for developing this ability rarely address challenging contexts audiences. In this paper, we draw on the notion of mental models to relate the concepts of Computational Thinking and Digital Culture. We claim that practicing basic skills when exploring simple prototypes favors people to build mental models that are useful to understand and use technologies. In a case study, we engaged adults in their initial stages of literacy in activities that evolved from basic ones with a low fidelity ATM prototype to complex ones with a functional prototype. We identified that participants used the experience and knowledge they obtained from previous activities to carry out the next ones, showing confidence and autonomy when exploring a functional prototype."
Computational thinking for professionals,"Denning, Peter J. and Tedre, Matti",2021,Professionals practice a form of computational thinking that is significantly more advanced than popular descriptions suggest.
Computational Thinking for Self-Regulated Learning,"Pasterk, Stefan and Benke, Gertraud",2024,"In this theoretical paper, we compare computational thinking and self-regulated learning. Many studies use self-regulated learning to foster the acquisition of computational thinking competencies. Self-regulated learning skills are themselves beneficial for any learning process; here, we argue that the relationship between self-regulated learning and computational thinking is closer than the simple observation that self-regulated learning strategies support the acquisition of computational thinking competencies. We sustain that self-regulated learning and computational thinking competencies share many features (and have some differences), which would support synergistic effects so that not only can self-regulated learning be used to attain computational thinking competencies, but computational thinking activities can also be used to foster features of self-regulated learning competencies."
Computational Thinking for STEM Teacher Leadership Training at Louisiana State University,"Alegre, Fernando and Moreno, Juana and Dawson, Trent and Tanjong, Egbeyong E. and Kirshner, David H.",2020,Sin Valor
Computational thinking for teacher education,"Yadav, Aman and Stephenson, Chris and Hong, Hai",2017,This framework for developing pre-service teachers' knowledge does not necessarily depend on computers or other educational technology.
Computational thinking for the sciences: a three day workshop for high school science teachers,"Ahamed, Sheikh Iqbal and Brylow, Dennis and Ge, Rong and Madiraju, Praveen and Merrill, Stephen J. and Struble, Craig A. and Early, James P.",2010,"This paper describes ""Computational Thinking for the Sciences"", a 3-day summer workshop for high school science and mathematics teachers. Our workshop emphasizes the deep connections between the natural sciences, mathematics and computer science through activities and simulation development appropriate for scientific explorations. Teachers were exposed to simulation development in VPython, a visual extension to the popular Python programming language. By broadening exposure of computational thinking to the natural sciences and developing activities specifically for science domains, we hope to attract new students into computer science and better prepare natural science students to employ the computational tools they will utilize in the future."
Computational thinking for youth in practice,"Lee, Irene and Martin, Fred and Denner, Jill and Coulter, Bob and Allan, Walter and Erickson, Jeri and Malyn-Smith, Joyce and Werner, Linda",2011,"Computational thinking (CT) has been described as the use of abstraction, automation, and analysis in problem-solving [3]. We examine how these ways of thinking take shape for middle and high school youth in a set of NSF-supported programs. We discuss opportunities and challenges in both in-school and after-school contexts. Based on these observations, we present a ""use-modify-create"" framework, representing three phases of students' cognitive and practical activity in computational thinking. We recommend continued investment in the development of CT-rich learning environments, in educators who can facilitate their use, and in research on the broader value of computational thinking."
Computational Thinking Growth During a First-Year Engineering Course,"Mendoza Diaz, Noemi V. and Meier, Russ and Trytten, Deborah A. and Yoon Yoon, So",2020,Sin Valor
Computational thinking in a game design course,"Settle, Amber",2011,"As a part of an NSF-funded project to enhance computational thinking in undergraduate general education courses, activities and assessments were developed for a game design course taught at DePaul University. The focus of the course is on game analysis and design, but the course textbook uses an approach that is heavily grounded in computational thinking principles. We describe the course activities and assignments and discuss an initial assessment of those materials. Our results show that there is a gap in difficulty between several of the activities and indicate that the materials developed help students to better learn the computational thinking concepts in the course."
Computational thinking in a non-majors CS course requires a programming component,"Walker, Henry M.",2015,Sin Valor
Computational Thinking in Archival Science Research and Education,"Underwood, William and Marciano, Richard",2019,Sin Valor
Computational Thinking in Augmented Reality: An Investigation of Collaborative Debugging Practices,"Chung, Cheng-Yu and Hsiao, I-Han",2020,Sin Valor
Computational thinking in CS teaching materials: a pilot study,"Barendsen, Erik and Stoker, Idzard",2013,"This poster reports on research in progress. We develop a coding scheme to analyze teaching materials with respect to Computational Thinking (CT) content. In this pilot study, we apply the coding scheme to a sample of Dutch materials for Computing Science. The framework turns out to be useful for both global and in-depth analysis of CT content."
Computational thinking in educational activities: an evaluation of the educational game light-bot,"Gouws, Lindsey Ann and Bradshaw, Karen and Wentworth, Peter",2013,"Computational thinking is gaining recognition as an important skill set for students, both in computer science and other disciplines. Although there has been much focus on this field in recent years, it is rarely taught as a formal course within the curriculum, and there is little consensus on what exactly computational thinking entails and how to teach and evaluate it. To address these concerns, we have developed a computational thinking framework to be used as a planning and evaluative tool. Within this framework, we aim to unify the differing opinions about what computational thinking should involve. As a case study, we have applied the framework to Light-Bot, an educational game with a strong focus on programming, and found that the framework provides us with insight into the usefulness of the game to reinforce computer science concepts."
Computational Thinking in Elementary and Secondary Teacher Education,"Yadav, Aman and Mayfield, Chris and Zhou, Ninger and Hambrusch, Susanne and Korb, John T.",2014,"Computational thinking (CT) is broadly defined as the mental activity for abstracting problems and formulating solutions that can be automated. In an increasingly information-based society, CT is becoming an essential skill for everyone. To ensure that students develop this ability at the K-12 level, it is important to provide teachers with an adequate knowledge about CT and how to incorporate it into their teaching. This article describes a study on designing and introducing computational thinking modules and assessing their impact on preservice teachers’ understanding of CT concepts, as well as their attitude towards computing. Results demonstrate that introducing computational thinking into education courses can effectively influence preservice teachers’ understanding of CT concepts."
Computational Thinking in Game-Based Learning for STEM Education,"Ahamad, Noor Affieyka Natasha and Ismail, Ismassabah and Zain, Nurul Hidayah Mat and Ismail, Marina",2024,Sin Valor
Computational Thinking in Greek Educational System for K-12: towards the future teaching approach,"Dimos, Ioannis and Velaora, Chrysoula and Kakarountas, Athanasios",2022,Sin Valor
Computational thinking in Greenfoot: AI game strageties for CS1: conference workshop,"Jonas, Michael and Sabin, Mihaela",2015,"We introduce workshop participants to Quoridor, a multiplayer strategy game for which we've developed an engine in Greenfoot [1]. We use Greenfoot, an interactive Java development environment designed primarily for educational purpose that allows easy development of two-dimensional graphical applications. Participants will first learn how to play the game and then follow a simple algorithm while playing to demonstrate the type of strategies that can be devised in the game engine. The session will then be divided into groups guided by workshop presenters and focus on developing a strategy and implementing it within the Quoridor engine in Greenfoot. At the end of the workshop, groups will be pitted against each other in a Battle Royal."
Computational thinking in high school courses,"Allan, Vicki and Barr, Valerie and Brylow, Dennis and Hambrusch, Susanne",2010,"The number of undergraduates entering computer science has declined in recent years. This is paralleled by a drop in the number of high school students taking the CS AP exam and the number of high schools offering computer science courses. The declines come at a time when career opportunities in CS continue to grow and computer science graduates are seen as crucial in building a globally competitive workforce for the 21st century. Efforts aimed at reversing the declining interest in computer science include curriculum revisions at the undergraduate level at many institutions, a re-design of computer science AP courses [1], and the inclusion of computational thinking into disciplines outside computer science [3].This panel discusses four projects of computer science researchers collaborating with high school teachers on integrating computing and computational thinking into their courses. The majority of the high school teachers involved is teaching science and math courses. They are teaching a diverse group of talented and college-bound students. The goal of all projects is to integrate computing into disciplines represented in the high school curriculum and to raise the awareness of computer science as an exciting and intellectually rewarding field.This panel will outline recent and on-going activities and interaction with high school teachers. Each panelist will describe how he/she got involved and the nature of the interaction. The panelists will talk about their individual projects, outline their visions for future interactions, and how their effort can be replicated by others. The session will briefly describe NSF's RET program which provided teacher support for three of the four projects. The session will then be opened for discussion; the audience will be encouraged to ask questions and contribute additional ideas for the inclusion of computational thinking in high school courses."
"Computational Thinking in Italian Schools: Quantitative Data and Teachers' Sentiment Analysis after Two Years of ""Programma il Futuro""","Corradini, Isabella and Lodi, Michael and Nardelli, Enrico",2017,"In this paper the first two years of activities of ""Programma il Futuro"" project are described. Its goal is to disseminate among teachers in Italian primary and secondary schools a better awareness of informatics as the scientific basis of digital technologies. The project has adapted Code.org learning material and has introduced it to Italian schools with the support of a dedicated web site. Response has been enthusiastic in terms of participation: in two years more than one million students have been engaged and have completed a total of 10 million hours of informatics in schools. Almost all students found the material useful and were interested, teachers have reported. They have also declared to have experienced high satisfaction and a low level of difficulty. A detailed analysis of quantitative and qualitative data about the project is presented and areas for improvement are identified. One of the most interesting observations appears to corroborate the hypothesis that an exposure to informatics since the early age is important to attract students independently from their gender."
Computational Thinking in K-9 Education,"Mannila, Linda and Dagiene, Valentina and Demo, Barbara and Grgurina, Natasa and Mirolo, Claudio and Rolandsson, Lennart and Settle, Amber",2014,"In this report we consider the current status of the coverage of computer science in education at the lowest levels of education in multiple countries. Our focus is on computational thinking (CT), a term meant to encompass a set of concepts and thought processes that aid in formulating problems and their solutions in different fields in a way that could involve computers [130].The main goal of this report is to help teachers, those involved in teacher education, and decision makers to make informed decisions about how and when CT can be included in their local institutions. We begin by defining CT and then discuss the current state of CT in K-9 education in multiple countries in Europe as well as the United States. Since many students are exposed to CT outside of school, we also discuss the current state of informal educational initiatives in the same set of countries.An important contribution of the report is a survey distributed to K-9 teachers, aiming at revealing to what extent different aspects of CT are already part of teachers' classroom practice and how this is done. The survey data suggest that some teachers are already involved in activities that have strong potential for introducing some aspects of CT. In addition to the examples given by teachers participating in the survey, we present some additional sample activities and lesson plans for working with aspects of CT in different subjects. We also discuss ways in which teacher training can be coordinated as well as the issue of repositories. We conclude with future directions for research in CT at school."
Computational thinking in mathematics education: A joint approach to encourage problem-solving ability,"Costa, Erick John Fidelis and Campos, Livia Maria Rodrigues Sampaio and Dario Serey Guerrero, Dalton",2017,Sin Valor
Computational Thinking in Music: A Data-Driven General Education STEAM Course,"Shafer, Jennifer and Skripchuk, James",2020,"This poster outlines the design and results of a course entitled ""Computational Thinking in Music."" The course teaches computational thinking principles as a general education objective to undergraduate students, using data-driven investigation to inform musical composition. Students compose a song to imitate an artist of their choice by analyzing data extracted from a corpus of crowd-sourced pop song transcriptions. Students learn principles of abstraction, decomposition, and algorithmic thinking; no coding experience is required. Quantitative and qualitative results indicate that students are learning and applying computational thinking principles. Since the course is designed and taught by a musician and is run in the music department, students also learn a significant amount of music theory and composition, including harmonic structures and harmonization principles, melodic organization, consonance and dissonance, aural analysis of formal structures and meter, and influence of rhythm and timbre to create desired sounds."
Computational thinking in pre-university education,"Garc\'{\i}a-Pe\~{n}alvo, Francisco J. and Cruz-Benito, Juan",2016,"Several countries have usually adopted several priorities for developing ICT competences from kindergarten to secondary education. Most of them are focused on the development of key competences and/or coding skills. Although coding may be very attractive for young students and a very good practice or experience, it could be more interesting to develop students' logical thinking skills and problem-solving skills throughout programming approaches or computational thinking. This is a very exciting challenge with lots of possibilities regarding coding, robots, mobiles devices, Arduino-based application, game-based learning and so on. Thus it is very important discuss the experiences that are being developed worldwide in specialized for a with researchers that are working on this field, such as for example European Union TACCLE 3 - Coding project. This track is devoted to identify, share and valorize best practices and experiences (including technological and methodological issues) that focused on the development of computational thinking and related skills in any level of pre-university education."
Computational Thinking in PreK-5: Empirical Evidence for Integration and Future Directions,Sin Valor,2022,Sin Valor
Computational thinking in programming language and compiler design (keynote),"Aho, Alfred V.",2021,Abstractions and algorithms are at the heart of computational thinking. In this talk I will discuss the evolution of the theory and practice of programming language and compiler design through the lens of computational thinking. Many of the key concepts in this area were introduced at the ACM Symposium on the Theory of Computing.
Computational thinking in school education in South America: Systematic review of the literature,"Curasma, Ronald Paucar and Paucar Curasma, Herminio",2020,Sin Valor
Computational Thinking in STEM Teaching: Preservice Teachers' Conceptualizations and Practices,"Wei, Wei and Ha, Jesse and Gomez, Kimberley and Ghosh, Anuradha",2024,"Within a two-year urban teacher residency program at [University], which focuses on training high school teachers to incorporate computational thinking (CT) into STEM education with an emphasis on equity, this study delves into how these preservice teaching residents (TRs) understood and applied CT in high school STEM settings. Based on our initial thematic content analysis of ten 30-minute artifact-based interviews, teachers' understanding and application of CT could be categorized in two ways: 1) One group of teachers showcased clear, explicit knowledge of CT and actively incorporated it into their instruction; 2) Another group, despite their evident understanding of CT, subtly and implicitly integrated CT into their teaching methods. Our findings suggest that while TRs may differ in whether they explicitly or implicitly integrated CT into their lesson plans, their comments suggest that they have foundational understandings and hold values that suggest they can build upon them. The TRs held definitional understandings of CT and had intentions to design and teach with CT integration, explicitly, or more commonly, implicitly. All of the TRs recognized opportunities in their lesson plans for teaching CT to students, which suggests the potential for more explicit integration in the future. These insights guide our subsequent efforts in teacher training, ensuring educators are equipped to weave CT into STEM lessons. Our findings contribute to a growing body of work that seeks to build strong preservice teaching practices, as they learn to translate CT knowledge into effective teaching practices while working towards higher levels of CT integration."
Computational Thinking in Teacher Education,"Floyd, Lisa Anne",2020,"Teacher education programs are beginning to acknowledge the important role they play in preparing teachers to support students in the area of STEM, coding, Computational Thinking and robotics. As a result, new courses are being developed that connect research, pedagogy and technology within this nascent field. An example of this is Western University's Computational Thinking in Mathematics and Science Education course, which has been offered in year one of the Bachelor of Education program since 2015 and is part of the STEM cohort. Research has been conducted during each iteration of the course and subsequent adjustments were made in order to better serve the preservice teachers as well as respond to new insights in the field. The preservice teachers have completed at least one university degree, mostly in the areas of science or mathematics, prior to beginning their Bachelor of Education degree. This lightning talk presents highlights from the most recent version of the course following this iterative process of course design. The 36-hour course provides pre-service teachers with opportunities to explore hands-on-activities and theoretical-based approaches to Computational Thinking and pedagogy in grades 7-12, all within a blended learning context. The researchers will be further studying the pre-service teacher experience and are looking to provide recommendations for other preservice teacher education programs as well as in-service professional development programs."
"Computational Thinking in the Danish High School: Learning Coding, Modeling, and Content Knowledge with NetLogo","Musaeus, Line Have and Musaeus, Peter",2019,"Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to inform high-school teachers how to foster students' development of CT in computer science and other subjects. Evidence suggests that agent-based modeling is a valuable way for students to learn CT in different subjects. This paper reports a teaching experiment where researchers, developers, and high school teachers collaborated to develop six NetLogo models. The models were used in nine Danish High Schools in the following four subjects: Biotechnology, chemistry, biology, and social science. Teachers and students had no or very limited experience with programming. Students build CT and content knowledge by using, modifying, and creating code in the models. This paper provides details for others to adopt the models and the underlying CMC framework, which integrates: Coding, Modeling, and Content. The paper evaluates the results from an open-ended questionnaire with all participating students (n=210) and semi-structured interviews with all teachers (n=15). Thematic analysis was applied to categorize the qualitative data. Results showed that students were able to use, modify, and create code in NetLogo that enabled them to develop CT and content knowledge. The CMC framework represents a fruitful way for teachers to design and teach and for students to tinker with learning CT."
Computational thinking in the era of data science,"Mike, Koby and Ragonis, Noa and Rosenberg-Kima, Rinat B. and Hazzan, Orit",2022,Incorporating data thinking into computer science education.
Computational Thinking in the Making: Lessons for Second Graders in a STEM Computer Science Immersion School,"Scheppegrell, Lindsey and Hiatt, Elyse and Okerlund, Johanna and Wilson, David",2019,"Recently, there has been significant interest in integrating Maker-related experiences into formal education. A challenge is reconciling open-ended making and non-deterministic learning goals with standards that drive traditional education. In the context of our CS-focused STEM magnet school, we designed two 2nd grade lessons that not only align with grade-level standards and our school's computer science-oriented pedagogy, but also incorporate 3D printing and the philosophy of Makerspaces. The integrated Maker experience serves to scaffold computational thinking practices such as abstraction, modeling, and decomposition, which are essential for long-term success in STEM learning. To bring these aspects together, we created a rubric based on existing evaluation tools. Using this rubric, we evaluated the two lessons with a small sample of participants. Our pilot study shows promise of mastery in standard-related content, evidence of a making mindset, engagement in the activity, innovation in design, and solidarity in working with peers. Aligning state standards with open-ended Maker activities has potential for fostering student growth and engagement in the classroom. An additional component of our research was reflecting on our experience as teachers with no Makerspace experience who were newly submerged in the digital fabrication world. We present the two 3D printing-based lessons, one addressing extreme weather standards, the other incorporating understanding of urban, suburban, and rural communities. We also present the rubric we designed, the literature that guided this work, and reflections and recommendations from our experience of learning digital fabrication for the first time and integrating it into curriculum."
Computational Thinking in the Mathematics Classroom: Fostering Algorithmic Thinking and Generalization Skills Using Dynamic Mathematics Software,"van Borkulo, Sylvia and Chytas, Christos and Drijvers, Paul and Barendsen, Erik and Tolboom, Jos",2021,"There are increasing calls for mathematics teachers to foster computational thinking (CT) skills in their lessons and align them with existing curricula and national educational policies. Algorithmic thinking (AT) and generalization are two key elements of CT that are often underrepresented in traditional mathematics lessons. This study investigated how to address AT and generalization aspects in 12th-grade calculus lessons using the dynamic mathematics software GeoGebra. We present a six-lesson intervention designed by an interdisciplinary team of researchers and teachers with a background in computer science and mathematics education that aims to foster pre-university students’ AT and generalization skills in calculus lessons. We evaluated the intervention in a 15 students classroom in the Netherlands through the analysis of students’ workbooks, files, interviews, and the teacher’s logbook. The findings suggest that the intervention was favorably seen by both the teacher and the students, and that their learning and teaching experience was highly satisfactory. The most common challenges for successfully completing the designed material included issues related to getting familiar with GeoGebra, syntax, and effectively using conditional statements. Finally, we report on the learning and teaching experience and discuss strategies to address AT and generalization aspects for teachers who wish to address such CT aspects in mathematics lessons."
Computational Thinking Integration Design Principles in Humanities,"Caskurlu, Secil and Hu, Anne Drew and Yadav, Aman and Santo, Rafi",2022,"In this poster, we will present approaches and associated design principles for integrating computational thinking (CT) into middle school Social Studies, Arts, and Language Arts instruction to enhance disciplinary learning. We used four steps to identify these approaches and design principles: (1) co-design with teachers and experts in computer science and CT education to ideate CT-integrated lessons; (2) identifying initial design principles based on the ideated lessons; (3) consultation with subject matter experts; and (4) conducting a Delphi study with pedagogical experts (e.g., teachers, curriculum writers, teacher educators) to examine the clarity, feasibility and potential impact of the design principles. The process led to three broad approaches to integrate CT into Social Studies instruction that included 14 design principles, three for Arts with 16 design principles, and four for Language Arts with 12 design principles."
Computational thinking integration in elementary teachers' science lesson plans,"Coenraad, Merijke and Cabrera, Lautaro and Killen, Heather and Plane, Jan and Ketelhut, Diane Jass",2022,"Due to the increasingly computational nature of professions, computational thinking (CT) is of growing importance to authentic science learning and the education of future scientists. To meet this need, CT integration is expanding within classrooms. We provided professional development (PD) for pre-service and in-service teachers focused on integrating CT into elementary science. At the PD culmination, 36 teachers wrote and enacted 22 unique CT-integrated science lessons, individually or with teaching partners. Waterman et al. (2020) suggested three levels of integrating CT within lesson plans: exist, labeling already present CT; enhance, adding CT components; and extend, adding activities supporting science learning with CT. Using this framework, we examined these lesson plans, their alignment to CT practices, and the level of CT integration. Our results indicated 83.3% of teachers successfully integrated CT within their lessons, focusing on Using Data, Computational Simulations, and Programming practices. Further, we found the level of integration differed by CT practice. Data practices generally led to exist level integration, Computational Simulation practices to enhance level integration, and Programming practices tended to extend science lessons or exhibit the science topic with Programming. Our data demonstrated teachers can write CT-integrated lesson plans, but all levels of integration are not equal opportunities for authentic scientific learning. As the field seeks to offer equitable and quality CT experiences for all students integrated within disciplinary subjects, we must understand the level of CT integration and consider how different levels of integration could affect opportunities for students."
Computational Thinking Interventions in Higher Education: A Scoping Literature Review of Interventions Used to Teach Computational Thinking,"de Jong, Imke and Jeuring, Johan",2020,"Computational Thinking is seen as a crucial skill in an increasingly digital society. Researchers and educators in higher education therefore aim to improve the Computational Thinking (CT) skills of students using appropriate interventions. However, there is currently no overview of interventions used to teach CT and how effective they are. With this scoping literature review, we provide such an overview by identifying articles that discuss interventions used to teach CT in higher education. We identify the teaching approaches used in these interventions, and discuss their effectiveness and how this is assessed. Furthermore, we look at the use of adaptive interventions. Our search of three academic databases (Scopus, ACM and ERIC) resulted in 1839 articles. After screening, 49 articles remained. A detailed examination of the interventions discussed in these articles showed that CT is still often taught through programming assignments. The interventions are evaluated in a myriad of ways, making it difficult to compare the effectiveness of interventions. We therefore suggest making use of more standardized instruments to evaluate the effectiveness. Finally, although scaffolding is applied, interventions are not often adapted to the actual proficiency level of a student."
"Computational thinking is critical thinking: connecting to university discourse, goals, and learning outcomes","Kules, Bill",2016,"Computational thinking complements critical thinking as a way of reasoning to solve problems, make decisions and interact with our world. It draws concepts and techniques such as abstraction, decomposition, algorithmic design, generalization, evaluation and iteration from computer and information science, but has broad application in the arts, sciences, humanities and social sciences. This paper compares computational and critical modes of thinking, identifying concepts and terminology that support cross-disciplinary discourse, inform faculty and curriculum development efforts, and interconnect learning outcomes at the course, program and university level, thus helping programs better articulate contributions to institutional goals. A better understanding of each mode can enrich what we teach aspiring information professionals about computational and critical thinking, how we teach it, and how we apply these skills in our professional work."
Computational thinking is not necessarily computational,CACM Staff,2017,Sin Valor
Computational thinking issues,"Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2017,"This is the second occasion that Computational Thinking track is presented in TEEM Conference. Our Society is claiming for more technical professionals and future job will need workers know the computational principles to be applied in their daily tasks, independently they will be technicians. The computer science and programming skills need to be introduced since early beginning in the children education, but these are not enough, a new way of thinking and solving problems is needed, this is the computational thinking goal."
Computational thinking leads to computational learning: Flipped class room experiments in linear algebra,"Se, Shriya and Ashwini B and Chandran, Archana and Soman K.P",2015,Sin Valor
Computational Thinking Meets Design Thinking: Technology and Arts Collaborations,"Brunvand, Erik",2015,"Are fine arts and technology compatible partners"" Do these disciplines support each other or flinch when they are combined like oil and water"" Do collaborative efforts provide interesting insights and opportunities for students"" For practitioners"" There seems to be an explosion of interest in exploring arts and technology connections: new media, digital media, kinetic art, new frontiers, emergent media, interdisciplinary, multidisciplinary, and transdisciplinary are only some of the terms used to describe this fusion of disciplines.A visit to the SIGGRAPH art gallery or the SIGCHI Interactivity sessions, for example, will showcase a wide variety of uses of computing, embedded control, sensors, and actuators in the service of art. Kinetic art using embedded control is a marriage of art and technology. Artistic sensibility and creativity are required for concept and planning, and computer science and engineering skills are required to realize the artistic vision. However, these different skills are often taught in extremely different parts of a university campus.In this talk I will start with some thoughts on the nature of combining arts and technology, and show some historical and contemporary examples specifically relating to kinetic art. I will then describe an ongoing collaborative course that involves Computer Science and Art students working together to design and create computer-controlled kinetic art. Students in the course explore interfacing of embedded computer systems with sensors and actuators of all sorts. They also explore physical and conceptual aspects of machine-making as a fine-art sculpture process. Our goal is to enhance the educational experience of both groups of students. We believe that both student groups gain significant and unusual benefits that they can apply in a variety of ways in their respective disciplines."
Computational Thinking on Mathematical Problem-Solving: Bibliometric Theme and Aspect,"Susanti, Reni Dwi and Lukito, Agung and Ekawati, Rooselyna",2024,"This study aims to investigate current trends and key elements of computational thinking in problem-solving within mathematics education. A systematic literature review was conducted using the 2013-2013 Scopus database, focusing on the keyword ""computational thinking in mathematics education"" for document collection. Data analysis was visualized using R-studio software. The thematic analysis revealed two major fields that extensively research computational thinking: education and engineering. Additionally, six research themes emerged from the analysis, including Mathematics, Computer Science, programming, STEM, robotics, and engineering. Key aspects for identifying computational thinking in solving mathematical problems encompass problem identification, decomposition, pattern recognition, abstraction, algorithms, and debugging."
Computational thinking outreach: reaching across the K-12 curriculum,"Pokorny, Kian L. and White, Nathan",2012,"Recruiting a precollege audience into computing disciplines can be challenging. One approach is to engage those that have a strong influence with the precollege students, K-12 teachers [16]. To engage these teachers, we held a Google-sponsored Computer Science for High School (CS4HS) workshop at our small university. The workshop, scheduled over a two day period, included presentations on the Computer Science Teachers Association (CSTA) K-12 computer science curriculum standards, recruiting woman into computing disciplines, and careers in technology. Additionally, there were hands-on sessions with Scratch programming, FIRST robotics, computer hardware, programming in Excel, and CS Unplugged. A unique aspect of this workshop was that high school, middle school, and elementary school teachers, both in and out of technology-related disciplines, were invited to attend. Another unique aspect of our workshop was the inclusion of several sessions with activities for participants to create action plans for incorporating computational thinking components into the curriculum at their respective schools. This included a presentation from a former school superintendent on how to work with school districts in considering computer science as a component in the curriculum and several small-group working sessions to develop the action plans. Discussions with the attendees and subsequent surveys revealed some surprising information about perceptions that K-12 teachers had surrounding computer science and technology. This paper describes our experience with the workshop."
Computational Thinking Resources Inspired by Bebras,"Lehtim\""{a}ki, Taina and Monahan, Rosemary and Mooney, Aidan and Casey, Kevin and Naughton, Thomas J.",2023,"In this poster, we highlight computational thinking resources for schools from the PACT team at Maynooth University, Ireland. The resources are derived from tasks from the Bebras international computational thinking initiative. The different modalities work together throughout the school year to provide initial exposure to computational thinking, and include an obstacle course, seasonal tasks, and a workbook."
Computational thinking should just be good thinking,"Guzdial, Mark and Kay, Alan and Norris, Cathie and Soloway, Elliot",2019,Seeking to change computing teaching to improve computer science.
Computational Thinking Skills for Today and Tomorrow’s Talent,"Saleh, Heba",2017,Sin Valor
Computational thinking skills in Dutch secondary education,"Grgurina, Nata\v{s}a and Barendsen, Erik and Zwaneveld, Bert and van de Grift, Wim and Stoker, Idzard",2013,"Computational Thinking is regarded as a necessary analytical skill for young people in the present day information society. We report on an ongoing design research project on Computational Thinking (CT) skills in Dutch secondary computer science (CS) education. The first phase of the project investigates the occurrence and nature of typical CT aspects in existing CS teaching materials, teacher's pedagogical content knowledge and policy documents. In the poster we focus on the overall research design and on the method and preliminary results of the first phase."
Computational thinking skills in dutch secondary education: exploring pedagogical content knowledge,"Grgurina, Nata\v{s}a and Barendsen, Erik and Zwaneveld, Bert and van Veen, Klaas and Stoker, Idzard",2014,"This study was aimed at exploring the pedagogical content knowledge (PCK) of computer science (CS) teachers in secondary education in the Netherlands concerning three aspects of Computational Thinking: data collection, algorithms &amp; procedures and simulation. Semi-structured interviews with a specially developed interview protocol containing Content Representation (CoRe) instrument were used. From the preliminary analysis of the acquired data we conclude that all interviewed teachers demonstrate PCK on data collection and algorithms &amp; procedures but with varying knowledge of learning objectives and completeness of their PCK. Teachers' PCK on simulation exhibit great variation from meager, through fragmentary to abundant."
Computational thinking skills in dutch secondary education: exploring teacher's perspective,"Grgurina, Nata\v{s}a and Barendsen, Erik and Zwaneveld, Bert and van Veen, Klaas and Stoker, Idzard",2014,"The term Computational Thinking (CT) was introduced in 2006 by J. M. Wing to indicate a set of analytical skills regarded necessary for the youth in the modern information society [11]. We describe an ongoing research project on CT skills in the Netherlands, focusing on the computer science (CS) course in the upper grades of secondary education. In the first phase of the project we explore the occurrence and nature of CT aspects in the CS teaching materials and policy documents as well as teachers' pedagogical content knowledge (PCK). In this poster we describe the research design and the method of the first phase of the project and we report and discuss the results obtained so far, focusing on the teachers' perspective."
Computational Thinking Test for Beginners: Design and Content Validation,"Zapata-Cáceres, María and Martín-Barroso, Estefanía and Román-González, Marcos",2020,Sin Valor
"Computational Thinking Test for Lower Primary Students: Design Principles, Content Validation, and Pilot Testing","Zhang, Shuhan and Wong, Gary K. W. and Pan, Guangrong",2021,Sin Valor
Computational Thinking Test Tool to Measure Cognitive Ability of K-12 Students,"Ryu, Miyoung and Han, SeonKwan",2020,This study reports the design and development of the Computational Thinking(CT) Test Tool to measure Cognitive Ability of K-12 students. The newly developed CT test tool was validated with experts and K-12 students. We expect that the CT test tool will be used as a basic data to identify the current situation of computing education.
Computational thinking through an online game to develop soft and hard skills,"Farias, Adriano Fiad and Augusto Couto Barone, Dante",2023,Sin Valor
Computational thinking through children's games: an analysis of interaction elements,"Falc\~{a}o, Taciana Pontual and Gomes, Tancicleide C. Sim\~{o}es and Albuquerque, Isabella Rocha",2015,"Digital games represent a ludic, attractive and pedagogically interesting possibility for teaching-learning processes. The appearance of several children's games based on creation of algorithmic sequences for controlling characters shows the growing importance given to the development of computational thinking at elementary level. However, the adoption of this kind of game in educational contexts is hindered by the lack of trustworthy design and evaluation methods to access the quality of the games and guide developers and educators. This paper reports the evaluation of a children's digital game for teaching computational thinking, and presents results that contribute to the generation of guidelines related to interface elements, interaction issues and key design choices for performing functions that are common to games of the kind."
Computational Thinking through Design Patterns in Video Games,"Barbero, Giulio and G\'{o}mez-Maureira, Marcello A. and Hermans, Felienne F.J.",2020,"Prior research has explored potential applications of video games in programming education to elicit computational thinking skills. However, existing approaches are often either too general, not taking into account the diversity of genres and mechanisms between video games, or too narrow, selecting tools that were specifically designed for educational purposes. In this paper we propose a more fundamental approach, defining beneficial connections between individual design patterns present in video games and computational thinking skills. We argue that video games have the capacity to elicit these skills and even to potentially train them. This could be an effective method to solidify a conceptual base which would make programming education more effective."
Computational thinking through modeling in language lessons,"Sabitzer, Barbara and Demarle-Meusel, Heike and Jarnig, Maria",2018,Sin Valor
Computational thinking through programming and algorithmic art,"Orr, Genevieve",2009,"General education students can be taught computational thinking skills through courses that marry computer programming with algorithmic art. Algorithmic art is a varied and growing field where images are generated on the computer using mathematical and computer algorithms (see http://processing.org/exhibition/index.html for examples). Visually oriented students may be motivated to learn programming when it is taught in a context that is as much focused on art, artists, and design principles as it is on mathematics and programming. This presentation will include 1) a discussion of the challenges of teaching programming, 2) the role of teaching style, motivation, and programming environment, 3) a summary of common algorithms and their relation to design principles, and 4) examples of artwork that has been created by current artists."
Computational Thinking through Tangible Play: Understanding Social Dialogues in Children's Learning,"Liu, Yu-Yu and Iversen, Ole Sejer",2022,"Through an exploratory study of a 6-year-old child and his parents, we explored the complexities of children's affective learning experience with tangible programming games, specifically focusing on the impact of scaffolding dialogues and social-emotional support. The social dialogues from this exploratory study demonstrate the interactive reasoning process in computational thinking (CT) education and reveal that dialogic learning has the potential to promote learning emotions and CT skills development in CT education. This study thus points to the future Child-Computer Interaction (CCI) research agenda that considers social dialogues in CT education with tangible play. A new understanding of social dialogues in CT toys and CT education can provide educators and CCI researchers with socio-technical insights into the future educational practices and design of CT games and technology for young children."
Computational thinking tools,"Repenning, Alexander and Basawapatna, Ashok and Escherle, Nora",2016,Sin Valor
Computational thinking via interactive journalism in middle school,"Wolz, Ursula and Stone, Meredith and Pulimood, Sarah M. and Pearson, Kim",2010,"To address the critical shortage of students entering computing fields, as well as broaden participation in computing, we present a summer and afterschool program in Interactive Journalism through which middle school students and their teachers develop an appreciation for and competence in computational thinking. We report on the outcomes of our first year in which three middle school language arts teachers, a technology teacher and a guidance counselor collaborate with college faculty to publish a school magazine of the future. Students and their teachers research and conduct interviews to develop news stories that are then presented as story packages with text, video, and procedural animations in Scratch. Results of formal data collection show changes in students' perceptions of what it means to program, as well as their emerging confidence in their ability to design computational solutions and to program."
Computational thinking with the web crowd using CodeMapper,"Vanvorce, Patrick and Jamil, Hasan M.",2019,"It has been argued that computational thinking should precede computer programming in the course of a career in computing. This argument is the basis for the slogan ""logic first, syntax later"" and the development of many cryptic syntax removed programming languages such as Scratch!, Blockly and Visual Logic. The goal is to focus on the structuring of the semantic relationships among the logical building blocks to yield solutions to computational problems. In this paper, we introduce a new programming platform, called the CodeMapper, in which learners are able to build computational logic in independent modules and aggregate them to create complex modules. CodeMapper is an abstract development environment in which rapid visual prototyping of systems is possible by combining already developed independent modules in logical steps."
Computational Thinking Work System Method: A problem-solving method for small and medium enterprises,"Nuar, Ahmad Najmi Amerhaider and Rozan, Mohd Zaidi Abd and Bahari, Mahadi",2021,Sin Valor
"Computational Thinking, Code Complexity, and Prior Experience in a Videogame-Building Assignment","Boechler, Patricia and Artym, Corbett and Dejong, Erik and Carbonaro, Mike and Stroulia, Eleni",2014,Sin Valor
"Computational Thinking, Inferential Thinking and ""Big Data""","Jordan, Michael I.",2015,"The phenomenon of ""Big Data"" is creating a need for research perspectives that blend computational thinking (with its focus on, e.g., abstractions, algorithms and scalability) with inferential thinking (with its focus on, e.g., underlying populations, sampling patterns, error bars and predictions). Database researchers and statistical machine learning researchers are centrally involved in the creation of this blend, and research that incorporates perspectives from both databases and machine learning will be of particular value in the bigger picture. This is true both for methodology and for theory. I present highlights of several research initiatives that draw jointly on database and statistical foundations, including work on concurrency control and distributed inference, subsampling, time/data tradeoffs and inference/privacy tradeoffs."
"Computational Thinking, Perception, and Confidence in Distance Learning","Bao, Yeting and Hosseini, Hadi",2021,"One of the key factors for measuring success in distance learning is student interaction with learning materials. Remote instruction has gained substantial traction with the advent of online education, and this attention has increased in the presence of global pandemics. The asynchronous nature of remote learning has deteriorated the quality of education for learners, which calls for the design of novel interactive techniques to promote student engagement. We study the impact of traditional learning tools such as textbooks and videos in contrast with interactive learning media in computational and algorithmic thinking, and investigate students' perception of learning and actual learning comprehension in higher education."
Computational Thinking-Integrated Elementary Science with Culturally Responsive Teaching: A Vignette Study,"Xin, Yue and Kramarczuk, Kristina Anna and Mak, Janice and Terrell Shockley, Ebony and Ketelhut, Diane Jass",2023,"In response to the persistent diversity gap that exists in the computing field, we implemented a five-day professional development (PD) workshop for elementary teachers on integrating computational thinking (CT) and culturally responsive teaching (CRT) practices into their existing science instruction. An explicit focus of this PD was to engage teachers in analyzing CT- and CRT-integrated science classroom scenarios (i.e., vignettes). Our analyses of video and written data of teachers' vignette responses indicate that while their understanding of CT increased as a result of the PD, the teachers need additional support around CRT. We suggest that future studies explore how teachers define and enact CRT, especially within their unique contexts."
Computational thinking: expanding the toolkit,"Imberman, Susan P. and Sturm, Deborah and Azhar, Mohammad Q.",2014,"In this paper we describe a set of tools, LEGO® Mindstorms NXT, SCRATCH, App Inventor, and CS Unplugged, that was presented to teachers to support computational thinking curriculum initiatives. During a workshop sponsored by GOOGLE's CS4HS program, educators were given step-by-step instructions in the basics of each tool, along with a computational thinking activity/challenge that can be used in the classroom. Survey data from the workshop indicated that a breadth first, intensive introduction influenced educators to consider these tools. The educators cited deficient school resources as a possible barrier to implementation, but the introduction of the Raspberry Pi holds promise for mitigating this. Educators unanimously found the workshop useful and indicated that they are likely to include the tools in their classrooms"
Computational Thinking: Learning by Doing with the Cinco Adventure Game Tool,"Gossen, Frederik and Kühn, Dennis and Margaria, Tiziana and Lamprecht, Anna-Lena",2018,Sin Valor
Computational thinking: modeling applied to the teaching and learning of English,"Howell, Linda and Jamba, Lisa and Kimball, A. Samuel and Sanchez-Ruiz, Arturo",2011,"In this paper, we describe the first phase of a cross-disciplinary project between computing and English faculty who explored how computational thinking skills such as abstraction, modeling, and iteration can be used to support English faculty in teaching students to write well. This initial phase of collaboration focused on developing and applying a model to capture fundamental concepts for teaching composition with special emphasis on those related to clarity. We iteratively developed a complex concept map that can act as a curriculum planning and teaching tool. In the next phase of the project, we plan to adapt selected exercises from traditional writing courses to include computational approaches such as modeling, and to test which audiences benefit from these revised exercises."
"Computational thinking: online and offline, plugged and unplugged","Bell, Tim",2021,Sin Valor
Computational thinking: Panorama of the Americas,"Brackmann, Christian and Barone, Dante and Casali, Ana and Boucinha, Rafael and Muñoz-Hernandez, Susana",2016,Sin Valor
Computational Thinking: Possibilities and Challenges,"Ribeiro, Leila and Nunes, Daltro José and Cruz, Marcia Kniphoff da and Matos, Ecivaldo de Souza",2013,Sin Valor
Computational thinking: special sauce or snake oil?,"Xu, Yan and Peters, Joseph and Kirkpatrick, Arthur and O'Neil, Kevin",2009,"Computer scientists are in wide agreement that computational thinking is destined to become a crucial topic in computer science departments. Advocates tout computational thinking as an essential tool for informed citizens of the information age, allowing those citizens to understand the digital infrastructure underlying their lives and also to solve longstanding problems using new computational approaches."
Computational thinking: what does it really mean for the K-16 computer science education community,"Hoskey, Arthur and Zhang, Sen",2017,"It is commonly agreed that being able to think computationally will make it easier for students to master computing disciplines as well as apply these thinking skills to subjects beyond computing. In this work, we attempt to bridge the gap between the overarching high-level ideas initially proposed by Jeanette Wing and K-16 computer science education. We propose a first step towards refining, summarizing and concretizing what computational thinking is within the K-16 computer science education scope. Our focus is on identifying and defining aspects (subtopics) of computational thinking that directly relate to computer science in terms of K-16 teaching and learning of computer science."
"Computational thinking: what is it, how is it relevant, who's doing what with it?","Bryant, Robert and Chinn, Donald and Hauser, George and Folsom, Michele and Wallace, Scott",2009,"Since Jeannette Wing wrote her opinion paper on Computational Thinking in 2006 [1], there has been much discussion about the idea of making computational thinking a central component of the effort to expose the field of computing to all disciplines. This panel will cover national and local efforts taking place in universities to bring computational thinking to the forefront of all disciplines that use computing in their field."
Computational thinking: what it might mean and what we might do about it,"Hu, Chenglie",2011,"Computational thinking has been promoted in recent years as a skill that is as fundamental as being able to read, write, and do arithmetic. However, what computational thinking really means remains speculative. While wonders, discussions and debates will likely continue, this article provides some analysis aimed to further the understanding of the notion. It argues that computational thinking is likely a hybrid thinking paradigm that must accommodate different thinking modes in terms of the way each would influence what we do in computation. Furthermore, the article makes an attempt to define computational thinking and connect the (potential) thinking elements to the known thinking paradigms. Finally, the author discusses some implications of the analysis."
Computer programming as an educational tool in the English classroom a preliminary study,"Moreno-León, J. and Robles, Gregorio",2015,Sin Valor
Computer Science Instruction and Academic Outcomes in Other Subjects,"Crasto, Ethan and Mirakhur, Zitsi",2021,"Participation in computer science (CS) education is growing across the K-12 spectrum. This enthusiasm for CS is driven, in part, by the belief that through CS instruction, students will learn computational thinking (CT) skills, which can also be applied to domains outside CS. We add to this literature by examining whether or not there is a relationship between receiving CS instruction and students' academic performance in non-CS subject areas. Using a fixed-effects regression methodology with course-taking records from New York City, we examine the association between CS instruction and course grades for high school students. We find small positive associations between CS instruction and end-of-year grades in English, Math, Science, and Social Studies."
Computer Science Meets Social Studies: Embedding CS in the Study of Locally Grounded Civic Issues,"Van Wart, Sarah Jane",2015,"Data science is an emerging 21st century literacy that promises to support learning in a wide variety of disciplines, from science, to social science, to the humanities. It also provides an engaging context in which to learn computational thinking skills in existing classroom contexts. For my dissertation research, I will explore whether and how data science can support inquiry-based learning in social studies. I conjecture that data science could provide students with an opportunity to use computational thinking to better understand their social world, while also allowing students to draw from and make sense of their own experiences. I plan to explore this idea by enhancing and evaluating a software tool, Local Ground, and creating a curriculum that helps young people identify and describe salient characteristics of their lived realities, moving from unstructured to structured data representations (e.g., photos to tags to databases). This process may generate a rich, motivating data source to explore subsequent ideas in computational thinking and social science."
Computer Science Unplugged for Developing Computational Thinking and Mathematical Thinking,"Nakamura, Takayasu and Kawasaki, Tetsushi",2019,Sin Valor
Computing and Gestures in High School Biology Education,"Musaeus, Line Have and Musaeus, Peter",2021,"This video-study explored the types of gestures used by students as they engage in learning activities of computational thinking and modeling in Biology. Participants were twenty-eight students (twenty female, eight male) randomly sampled from five different High School Biology classes. Students were given the educational task of modeling protein synthesis in NetLogo. The design was a concurrent mixed-methods study. The study was situated in a constructivist and embodied cognitive perspective. The objective of the study was to develop a taxonomy table of gestures versus elements of computational thinking. Results showed a significant difference in the distribution of gestures across five concepts of computational thinking. Students used gestures adaptively in order to learn concepts of computational thinking. The findings indicate that students benefit from participating in a learning community where gesturing is seen as an important means of engaging with computing. The taxonomy is a first step towards linking computational thinking concepts with gestures as a means of better understanding student's engagement with computing."
Computing creativity: divergence in computational thinking,"Bennett, Vicki E. and Koh, KyuHan and Repenning, Alexander",2013,"Conventionally creativity is often conceived as an aptitude to be discovered in an individual that cannot be mathematically measured. But the concept of creative thinking as a divergence from a standard ""norm"" is used in creativity research for the purpose of assessing creativity and is also linked to non-traditional or creative processes that lead to unique and divergent artifacts [1,2]. Using Computational Thinking Pattern Analysis (CTPA)[3], the divergence between implemented computational thinking patterns in a student-created game, and that game's tutorial ""norm"" is calculated as an indicator of creativity. Through a case study of one teacher using three unique learning conditions, CTPA's computed divergence is explored as a valid measurement of creativity in these student games."
Computing Education for Primary Schooling: Developing Teacher Knowledge,"Yadav, Aman",2023,"The push for computer science education to primary schooling requires training teachers and developing their knowledge to teach computing. However, computing goals within primary schooling need to move away from teaching coding to curricular and pedagogical goals teachers have. In this talk, Dr. Aman Yadav will discuss how to support teachers to see the relevance of computing to their core curriculum and how teachers take advantage of computation to support their core instruction. Using classroom examples from his work with elementary teachers, he will share evidence-based ways to develop teachers’ competencies and skills to integrate computational thinking in their classrooms. Dr. Yadav will also discuss how teachers use computational thinking as a way to explicitly teach metacognitive strategies to their students and improve their core learning outcomes."
Computing Effect Sizes of a Science-first-then-didactics Computational Thinking Module for Preservice Elementary School Teachers,"Repenning, Alexander and Lamprou, Anna and Basawapatna, Ashok",2021,"Recently, Computer Science education in Switzerland reached a critical milestone. In the past two years the School of Education of FHNW, one of Switzerland's largest schools of education, introduced a mandatory Computer Science education module, comprised of a two-course sequence for its students: pre-service primary-level schoolteachers. Due to its design and audience, this mandatory module introduces a variety of unique challenges. The module is taken by a majority of female students (75%), many with no prior experience and/or interest in programming and Computer Science. The module starts with a course focused on learning Computational Thinking, referred to as FW, followed by a course focused on teaching Computational Thinking, referred to as FD. Since 2017, 1000 pre-service primary-level teachers have been trained in Computer Science education through this module. This curricula initiative computes the effect sizes from teaching two complete iterations of the ""FW then FD"" design. It is based on attitude assessment data collected at four points: Pre-FW, Post-FW, Pre-FD, Post-FD, during the first two years of this mandatory module. Our research indicates that, by course's end, pre-service teachers are mostly confident in their ability to program and think computationally."
Computing for the Critters: Exploring Computational Thinking of Children in an Informal Learning Setting,"Ehsan, Hoda and Ohland, Carson and Dandridge, Tikyna and Cardella, Monica",2018,Sin Valor
"COMPUTING IN SCHOOLSComputer science, computational thinking, programming, coding: the anomalies of transitivity in K-12 computer science education","Armoni, Michal",2016,Sin Valor
Computing in Support of Disciplinary Learning,"Silvia, Devin W. and Caballero, Marcos D. and Finzell, Thomas and Frisbie, Rachel and Hamerski, Patti and Bolger, Emily and Castle, Sarah and Roca, Rachel and Tourangeau, Paige",2023,"Few would argue that modern careers across a wide range of disciplines can be performed in the absence of computing in one form or another. As such, it is becoming increasingly important for our education system to appropriately prepare students for the modern world by integrating computing and computational thinking into how students learn disciplinary content (i.e. disciplines outside of computer science). However, how to best perform this integration is not yet known, nor is there likely to be one ''best'' method. In this session, we will facilitate a discussion of the variety of ways in which post-secondary institutions are actively using computing to support disciplinary learning by highlighting examples while also considering mechanisms not yet explored. We invite anyone who wants to learn more about current efforts, share their own experiences, and contribute ideas for future endeavors. In an effort to maximize the diversity of perspectives in this discussion, we've included discussion leaders who span a variety of roles within curriculum development and classroom instruction and encourage participants from all levels and backgrounds."
Computing in the Classroom: A Workshop for Teachers to Infuse Computational Thinking into K-12 Classrooms (Abstract Only),"Kurt-Peker, Yesem and Ray, Lydia and Hodhod, Rania and Khan, Shamim",2015,"Computational thinking is an essential skill for everyone in today's world. It is a problem solving skill that incorporates problem decomposition, pattern recognition, abstraction, logical and algorithmic thinking. Yet the exposure of students in K-12 curriculum to computational thinking is minimal in most schools. There are various opportunities for computational thinking to be included in almost all content areas in the curriculum. In order for this to be realized, teachers need introduction to the concept of computational thinking and they need to be equipped with tools to provide practices in this concept in the classrooms. Inspired by this idea, we organized a workshop in June 2014 to involve all teachers from all grade levels and all disciplines where we introduced them to the concept of computational thinking and taught them tools such as Scratch, Google Sites, HTML, and AppInventor. The workshop attracted 34 teachers mostly from the Muscogee County School District in Georgia. In this poster we present our recruitment strategy, methodology of our workshop, and results from our pre and post surveys. In particular, we present the influence of our workshop on teachers' views of computational thinking. We also share highlights from the projects that the teachers worked on during the workshop and presented at the end."
Computing in the Irish School Curriculum: What Can We Learn from a Fifty-Year Adventure?,"Oldham, Elizabeth",2022,"This presentation examines the development of computing courses in the Irish school curriculum over a period of some fifty years. It aims to highlight three aspects: the varying rationales (for example, educational or economic) driving the work at different times; the types of course that were proposed and (in some cases) implemented; and the successes and failures experienced along the way. The third aspect, in particular, may offer lessons for other countries seeking to implement computing courses in schools. To frame the analysis, a brief chronological outline is provided here. In the 1970s, the state Department of Education initially offered some programming courses for teachers; a voluntary body, the Computers in Education Society of Ireland, advocated for the introduction of ""Computer Studies"" as a school subject [1]. Official provision came in the 1980s, with the introduction first of a Computer Studies option in the Mathematics courses for the senior cycle of post-primary education (US grades 11-12), and then of a free-standing subject in the junior cycle [1,2]. However, the increasing availability of educational software, applications packages, and internet access led to a switch in the focus of official policy in the 1990s - from computing to computer applications and the use of IT in teaching and learning - and the computing courses faded out [2]. Following the (re)-emergence of interest in computing / computational thinking in several countries in this century [2,3,4,5], advocacy for suitable courses again grew and the policy thrust changed. Provision is now made at primary and post-primary level, notably with a free-standing Computer Science course figuring in the senior cycle curriculum [2,5]. The author has been involved in advocacy and support for computing in schools throughout the fifty-year period. Thus, she offers a participant's analysis of the motivations, the successes and failures, and the lessons that can be learnt from the Irish story."
"Computing with CORGIS: Diverse, Real-world Datasets for Introductory Computing","Bart, Austin Cory and Whitcomb, Ryan and Kafura, Dennis and Shaffer, Clifford A. and Tilevich, Eli",2017,"To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits."
"Computing with CORGIS: Diverse, Real-world Datasets for Introductory Computing","Bart, Austin Cory and Whitcomb, Ryan and Kafura, Dennis and Shaffer, Clifford A. and Tilevich, Eli",2017,"To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits."
Conceptions and Misconceptions about Computational Thinking among Italian Primary School Teachers,"Corradini, Isabella and Lodi, Michael and Nardelli, Enrico",2017,"Many advanced countries are recognizing more and more the importance of teaching computing, in some cases even as early as in primary school. ""Computational thinking"" is the term often used to denote the conceptual core of computer science or ""the way a computer scientist thinks"", as Wing put it. Such term - given also the lack of a widely accepted definition - has become a ""buzzword"" meaning different things to different people. We investigated the Italian primary school teachers' conceptions about computational thinking by analyzing the results of a survey (N=972) conducted in the context of ""Programma il Futuro"" project. Teachers have been asked to provide a definition of computational thinking and to answer three additional related closed-ended questions. The analysis shows that, while almost half of teachers (43.4%) have included in their definitions some fundamental elements of computational thinking, very few (10.8%) have been able to provide an acceptably complete definition. On a more positive note, the majority is aware that computational thinking is not characterized by coding or by the use of information technology."
Conceptual Learning through Accessible Play: Project Torino and Computational Thinking for Blind Children in India,"India, Gesu and Ramakrishna, Geetha and Pal, Joyojeet and Swaminathan, Manohar",2020,"Project Torino is a physical programming environment designed for teaching computational thinking (CT) to school children in the UK, regardless of the level of vision. We introduced Project Torino to children in three schools for the blind in Bangalore, India as a toy for playing with songs, rhymes, and stories. We present the results of 103 semi-structured play sessions spread over three months with 12 children (2 girls, 10 boys) with diverse backgrounds. We found that children progressed from playing with pre-connected examples, to making changes, to actively participating in what items are played. Engaging the children in conversation while they played, we established that the teams had grasped three basic concepts of computational thinking--flow of control, variables, and loops, without any explicit instructions towards learning them. We propose that play-based approaches can be successfully used with low resource overhead to introduce fundamental concepts of CT."
Confidence is the Key: Unlocking Predictive Factors of Latinx Elementary Students on a Computational Thinking Measure,"Garcia, Leiny Y. and Parker, Miranda C. and Ojeda-Ramirez, Santiago and Warschauer, Mark",2023,"As computing education begins to grow in K-12 classrooms, it is increasingly important to understand the relationships between a student's coding attitudes and computing outcomes. While work has been done at the undergraduate and high school level, less is known about elementary students, and even less about Latinx students. We sought to explore the connections between Latinx elementary students' coding attitudes and computational thinking (CT) skills after participating in a year-long, remote computing curriculum in a public school district in Southern California. We collected validated measures on coding attitudes and CT skills for 164 fourth-grade students. We used structural equation modeling to analyze the relationship between the coding attitude constructs (i.e., confidence, utility, perception of coders, social influences, and interest) and scores on a CT assessment while controlling for demographic factors (i.e., gender, English language fluency, free or reduced lunch status, reading and math standardized test scores). In a model demonstrating acceptable fit, only math scores were a significant predictor of CT scores and coding confidence. Confidence was found to be significantly associated with the other attitude constructs except for perception of coders. Our results indicate that confidence plays a prominent role in student computing learning, especially at a young age. Efforts to better support Latinx students in computer science should include strategies that address students' coding confidence, such as developing positive perceptions of a student's learning process (e.g., failures as learning opportunities) in specific coding skills and practices (e.g., tinkering, debugging)."
Connecting undergraduate programs to high school students: teacher workshops on computational thinking and computer science,"Morreale, Patricia and Joiner, David and Chang, George",2010,"The high school preparation of future computer science undergraduates can be varied and depends strongly on the experiences and subject knowledge of their high school teachers. In an effort to connect undergraduate computer science programs to high schools for future student success in college, a public comprehensive university is hosting high school teacher workshops to help teachers enhance their teaching effectiveness. This has established a pathway from the university to the high school. Pre- and post- workshop surveys show that these teacher workshops have changed the perceptions high school teachers had regarding careers in computer science."
Considerations and Technical Pitfalls for Teaching Computational Thinking with BBC micro:bit,"Tyr\'{e}n, Markus and Carlborg, Niklas and Heath, Carl and Eriksson, Eva",2018,"As many countries are about to make changes in the primary school curriculum by introducing computational thinking, new methods and support for teachers is needed in order help them develop and adapt teaching materials. In this paper, technical pitfalls and other considerations for designing teaching materials with the microcontroller BBC micro:bit are presented. The results are based on a series of 21 workshops in different parts of Sweden aiming to investigate what is important to consider when designing teaching materials with the BBC micro:bit for training Swedish primary schools students computational thinking skills. The contribution of the paper are a number of identified considerations that can be helpful for teachers when designing exercises and planning for teaching computational thinking with the BBC micro:bit."
Constructing Behavioral Representation of Computational Thinking based on Event Graph: A new approach for learning analytics,"Shen, Wenyao and Zhan, Zehui and Li, Chen and Chen, Han and Shen, Ranhao",2022,"At present, the mainstream means of measuring and assessing computational thinking are test papers and scales, which enable us to measure the level of students' computational thinking as a whole, but fail to represent the inner laws and thinking processes, thus cause difficulty on providing appropriate guidance. In this study, data embedding technology was adopted to collect data on students' operational behavior in answering questions, and learning analytic techniques (i.e., semantic analysis, lagged sequence analysis, etc.) were used to evaluate computational thinking. Students with higher- and lower-level of computational thinking were compared on their behavioral patterns in a seriel events in the computational thinking training process. An event graph was constructed to represent the computational thinking behaviors based on logical event relationships. This study provides insights on a novel approach of analyzing computational thinking from the procedural perspective, which could be helpful for understanding how the thinking path is structured during problem-solving process."
Construction and Application of a Computational Thinking Assessment Framework from the Perspective of the Iceberg Model,"Zhou, Xuchen and Zhang, Wei and Wang, Shengming and Chen, Hao",2023,Sin Valor
Construction and Practice of Computational Thinking Structural Framework with Sternberg's Intellectual Education Theory,"Zhang, Wei and Song, Lingling and Huang, Xujun and Wang, Yi",2024,"Cultivating students' computational thinking skills is one of the important teaching goals of college computer courses, and constructing a scientific and effective structural framework for computational thinking is the basis for implementing computational thinking training. To this end, based on Sternberg's intelligence education theory, combined with software development and programming knowledge, a structural framework of computational thinking was constructed. Subsequently, a project-based teaching activity based on this framework to cultivate students' computational thinking skills was carried out in the college computer programming course ""Software Development Technology"". By measuring students' computational thinking skills before and after the activity, it was verified that the project-based teaching model based on the proposed framework had a significant effect on improving students' computational thinking skills. By constructing a structural framework of computational thinking that integrates the characteristics of disciplines, and taking programming teaching as a carrier to implement the cultivation of computational thinking skills, it can provide a new way for computer educators to cultivate students' computational thinking skills."
Construction and Validation of an Online Teaching Model for the Development of Computational Thinking: Take high school information technology course as an example,"Yang, Hairu and Li, Qiuhong and Dong, Jiamin and Bai, Xinye and Cai, Minghan and Xu, Xiang",2023,"In the information age, online teaching will gradually become an inevitable trend in the era of modern education informatization. Online teaching has the advantages of easy operation and abundant resources, but it has higher requirements for the design of teaching mode and teaching content. Computational thinking, as the core idea of IT teaching, emphasizes the long-term development and deep development of IT learning, which has great practical significance for students to improve themselves and cultivate their ability development. So in the online teaching of high school IT courses, how to build an online teaching mode suitable for students' development and achieve the purpose of effectively cultivating students' computational thinking? This study combines specific teaching, guided by constructivist theory, nearest developmental zone theory, situational cognition and other theories, and uses literature research method, questionnaire survey method, quasi-experimental research method and other research methods to conduct a study on the construction and validation of online teaching model of high school information technology geared to the cultivation of computational thinking. The results of the study showed that the proposed teaching model was found to have a significant promotion effect on students' academic performance and computational thinking through the examination of students' academic performance and computational thinking."
Construction of Evaluation Index System for College Students' Text Programming Computational Thinking,"Zhang, Wei and Wang, Jihan and Zeng, Xinyao",2022,Sin Valor
Container terminal logistics scheduling and decision-making within the conceptual framework of computational thinking,"Li, Bin",2015,Sin Valor
Conversational programming in action,"Repenning, Alexander",2011,Sin Valor
"Cooperative Thinking, or: Computational Thinking Meets Agile","Missiroli, Marcello and Russo, Daniel and Ciancarini, Paolo",2017,Sin Valor
Cooperative Thinking: Analyzing a new framework for software engineering education (Extended abstract),"Ciancarini, Paolo and Russo, Daniel and Missiroli, Marcello",2023,Sin Valor
CoTinker - A Toolkit for Supporting Computational Thinking and Collaboration in High School Education.,"Musaeus, Line Have and Petersen, Marianne Graves and Klokmose, Clemens Nylandsted and Iversen, Ole Sejer",2022,"Computational thinking (CT) has been recognized as an important part of K-12 education in many countries and is often described in term relating to computer science both in concepts and context. However, the unique practice of computer scientists collaborating on problem solving is often overlooked in CT education in high school. We believe that collaboration is a key aspect of modern computing, and propose to integrate collaborative CT activities into existing high school education. The aim is to prepare students better for exploring computational approaches to high school disciplines as they are practiced in the professional world. Our research question is: how can we design tools for supporting students' collaboration while teaching CT in high school? A new computational environment, CoTinker, has been developed. The tool uses a cross-device approach and foster students' verbal communication and collaboration in groups. The tool was tested in a Biology class. Students' computational thinking (CT) was assessed through learning activities and students' communication was analyzed by audio recordings, of students, imbedded in CoTinker and by focus group interviews with students. Preliminary findings showed students being able to collaborate and solve CT tasks in groups independent of teacher or researchers. Results also indicated that students were able to use, navigate, and critically reflect upon the CoTinker environment."
CoTinker: Designing a Cross-device Collaboration Tool to Support Computational Thinking in Remote Group Work in High School Biology,"Musaeus, Line Have and S\o{}rensen, Marie-Louise Stisen Kjerstein and Palfi, Blanka S\'{a}ra and Iversen, Ole Sejer and Klokmose, Clemens Nylandsted and Petersen, Marianne Graves",2022,"Providing opportunities for students to collaborate while developing their computational thinking (CT) is a challenge, particularly for remote collaboration. To address this issue, an interdisciplinary team derived a set of design rationales (integration of learning activities, scaffolding progression, cross-device interaction and supporting collaboration in all activities) and developed CoTinker: a collaborative, cross-device tool designed to foster equity in the form of equal participation amongst students. Through a pilot study, we investigated high-school students (n=15), working with CT activities supported by CoTinker, in the form of a computer model of a biological phenomenon. We found that CoTinker was able to support students’ remote collaborative work and participation equity. Furthermore, students were able to take advantage of cross-device interaction using their laptop and mobile phones in concert. We conclude that the design rationales and CoTinker design can serve as useful starting points for enabling equitable collaboration amongst students working with CT."
Couplets: Helping Elementary School Students Recognize Structure in Code (Abstract Only),"Touretzky, David S. and Gardner-McCune, Christina and Isaac, Joseph and Tomokiyo, Laura M.",2018,"We believe teaching elementary school students to reason about programs is as important as teaching them to write programs. To facilitate development of this skill in young children one must choose a developmentally appropriate domain. Microsoft's Kodu Game Lab is a pattern-matching rule-based language whose semantics is significantly different than Scratch or Python. We chose Kodu because one can write non-trivial programs in two to four lines, and analyzing these programs is within the abilities of a typical 8 year old. Reasoning about programs requires students to understand the structure of code. The approach we're advocating is analogous to sentence diagramming, where one starts with a sequence of words and develops a representation of their syntactic and semantic relationships. One can similarly analyze Kodu programs by characterizing rules and recognizing relationships between rules. In this poster we describe ""couplets"", an analysis technique that reveals the presence within a program of an important Kodu design pattern called Pursue and Consume. Using this technique leads to accurate predictions about program behavior, and uncovers bugs if the pattern is not fully realized. As part of a study of 40 third graders who were learning Kodu, we provided brief instruction in the couplets technique. We found that they were able to apply couplets to 3-4 line programs and answer prediction questions with a roughly 85% success rate. Our results demonstrate that elementary school children can learn to reason abstractly about programs if given the right mental tools."
Creating an Appropriate Computer Science and Computational Thinking Graduate Curriculum for K–12 Teachers: Context and Initial Results,"Herbert-Berger, Katherine G. and Hagiwara, Sumi and Rogacki, Elizabeth M. and Marlowe, Thomas J.",2022,Sin Valor
Creating Art with JavaScript: A Bridget Riley Inspired Coding Lesson,"Dion, Lisa and Neumann, Maureen D.",2024,"The purpose of this poster presentation is to demonstrate how we can bring art into computational thinking and computer programming spaces. Op-Artist Bridget Riley used geometrical shapes and patterns to express motion across the canvas. The example of Bridget Riley's art inspired U.S. middle and high school students to express their own artistic motions in unplugged and computer coded learning activities.This interdisciplinary lesson began with introducing Bridget Riley's artwork and how she arranged different triangles to create the illusion of movement [1]. Students then recreated one of her works by drawing triangles on graph paper with pencils, mimicking Riley's black-and-white compositions. After this unplugged activity, students transferred this understanding of drawing different triangles to the computer using JavaScript. Students used the gridlines behind their drawn triangles to map the pixel coordinates on a computer screen. Students used commands such as fill to set the color of the triangles and p5js.com's built-in triangle command to draw the triangles by specifying the (x, y) coordinates of each of the three vertices on the computer screen. Students then customized and expanded their code to express their interests (e.g., by picking different colors or effects) and to make it interactive for the user (e.g., by having the triangles' top vertices move left and right with the cursor of the screen). By the end of the lesson, each student created different works of Bridget Riley inspired art through their written code."
Creating Tutorial Materials as Lecture Supplements by Integrating Drawing Tablet and Video Capturing/Sharing,"Wang, Chen-Wei",2020,"We report the experience of adopting an innovative technique for creating tutorial videos which complement lectures and facilitate students' learning. Our technique relies on: 1) preparing starter pages consisting of code fragments or writings/figures on a drawing tablet; 2) illustrating complex ideas on the drawing tablet; 3) recording all computer desktop activities (e.g., development of code on a programming IDE, illustration on the drawing tablet); and 4) sharing the recorded tutorial videos with students online. Our technique has been adopted in creating tutorial series for four Computer Science and Engineering courses, ranging from the first year to the third year. Analytics of these online tutorial videos is presented to show the average amount of time which each registered student spent on watching them. Course evaluation results indicate that our technique is perceived as effective for achieving the course learning outcomes. Comparison of students' performance on complex topics (arrays and loops) also indicates a positive impact of our approach."
Critical computational empowerment: Engaging youth as shapers of the digital future,"Tissenbaum, Mike and Sheldon, Josh and Seop, Lissa and Lee, Clifford H. and Lao, Natalie",2017,Sin Valor
Cross-grade Comparison of Computational Thinking in Young Children Using Normalized Unplugged Assessment Scores,"Relkin, Emily",2022,"The acquisition of Computational Thinking (CT) skills is an essential goal of Computer Science (CS) education. Assessment of CT is critical for CS teaching and research. However, there is a paucity of developmentally appropriate CT measures designed for early elementary school children. Among existing measures, there has been little attention paid to methods for comparing CT skills across grades. In the present study, I examined the use of a normalized scoring system for comparing performance on three grade-specific versions of the TechCheck CT assessment. TechCheck is a brief, unplugged, multiple-choice instrument for children 5-9 years of age that probes six domains of CT. Baseline raw score TechCheck data from 596 students showed normal distributions with significant differences in means between grades. I calculated Z-scores and percentile ranks by grade. This normalization allowed for the comparison of CT skills within and across grades in the context of a pilot longitudinal study of the CAL-ScratchJr coding curriculum. Application of the normative scoring system showed a difference in the outcome of only 4 percentile ranks between first and second graders while raw scores indicated an improbable 45% difference. This study demonstrates that normalized TechCheck scores that take into account differences in the score distributions across grades can improve the measurement of CT skills in the context of early childhood CS educational interventions."
Cross-lagged Associations between Cognitive Performance and Attitudinal Beliefs of Computational Thinking: A Preliminary Study,"Zhang, Shuhan and Wong, Gary K. W.",2022,Sin Valor
CS Concepts and Contextual Factors in Integrated Computing Activities in U.S. Schools,"Rahimi, Masoumeh and Margulieux, Lauren E. and Anderson, Erin",2025,"Integrated computing uses computing tools and concepts to support learning in other disciplines while giving all students opportunities to experience computer science. Integrated computing is often motivated as a way to introduce computing to students in a low-stakes environment, reducing barriers to learning computer science, often especially for underrepresented groups. This study explored integrated computing activities implemented in US schools to examine which programming and CT concepts they teach and whether those concepts differed across contexts. We gathered data on 262 integrated computing activities from in-service K-12 teachers and 20 contextual factors related to the classroom, the teacher, and the school. Our analysis revealed that programming and CT concepts were inversely related to five contextual factors, such that factors predicting more CT concepts also predicted fewer programming concepts. These factors reflected school resources, such that wealthier schools used activities with more CT concepts and fewer programming concepts. In addition, factors related to underrepresented groups often related to fewer concepts being taught in activities. School racial composition was the only factor of the 20 that had a relationship with both types of concepts in the same direction-students from underrepresented groups used activities with fewer CT and programming concepts. Our findings suggest that, although integrated computing can potentially introduce computing to a broader audience, we must evaluate what these activities are teaching and to whom. Another primary contribution of this work is an open-access dataset about integrated computing activities, the concepts that they teach, and the contextual factors around their use."
CS for ALL: Introducing Computational Thinking with Hands-On Experience in College,"Jung, Andrew and Park, Jinsook and Ahn, Andrew and Yun, Mira",2017,Sin Valor
CS1 students' understanding of computational thinking concepts,"Qualls, Jake A. and Grant, Michael M. and Sherrell, Linda B.",2011,"This paper presents a small, multi-method case study conducted throughout the spring 2010 semester of CS1: Introduction to Computer Science at the University of Memphis. This study explored students' comprehension of three Computational Thinking concepts: algorithms, abstraction and efficiency. Results indicate that students understand and value the concept of the algorithm but are only beginning to understanding abstraction. In addition, student observations about efficiency represent the true focus of Computational Thinking, i.e., applying computer science concepts to other fields of study. Implications for teaching CS1 and for future research are also considered."
cs4fn and computational thinking unplugged,"Curzon, Paul",2013," 'Computer Science for Fun' (cs4fn) is a public engagement project aiming to both enthuse school students about inter-disciplinary computer science and support computing teachers. It started in 2005, with cs4fn resources now widely used in UK schools as well as internationally. We overview the approach cs4fn has used to inspire students and teachers. In particular we look at how not only subject knowledge but also computational thinking ideas can be taught in an integrated way using cs4fn 'unplugged' activities embedded in stories. We give two illustrative examples, one based on the problem of helping people with locked-in syndrome communicate, the second based around magic tricks."
CS4Impact: measuring computational thinking concepts present in CS4HS participant lesson plans,"Bort, Heather and Brylow, Dennis",2013,"In this paper, we aim to directly measure a CS4HS workshop's participating teachers' ability to synthesize CSTA computational thinking core concepts into actionable lesson plans for courses in their current teaching repertoire. Participants were expected to present a lesson plan on the final day of the workshop, highlighting the integration of their classroom curriculum with computing and computational thinking skills. We present our evaluation rubric, used to rate the teachers effective use of the computational thinking core concepts in their lesson plans, and describe how our method of evaluation may more accurately gauge the overall impact that CS4HS workshops have on their participants."
CSpathshala: bringing computational thinking to schools,"Shah, Vipul",2019,Sin Valor
CT 2.0,"Tedre, Matti and Denning, Peter and Toivonen, Tapani",2021,"CT has been the central rallying point for K-12 computing education at least since the early 2010s. Many teachers, school administrators, and policymakers have joined the movement. A consensus has emerged over the conceptual landscape of CT. Meanwhile, machine learning (ML) has triggered some major changes in many sectors of computing. Children’s lives today are full of ML-driven services—take TikTok’s spot-on recommendations, social media’s automatic tagging of their friends in photos, and targeted personalized advertisement, just to mention a few. Children cannot learn to think about and design ML technology from learning classical programming. ML is poised to upend the CT consensus. Look at some of the changes ML has already triggered in computing. It has enabled greatly improved speech and image recognition, powerful recommendations on streaming services, autonomous navigation of cars, super-human performance in board and computer games, and even alternative-reality “deepfake” videos. Most advances in topics above are due to hardware evolution to non-traditional, special purpose architectures, new algorithms such as convolutional neural networks (CNN) or generative adversarial networks (GAN), and new objectives and measures of success. We will show that several key CT concepts, including debugging, problem-solving workflow, correctness, and notional machines, are insufficient for ML and need to be extended. Moreover, ML introduces new concepts including neural networks, curating and training data, and reinforcement learning that are not part of CT at all. All these changes challenge the traditional views related to teaching CT in K–12. ML is not the only emerging technology appearing in the computing landscape. Quantum computing and biological computing are not far behind. We need to start rethinking how CT must evolve to anticipate and meet these challenges."
CT Readiness for All: Studying a Framework for Supporting Schoolwide Computational Thinking Integration Across Elementary Curricula,"Sherwood, Heather and Moeller, Babette and Fancsali, Cheri",2024,"Schools throughout the United States are engaging in efforts to integrate computational thinking (CT) across various elementary curricula. However, there is very little guidance for effective approaches to integrating CT consistently and cohesively school wide. CT Readiness for All is a two-year research project that is investigating a CT framework and self-assessment tool developed to articulate indicators associated with successful school-wide integration across elementary curricula. Data sources include focus group interviews and surveys with teachers. Although the project is still in progress, early analysis have resulted in three key findings: (a) students were able to make cross-curricular connections using CT as a problem-solving process; (b) finding time within the school day to focus on CT is challenging; and (c) administrators need to take an active role in setting the vision and definition of CT to support school-wide CT efforts."
CT-Blocks: Learning Computational Thinking by Snapping Blocks,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
CT4All: Enhancing Computational Thinking Skills in Adolescents with Autism Spectrum Disorders,"Munoz, Roberto and Schumacher Barcelos, Thiago and Villarroel, Rodolfo",2018,Sin Valor
CTArcade: learning computational thinking while training virtual characters through game play,"Lee, Tak Yeon and Mauriello, Matthew Louis and Ingraham, John and Sopan, Awalin and Ahn, June and Bederson, Benjamin B.",2012,"In this paper we describe CTArcade, a web application framework that seeks to engage users through game play resulting in the improvement of computational thinking (CT) skills. Our formative study indicates that CT skills are employed when children are asked to define strategies of common games such as Connect Four. In CTArcade, users can train their own virtual characters while playing games with it. Trained characters then play matches against other virtual characters. Based on reviewing the matches played, users can improve their game character. A basic usability evaluation was performed on the system, which helped to define plans for improving CTArcade and assessing its design goals."
CTST: Development and Validation of an Sequence Ability in Computational Thinking in Early Childhood Education,"An, Min",2022,"The purpose of this study is to develop a set of sequence test called CTST, and to determine whether it can be used to assess Sequencing Ability in computational thinking (CT). The content of the test is adapted from Baron-Cohen's picture story. We selected 5-7-year-old students (N=1234) from seven public schools in China for the test. The difficulty and distinguishing degree of each question were tested. Combined with the result of exploratory factor analysis (EFA) and confirmatory factor analysis (CFA), it is concluded that the sequence tests questions was composed of thirteen items, including three factors (amount, event and machine). Among them, four of the items that did not meet the standard were deleted. Our study also explored the differences of gender and age between 5-7-year-old students. The results show that the Sequencing Ability of girls is stronger than that of boys, and 7-year-old children may be the key period for the development of sequential ability. Generally speaking, the sequential test has good psychometric characteristics and can distinguish children with different CT sequencing Ability. We also discussed the limitations and direction of future work."
CTWINS: improving Computational Thinking confidence in educators through paired activities,"Millwood, Richard and Strong, Glenn and Bresnihan, Nina and Cowan, Pamela",2016,The CTwins project is a cross-border initiative targeting teachers of subjects other than Computing in the Republic of Ireland and Northern Ireland who want to use technology in the classroom but lack the confidence to do so. It aims to develop confidence in educators' capacity to use computational thinking through a playful and supportive introduction to computer programming. This will be done through paired learning exercises with an output intended to be aesthetically pleasing and fulfilling. Learning will be supported by an online community of practice.The project will be evaluated for its effect on building the confidence in participating educators and the design and resources will be created as a open educational resource.
Cultivating Computational Thinking Among Students Of Liberal Art In Basic Computer Courses,"Chen, Li and Xia, Jiaoxiong and Tao, Jie",2018,Sin Valor
Cultivating Computational Thinking through Game-Based Learning,"Adam, Kelli and Lightfoot, Robert and Chowdhury, Mahjabin and Phillip Donaldson, Jonan",2023,Sin Valor
Cultural appropriation of computational thinking acquisition research: seeding fields of diversity,"de Souza, Clarisse S. and Salgado, Luciana C. and Leit\~{a}o, Carla F. and Serra, Martha M.",2014,"In this paper, we report the developments of a Computational Thinking Acquisition project carried out in pilot Brazilian schools. The project is a branch of a successful, more than a decade old project in the USA. We present and discuss the factors that led to specific cultural appropriation and diversification of the North American experience. In particular, we explain the kind of technology that has been developed in South America compared to the one developed and used in the USA, and propose that the lessons we have learned in the project's short history in Brazil can already seed the reflection of IT and Education researchers."
Current Situation and Trend of Computational Thinking Research of Primary School Students in Recent Ten Years in China: An Analysis Based on Visualization Software,"Chen, MingQi and Xu, JiHong and Wang, YiChuan",2024,"With the continuous development of information technology, computational thinking has become a necessary quality for students to adapt to the era of artificial intelligence in the 21st century. After the release of the Information Technology Curriculum Standards for Compulsory Education (2022 edition), computational thinking has rapidly attracted wide attention. This paper adopts the bibliometrics method to study the core journals and dissertations on the training of primary school students' computational thinking collected by CNKI (China National Knowledge Network) from 2012 to 2023, and analyzes the current situation and trend of the training of primary school students' computational thinking from the aspects of the number of literatures, sources, research hotspots and frontiers, combined with Citespace software. It provides useful reference for related researchers."
Current status and enhancement strategies for developing computational thinking of high school students in blended learning --Take the high school information technology curriculum as an example,"Yang, Hairu and Dong, Jiamin and Li, Qiuhong and Shao, Yanru and Liu, Yuqi and Xu, Fei",2024,"In the information age, computational thinking has become a basic quality necessary for learners. How to effectively improve the teaching effect and cultivate students' computational thinking ability has become the focus of most scholars. With the extensive development of ""Internet+"", the traditional face-to-face offline teaching mode has been unable to meet the diversified and personalized learning needs of students, and blended learning has become a brand-new teaching mode, and studies have shown that blended learning can effectively improve the computational thinking ability of learners. Therefore, this study analyzes and discusses the current situation of high school students' computational thinking ability in blended learning, which helps us to deeply understand the current situation of high school students' blended learning, think about how to promote high school students' blended learning, and improve high school students' computational thinking ability, so as to promote the quality of education and teaching. In this study, the literature research method, interview analysis method and questionnaire survey method were used to investigate the current situation of blended teaching activities on the cultivation of computational thinking with 138 freshmen, sophomores and juniors in a high school in western China. The results found that the overall situation of computational thinking level in blended learning of students in a high school in western China was moderate. This was characterized by better levels of cooperative and critical thinking skills, and poorer levels of creativity, algorithmic thinking and problem solving skills. By describing the current situation, it can be seen that there are some problems in the level of computational thinking ability of high school students in blended learning, based on this, this study, based on the specific research data, combined with the results of the interviews, puts forward some suggestions for improving the cultivation of high school students' computational thinking ability in blended learning in a high school in western China in three aspects."
Current trends in robotics in education and computational thinking,"Jos\'{e} Garc\'{\i}a-Pe\~{n}alvo, Francisco and Conde, Miguel \'{A}ngel and Gon\c{c}alves, Jos\'{e} and Lima, Jos\'{e}",2021,"Computational thinking-related issues have had a specific track on TEEM Conference since 2016. This is the sixth edition of this track within the 2021 TEEM Conference edition. This year the papers are centered on programming and robotics, but the artificial intelligence topics increase their presence in the track."
Curriculum Design for 'Explorations in Computing' (a New General Education Course at USC) (Abstract Only),"Raghavachary, Saty",2017,"Starting Fall 2016, the CS department at USC has begun offering CS100: Explorations in Computing, a brand new General Education (GE) course. The course is only open to non-CS majors (since our CS students go through a CS-specific introductory track that encompasses the CS100 material). The class has 24 students, from a variety of disciplines such as Communications, Business Administration and Theatrical Arts. The course presents a broad overview of computational/algorithmic problem-solving techniques that form the basis of today's digital society. It provides students, a strong foundation for understanding how everyday activities such as web searching, communicating via social media, playing games, booking a ride, etc., work ""behind the scenes"". The course's intent is to promote computational thinking, as put forth by Jeannette Wing and others. In designing the course, the following aspects were kept in mind: the course is formulated as a GE, for a non-CS audience - so it cannot be heavy on coding; the topics need to involve some form of computational/algorithmic approach; the topics need to have a connection with things that students do with their digital devices (eg. play games, send instant messages, order things..); the topics have to grab the students' attention (keeping in mind that they grew up with tablets, the Web, animated movies and videogames). To that end, the topics are grouped under the following headings: Media Computing, Recreational Math, Algorithmic Art, Social Media and Data."
Curriculum Design for Computational Thinking Training Based on Concept Map,"Weiwei, Chen and Zhigang, Li and Aihua, Bao and Yanqin, Tang",2015,Sin Valor
Curriculum Design of Artificial Intelligence in Middle School - Taking Posture Recognition as an Example,"Deng, Wei and Huang, Xinglei and Liu, Qingtang and Wang, Zhibin",2021,Sin Valor
Damo's Quest: A Gamified Environment for Learning Programming,"Ormeño, Emilio and Ochoa, Sergio F. and Alessio, Claudio A. and Ferrarini, Cintia",2024,Sin Valor
Dancing alice: exploring embodied pedagogical strategies for learning computational thinking,"Daily, Shaundra B. and Leonard, Alison E. and J\""{o}rg, Sophie and Babu, Sabarish and Gundersen, Kara",2014,"n this paper, we introduce an embodied pedagogical approach for learning computational concepts, utilizing computational practices, and developing computational perspectives. During a five-week pilot, a group of students spent after-school time learning the basic elements of dance and then using them to program three-dimensional characters that could perform. Throughout the pilot, we found students consistently standing up in front of their computers and using their bodies to think through the actuation of their characters. Preliminary results suggest that designing a virtual-physical dance performance is a motivating and engaging social context in which to introduce students, especially girls, to alternative applications in computing."
Data for Healthy Communities: A Public Interest Pilot Course Designed to Develop K-12 Data Literacy,"Nutwell, Emily and Badger, Kelsey and Kulp, Jessica T.",2024,"Data analytics skills are in high demand in a wide variety of professions and data is increasingly present in our everyday lives. Considering this, educators should be equipped to prepare future data scientists, but also data literate citizens. This project engages high school students in the real-world practice of data analytics to promote the public interest. The research team is partnering with a local public STEM high school to design, evaluate, and publicly share an enrichment course that introduces students to data analytics in the context of public health. Integrating data science education and public health will enable students to engage in meaningful data-driven problem solving while promoting civic engagement. A key challenge in introducing data skills in K-12 is addressing barriers to access. To cope with these barriers, the course design incorporates the use of spreadsheets to engage students in computational thinking. This poster will present preliminary assessment results from the 3-week enrichment course conducted in January 2024. This project contributes to the ongoing discussion of K-12 data science education by demonstrating the value of contextualizing data science as a key competency for 21st century public service."
Data science tools in the analysis of developing inquiry skills and computational thinking within the “IT Academy” Project,"Hanč, Jozef and Hančová, Martina and Jurková, Veronika and Šveda, Dušan",2020,Sin Valor
Data-driven Analysis of Elementary School Students’ Computational Thinking through Scratch Projects,"Yang, Guang and Saito, Daisuke and Washizaki, Hironori and Fukazawa, Yoshiaki",2023,Sin Valor
Data-structure validator: An application of the HY-DE model,"Csernoch, Mária and Dani, Erzsébet",2017,Sin Valor
DB-Learn: Studying Relational Algebra Concepts by Snapping Blocks,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
Deciphering Inclusivity for the Design of K-12 Computing Pathways,"Mills, Kelly and Ruiz, Pati and Coenraad, Merijke and Burke, Quinn and Roschelle, Jeremy",2021,"Three districts representing unique contexts and challenges from across the United States have been iteratively designing and implementing inclusive computing pathways for K-12 students. In this paper, we identify barriers to inclusivity within each districts? K-12 computing pathway. Through a research practice partnership (RPP), we seek to develop a shared understanding of inclusiveness and apply that understanding to the development of targeted supports in the design and implementation of K-12 computing pathways. We analyze existing structures and systems for gaps in order to create new opportunities and resources for students, teachers, schools and districts."
"Decoloniality, Digital-coloniality and Computer Programming Education","Geyser, Hanli",2024,"Like digital technologies themselves, programming education is embedded in the colonial matrix of power, and access to programming knowledge demands immersion in the epistemologies of the Global North. While there is a growing body of work exploring ways to decolonise programming education, far more needs to be done. Current research focuses on the language of instruction and contextual curricula; outward-facing engagements with decolonisation. However, to move towards digital-decoloniality involves scrutinising how programming knowledge is recontextualised within curricula. Part of the project should be equipping both educators and students with the tools to recontextualise programming itself. To dismantle the colonial logic embedded in programming education, attention must be given to the knowledge formation of the discipline to identify moments of disruption. One such moment is the difficulty students face when recontextualising their mental models of computing, from programming skills to programming concepts. This occurs at the moment of reading, tracing and writing code. Programming requires one to refocus computational thinking and engage with a specific semiotic system, translating the authors’ intention into an executable computational process. Disrupting this moment using the strategies of critical literacies opens computer programming and its resulting code to critical examination, allowing an inward-facing decolonial engagement with the discipline."
Decomposition: A K-8 Computational Thinking Learning Trajectory,"Rich, Kathryn M. and Binkowski, T. Andrew and Strickland, Carla and Franklin, Diana",2018,"As new initiatives in computational thinking and computer science (CS/CT) are being developed and deployed, it is important to identify and understand the key concepts that are essential for student learning. In this study, we present the phases of construction of a learning trajectory (LT) for Decomposition in the context of CS/CT in K-8 education. From an extensive literature review, 63 learning goals representative of decomposition understanding and practices were identified and synthesized into 13 consensus goals. The focus of this paper is how relationships between these consensus goals were identified and used to place the goals into a learning trajectory. We discuss the theories and frameworks that guided the trajectory's construction as well as the methodology and justifications used to draw pathways through the trajectory in each phase. Finally, we discuss potential uses for the trajectory and suggest further explorations for decomposition in CS/CT."
DeepStealth: Game-Based Learning Stealth Assessment With Deep Neural Networks,"Min, Wookhee and Frankosky, Megan H. and Mott, Bradford W. and Rowe, Jonathan P. and Smith, Andy and Wiebe, Eric and Boyer, Kristy Elizabeth and Lester, James C.",2020,Sin Valor
Defining and Designing Computer Science Education in a K12 Public School District,"Proctor, Chris and Bigman, Maxwell and Blikstein, Paulo",2019,"Computer science is poised to become a core discipline in K12 education, however there are unresolved tensions between the definitions and purposes of computer science and public education. This study's goal is to explore how logistical and conceptual challenges emerge while designing a comprehensive K12 computer science program in a public school district. While the policy infrastructure for K12 computer science education is rapidly developing, few districts have yet implemented computer science as a core discipline in their K12 programs and very little research has explored the challenges involved in putting ideas into practice. This study reports on a committee designing a comprehensive K12 computer science education program at a small public school district in California. Through a grounded-theory qualitative interpretation of committee-member interviews and board meeting transcripts, we surfaced three themes which were the primary points of tension: how computer science is defined, how it ought to be taught, and what process ought to be used to answer these questions. Grounding these tensions in the academic discourse on K12 computer science education, this study offers recommendations to other districts designing comprehensive computer science education and suggests future directions of computer science education research that will be most useful to stakeholders of these processes."
Delivering Virtual K-8 Computing Professional Development in Rural KY,"Ruiz, Pati and Iwatani, Emi and Burke, Quinn and Tackett, Traci",2021,Sin Valor
Demo: Teaching computational thinking with Protobject,"Bellino, Alessio",2023,"In today’s rapidly changing world, computational thinking is becoming increasingly essential. However, many people, including middle and high school students, face obstacles when learning to code, such as a lack of motivation and engagement. To address this challenge, we present Protobject, an accessible tool that teaches programming in a unique and interactive way. Protobject allows people to explore programming concepts through hands-on physical computing, providing a more engaging and motivating learning experience. In this demonstration, we invite conference attendees to delve into the features of Protobject and witness its potential for enhancing programming education. Participants will have the chance to interact with the tool’s user-friendly interface and explore a range of 22 interactive learning activities that offer different levels of difficulty."
Demonstrating Concepts Through Visual Simulators: Two Cases in the Programming Domain,"Sychev, Oleg and Anikin, Anton and Terekhov, Grigory",2021,Sin Valor
Demonstrating the Ability of Elementary School Students to Reason About Programs,"Aggarwal, Ashish and Touretzky, David S. and Gardner-McCune, Christina",2018,"Over the last decade, CS Education researchers have developed different curricula, resources, and strategies to foster computer science learning in K-12 education. However, there is a lack of research about how elementary school students develop the ability to reason about programs. Reasoning about programs consists of a student's ability to read, write, debug, trace, and predict program behavior. This paper presents results from a think-aloud study of fourth and fifth grade students learning to program in Kodu. The goal of this study was to track students' understanding of how Kodu interprets and executes rules of a program. To understand students' reasoning of program execution, we explicitly taught them the Laws of Kodu computation which govern the decision making and execution process of Kodu rules. We collected students' responses on pre- and post-assessments, and we conducted think-aloud interviews with students where students explained their answers to assessment questions. We found that explicitly teaching students how Kodu rules are interpreted significantly improved their ability to understand the execution of programs and to explain program behavior. The results of this study provide insight into how elementary school students reason about simple programs, and how this ability can be scaffolded."
"Demonstration of Roteco - the robotic teacher community: An informative, collaborative platform with a unique community ecosystem","Negrini, Lucio and Reyes Reyes Mury, Sophia and Skweres, Melissa and Kollegger, Nina",2021,"Today the digital society in which we live requires the acquisition of new computer-related skills, such as computational thinking or coding skills, as well as cross-curricular skills, such as communication, collaboration and creativity. Preparing and inspiring educators to discover, learn and contribute to child-centered innovative ideas and emerging technologies is at the heart of our mission. Within the framework of the project, a teacher training concept, a collaboration platform and various pedagogical resources have been developed. The demonstration will present the DNA of the Roteco project, the collaborative platform and its contents and how Roteco is currently supporting its community of educators. Roteco encourages synergies with FabLearn Europe / MakeEd and in the spirit of open-ended exploration encourages the possibilities."
Deployment of physics simulation apps using Easy JavaScript Simulations,,2017,Sin Valor
Describing Elementary Students' Spheres of Influence in Scratch 'About Me' Projects,"Ojeda-Ramirez, Santiago and Tsan, Jennifer and Eatinger, Donna and Jacob, Sharin and Saito-Stehberger, Dana and Franklin, Diana and Warschauer, Mark",2023,"Researchers and practitioners have worked to bring computer science to all students. However, CS is still an inequitable field. When developing curricula, we must account for the importance of connecting the lives and identities of historically marginalized students with instructional materials. We examine the knowledge and experiences that elementary (age 9-10) students drew upon to implement an open-ended programming assignment about themselves. We coded the Scratch projects of 189 students to investigate what aspects of their lives students reference, and how they use various modalities in Scratch to create digital media products about themselves. In our data, we found that the most common spheres portrayed were identity, hobbies and leisure, and interests. When expressing their identities, students narrated their experiences, expressed consciousness about their skills, connected to the user via their interests, and sometimes discussed equity. Additionally, our findings add to previous literature on Scratch as an effective platform for digital media production. In particular, we found that students used dialogue, images, sound, and the title to represent their spheres of influence through programming multimedia and interactive projects. This work has implications for the development of curricula and teaching guides for upper elementary students courses on computational thinking. Spheres of influence could inform researchers on the most influential aspects of students life in a specific context, providing elements for creating culturally relevant and interest-based materials and lessons."
Describing the Experience of Instructional Coaches in Supporting Elementary Coding,"Rich, Peter J. and Cunningham, Heather and Diaz, Lien",2025,"Over the past decade, schools around the world have introduced coding in elementary education. A principal challenge with this effort is effectively training and maintaining teachers capable of teaching coding to children. An approach used by BootUp Professional Development is to team up with school districts that provide an Instructional Coach (IC). ICs are district-level personnel that support in-service teachers by co-planning, training, modeling, providing resources, and generally supporting teachers to implement coding in their classrooms. ICs remain in the district long after the professional development provider completes their training, potentially addressing training challenges introduced by teacher attrition. Some of the benefits provided by ICs are: (a) longevity, (b) expertise, and (c) near-peer support. However, the roles and responsibilities of ICs vary by district. In this study, we surveyed 49 ICs to better understand their role in supporting elementary teachers to integrate coding into general education. Findings show that while ICs are experienced teachers, they are relatively novice coders. ICs rely on principals and district personnel to set teachers' coding expectations, which can either help or hinder their ability to support teachers. In this poster, we will discuss additional successes, challenges, and support structures that ICs face as they seek to support the effective teaching of coding in elementary education."
Design and application of a physical programming course for the development of multiple intelligences in children,"Deng, Wei and Liu, Meijuan and Shen, Minyu and Cong, Xiangmiao",2022,Sin Valor
Design and Effectiveness Analysis of Interactive Strategies for Teaching Graphical Programming Oriented to Cultivate Computational Thinking,"Wang, Fan and Chen, Lan and Wang, Wei",2023,Sin Valor
Design and Evaluation of a Collaborative Online Computational Thinking Course,"Smith, Rebecca and Rixner, Scott",2020,"For online courses to be an effective alternative to face-to-face courses, they must provide equivalent levels of interaction, engagement, supervision, and support. This paper analyzes and compares the experiences of students in face-to-face and online sections of the same introductory course taught by the same instructor. The course heavily utilizes team-based active learning, and effort was put into maintaining comparable group experiences in the online section. An analysis of student opinions and objective outcomes revealed only minor differences between the two sections. Notably, there were no statistically significant variations in students' overall grades, self reported confidence, or course evaluation ratings, indicating that high quality student experiences and outcomes can be achieved when migrating active learning to an online format."
Design and Evaluation of a Deep Learning Recommendation Based Augmented Reality System for Teaching Programming and Computational Thinking,"Lin, Pei-Hsuan and Chen, Shih-Yeh",2020,Sin Valor
Design and implementation of a graphical programming class for computational thinking in elementary schools,"Xue, Tianyu and He, Shiyan and Guo, Weitong",2024,Sin Valor
Design and Implementation of a STEAM Robotics Lesson on the Spotted Lanternfly: Engineering a Computer Science Solution,"Douglass, Esther and Cannella, Alaina and Herbert, Katherine G. and Anu, Vaibhav and Hagiwara, Sumi and Marlowe, Thomas and Robila, Stefan",2024,Sin Valor
Design and Implementation of Co-design Pedagogical Scenarios for Learning Computational Thinking,"Sunday, Amos Oyelere",2023,"Recognizing effective approaches to communicate computational thinking (CT) ideas to K-12 learners is necessary. Co-design approach has been identified as an effective pedagogy for communicating CT ideas. However, there is a dearth of studies on co-design pedagogical scenarios. Hence, this study aimed at developing a CT learning co-design scenario, translate into artifact, and implement with Nigerian secondary school students."
Design and Implementation of Virtual Experiment on Character Encoding,"Yang, Junsheng and Song, Guohui",2021,Sin Valor
Design and Preliminary Results From a Computational Thinking Course,"Kafura, Dennis and Bart, Austin Cory and Chowdhury, Bushra",2015,"This paper describes the design and initial assessment of a general education course in computational thinking for non-computer science majors. The key elements of the course include multidisciplinary cohorts to achieve learning across contexts, multiple languages/tools, including block-based and textual programming languages, repeated exposure to the underlying computational ideas in different forms, and student-defined projects using real world (""big"") data to heighten motivation through self-directed contextualized learning. The preliminary multi-methods assessment shows that the course engendered high levels of motivation, achieved key objectives for learning in and across contexts, largely affirmed the choice of languages/tools, and supported, though less strongly than anticipated, the motivational effects of real-world data"
Design Factors Affecting the Social Use of Programmable Robots to Learn Computational Thinking in Kindergarten,"Bakala, Ewelina and Gerosa, Anaclara and Hourcade, Juan Pablo and Pascale, Maria and Hergatacorzian, Camila and Tejera, Gonzalo",2022,"Programmable robots designed for preliterate children are one of the options being explored and put into practice for teaching computational thinking skills to children in preschool and kindergarten. Classroom use of these robots may involve use by groups of children due to cost, logistical, and pedagogical reasons. To understand design factors affecting the social use of these robots, we explored the use of three programmable robots with distinctive design characteristics in a kindergarten classroom. Our findings suggest that programmable robot designs that may work well for use by individual children may cause difficulties when shared by groups of children if not all children in the group are able to easily perceive the input (program), output (robot actions), or program state. Based on these design factors we provide recommendations for the design of programmable robots, their evaluation for social use, and for addressing design limitations with support by adult facilitators."
Design failures in data visualization programming activities,"Fernandez, Cassia and Blikstein, Paulo and Lopes, Roseli De Deus Lopes",2024,"In this pictorial, we critically analyze how students engaged in data representation activities using PlayData, a block-based programming environment tailored for data visualization purposes. Drawing upon data collected over two years with middle and high school students, we describe obstacles that impacted the interpretation of the data under analysis. These obstacles, here called ""design failures"", arose from either unexpected uses of the tool or shortcomings in the design of activities. We explore how each of these failures was used as an opportunity for refining both the tool's design and the associated activities. We conclude by offering recommendations for educators and researchers to support learners' engagement with visualization construction for effective reasoning with data."
Design Insights into the Creation and Evaluation of a Computer Science Educational Game,"Horn, Britton and Clark, Christopher and Strom, Oskar and Chao, Hilery and Stahl, Amy J. and Harteveld, Casper and Smith, Gillian",2016,"Computer Science (CS) education at the middle school level using educational games has seen recent growth and shown promising results. Typically these games teach the craft of programming and not the perspectives required for computational thinking, such as abstraction and algorithm design, characteristic of a CS curriculum. This research presents a game designed to teach computational thinking via the problem of minimum spanning trees to middle school students, a set of evaluation instruments, and the results of an experimental pilot study. Results show a moderate increase in minimum spanning tree performance; however, differences between gender, collaboration method, and game genre preference are apparent. Based on these results, we discuss design considerations for future CS educational games focused on computational thinking."
Design of Social Story Teaching Aid for Autistic Children Based on Computational Thinking and Its Case Study,"Li, Xin-Zhu and Chen, Chun-Ching and Kang, Xin",2021,"Computational thinking is an emerging teaching strategy as well as an ability necessary for all people in the future. In this study, social stories are used to teach autistic children social skills. Combining sequential computational thinking as a learning strategy and applying Conductive Copper Foil Tape and Makey Makey, a social story teaching aid is made. With the help of it, children can learn the content from social stories, learn social stories through computational thinking and arrange corresponding sequence structure. Three autistic children from Grade 1 took part in six teaching experiments and were observed their change of social skills. The results showed that scientific teaching aid could improve autistic children's social ability, speaking skills, attention, and learning interests, making them observe the storytelling more carefully and easily, understand the story development, and learn social skills from it. Besides, this teaching aid could improve autistic children's social reciprocity and provide theoretical references for relevant fields."
Design Principles for Authentically Embedding Computer Science in Sports,"Bodon, Herminio and Kumar, Vishesh and Worsley, Marcelo",2025,"Objectives. Athletics and sports represent a focal part of adolescence for millions of youth around the world. However, opportunities to engage in computer science learning experiences are less prevalent, particularly among Hispanic and low-income communities. Recently, researchers have explored ways to bridge these, seemingly, disparate disciplines. Much of this prior research centers on the proliferation of sports technologies that support individualistic learning experiences. Additionally, many of these experiences are developed by researchers with limited design contributions from sports practitioners. To extend prior work, this project centers youth athletic identities and the associated cultural contexts of sports to explore ways that computing technologies can enhance and develop youth athletic identities and sports performance. Moreover, this work surfaces ways that athletics can be a generative and fulfilling space to learn about computer science.Participants. In summer 2021, we collaborated with basketball coaches to design and implement a computing-enhanced learning experience with a basketball team of Hispanic participants in Puerto Rico. Eleven basketball athletes from a high school in southern Puerto Rico participated in the study. The participants have strong sports identities, as demonstrated by their lifelong engagement with team sports. Conversely, only one out of the eleven participants had experienced sports technologies, and none of them had previously participated in computing learning experiences.Study Method. In collaboration with local basketball coaches, we co-designed a learning experience that centers sports identities and practices and adds computing as a way to extend existing sports identities and local sports activities. We present and evaluate this learning experience using a design-based research approach. Participants’ feedback was collected in the form of surveys, designs, and journal entries, and additional data on their experiences were collected via videos and researchers’ field notes. Using a mixed-methods approach, we highlight existing participants’ identities and perceptions as well as their experiences with our design. We complement quantitative analysis of survey responses with case studies.Findings. We find that our design can provide shifts in youth student-athletes’ perceptions of computing. Additionally, hands-on experiences with computing tools enable participants to start practicing computer science sensemaking via learning how different computing tools can support their sports performance individually and as a team. Furthermore, we find that the material, ideational and relational resources made available through camp:bit supported each participant differently, while collectively providing a space for all of them to have meaningful and fulfilling experiences. Finally, we find that this design can foster and support sports team cohesion.Conclusions. We provide in-depth descriptions of our design, the youth’s engagement with it, and how these learning experiences can be further applied in sports spaces. These examples highlight a unique conception of practice-linked computational identities—where learners’ computational identities are grounded in a specific culturally relevant practice, enabling a more culturally sustaining computing learning experience. Finally, our analysis suggests five design principles for designing and conducting computing-supported learning experiences in sports environments. The principles are as follows: 1. Sports Experience: Authentically Support Existing Identities. 2. Team Dynamics: Team Athletes are Part of a Whole. 3. Individual Pursuits: Supporting Individual Paths. 4. Direct Interactions: Conversations with Materials and Ideas. 5. Interdisciplinary Facilitation Team: Complementary Skills. These design principles can be used by researchers, practitioners, and local stakeholders to implement sport-centric CS learning experiences to extend and enhance the way student-athletes from marginalized communities practice sports, as well as to activate interest and engagement in CS."
Design Principles for CT Integrated Lesson Design and Implementation,"Coenraad, Merijke and Dunbar, Kyle M. and Rangel, Alessandra and Ahn, Wanjoo and Yadav, Aman and Jacob, Sharin",2025,"Teachers are increasingly integrating computational thinking (CT) into subject-area learning opportunities with the aim to meet both subject-area and CT learning goals. While prior work has identified CT practices synergistic to subject-area learning, less is published about pedagogical frameworks for instructional practices when integrating CT into content area teaching. This poster presents data from educators (teachers and professional developers) about what they find to be crucial factors for designing and implementing CT integrated lessons. Preliminary analysis indicates educators advocate for twenty practices including creating reflection opportunities, actively using CT vocabulary, opportunities for students to practice CT skills, meaningful real-world connections, utilizing scaffolding strategies, explicitly introducing CT practices, clear connections between CT and curricular content, using multiple modalities, and encouraging student discourse."
Designing a Middle School Science Curriculum that Integrates Computational Thinking and Sensor Technology,"Gendreau Chakarov, Alexandra and Recker, Mimi and Jacobs, Jennifer and Van Horne, Katie and Sumner, Tamara",2019,"This experience report describes two iterations of a curriculum development process in which middle school teachers worked with our research team to collaboratively design and enact instructional units where students used sensors to investigate scientific phenomena. In this report, we examine the affordances of using a sensor platform to support the integration of disciplinary learning and computational thinking (CT) aligned with Next Generation Science Standards and the CT in STEM Taxonomy developed by Weintrop and colleagues. In the first unit, students investigated the conditions for mold growth within their school using a custom sensor system. After analyzing implementation experiences and student interest data, our team engaged in another round of co-design to develop a second instructional unit. This unit uses a different sensor system (the micro:bit) which supports additional CT in STEM practices due to its block-based programming interface and its real time data display. For the second unit we selected a different phenomenon: understanding and designing maglev trains."
Designing an Interactive System as support to the development of Computational Thinking for Children with Cochlear Implants: Extended Abstract,"Henao, Cristhiam and Naranjo, Juan Sebasti\'{a}n and Cano, Sandra and Pe\~{n}e\~{n}ory, Victor M.",2018,"Computational Thinking a taken a greater interest in the schools. Each time is being incorporated into the classroom to develop some skills in the children as: solving and formulation problem with help of technology tools. Children with cochlear implants have many challenges into ambit social, cultural and educational. Using the technology is proposed a physical and digital game as support tool in the acquisition of some skills related with thinking computational."
Designing and Refining of Questions to Assess Students' Ability to Mentally Simulate Programs and Predict Program Behavior (Abstract Only),"Aggarwal, Ashish and Gardner-McCune, Christina and Touretzky, David S.",2016,"Mental simulation is an important skill for program understanding and prediction of program behavior. Assessing students' ability to mentally simulate program execution can be challenging in graphical programming environments and on paper-based assessments. This poster presents the iterative design and refinement process for assessing students' ability to mentally simulate and predict code behavior using a novel introductory computational thinking curriculum for Microsoft's Kodu Game Lab. We present an analysis of question prompts and student responses from data collected from three rising 3rd - 6th graders where the curriculum was implemented. Analysis of student responses suggest that this type of question can be used to identify misconceptions and misinterpretation of instructions. Finally, we present recommendations for question prompt design to foster better student simulation of program execution."
Designing Block-Based Programming Language Features to Support Upper Elementary Students in Creating Interactive Science Narratives,"Smith, Andy and Mott, Bradford and Taylor, Sandra and Hubbard Cheuoua, Aleata and Minogue, James and Oliver, Kevin and Ringstaff, Cathy",2020,"Recent years have seen a growing recognition of the importance of enabling K-12 students to engage in computational thinking, particularly in elementary grades where students' dispositions toward STEM are developing. Block-based programming has emerged as an effective tool for engaging these novice learners in computational thinking. At the same time, digital storytelling has emerged as a promising avenue for creating motivating problem-solving scenarios that engage students in science investigations. Although block-based programming and digital storytelling are in many ways synergistic, there is a lingering question of how to design block-based languages at an age-appropriate level to enable effective and engaging storytelling. In this work, we review design principles from prior block-based and digital storytelling systems as well as propose the design of block-based programming language features to enable the creation of rich, interactive science narratives by upper elementary students."
Designing Computing Education Courses for Liberal Arts and Science Students,"Guzdial, Mark",2022,"Computing education practitioners and researchers know a lot about how to design courses for students who are going to pursue a career in computing (e.g., professional software developer, data scientist, or computer engineer). Today, computing is a necessary part of other careers, such as scientists who create computational models and simulations, artists working in computational media, and critical computing scholars. The University of Michigan College of Literature, Science, and the Arts (LSA) charged a task force with defining the computing education needs for their students. The task force conducted a year long process involving searches of courses and programs, interviews with students and faculty, and a large survey. The task force proposed themes of Computing for Discovery, Expression, and Justice as useful in organizing computing within the liberal arts and sciences. We are now designing the introductory courses for expression and justice. We are using participatory design methods where faculty advisors engage in tasks (like card sorting) to define projects and learning goals. The expression and justice card sorts are markedly different. We are planning to use a block-based language (Snap!) for instruction and homework, but students will also engage with a purpose-built Runestone ebook in a textual language like Processing (for expression), and Python and HTML (for justice). The ebook activities are informed by purpose-first programming in order to support transfer of knowledge and to encourage a sense of self-efficacy and authenticity."
Designing Courses for Liberal Arts and Sciences Students Contextualized around Creative Expression and Social Justice,"Guzdial, Mark and Nelson-Fromm, Tamara",2025,"The goal of teaching everyone computing (explicitly including programming) predates the definition of the computer science (CS) major and even the prospect of a software development career. At the University of Michigan, we are creating courses for non-CS majors which are grounded in the computational practices of liberal arts and sciences faculty. These courses have no connection to the CS major curriculum or software development jobs. We focus here on two of the themes that those faculty valued (Computing for Expression and Computing for Justice) and the introductory courses that we designed around each theme. The courses emphasize gaining broad perspectives of computing, which serve the study of multiple disciplines. Student activities include readings, writing essays, classroom discussion, and open-ended programming homework assignments. This experience report describes our design process, the Creative Expression and Social Justice courses, and an initial evaluation of our design. Most of the programming assignments were written in the block-based programming language Snap!, with some in-class exercises using teaspoon languages. Several units ended with an ebook assignment to connect the Snap! programming to equivalent programs in Python, Processing, and SQL. Interview and survey findings suggest that students found this sequence and the courses useful, despite not counting toward a CS major or focusing on early software development skills. Students described usefulness in terms of developing general computing knowledge, preparation for a range of future careers, and introducing them to other course choices."
Designing domain-specific blocks for diffusion: The dialogue between pedagogical principles and design decisions,"Fernandez, Cassia and Fuhrmann, Tamar and de Deus Lopes, Roseli and Blikstein, Paulo",2021,"Designing computer models can be a valuable way for students to refine their understandings of scientific phenomena while creating and testing their hypotheses. Drawing on these ideas, we designed nine domain-specific blocks related to diffusion as a Scratch extension, which we called Diffusion Modeling Scratch Extension. In this paper, we describe the pedagogical principles that guided the design of the blocks and draw on the data from a pilot study with seven students to investigate how our design decisions impacted students' learning experiences."
Designing for Equity in Education Via Computational Thinking: A Case Study,"Yamaguchi, Ryoko and Eaton, Cyntrica",2024,"CADRE (Catalyst for Actively Designing and Researching Equity) is a Researcher-Practitioner Partnership (RPP) that empowers in-service K-12 educators to learn and leverage Computational Thinking (CT) to design for equity in their classrooms, schools, and districts. We cast equity gaps as bugs in education and focus on helping educators debug the system with CT-based tools, methods, and strategies such as user-centered design, system abstraction, and iteration. In this paper, we first describe how educators were taught CT and provide an example of how they applied these skills in practice. We then highlight the results of the qualitative case study of 34 educators where we found that CT helped CADRE participants gain a better understanding of the equity gaps their students faced and improve their instructional practices within their locus of control. Implications for future research are also discussed."
Designing for Integrated K-5 Computing and Literacy through Story-making Activities,"Whyte, Robert and Ainsworth, Shaaron and Medwell, Jane",2019,"Proponents of computing education have long stressed the value of computing for learning in other disciplines. Much of the research towards this end has focused on supporting learning in science, engineering, and mathematics (or STEM). However, a trend towards computing in non-STEM disciplines is growing, yet the research base is more limited. We add to this emerging area of research by investigating the potential for integrating computing and literacy education. This paper reports the results of a six-week intervention during an after-school program in a British primary school. We describe the development of a curriculum unit and report on the first iterative cycle in a design-based research project. Our analysis shows that integrating programming and literacy activities supported novice learners in areas of computing such as algorithm design and program execution through a combination of short problem-based tasks and longer project-based activities. Likewise, programming supported learners in creating digital stories by visualizing narrative structure though some caveats were found. We discuss the results of this study and implications for future work in this area."
Designing hybrid physics labs: combining simulation and experiment for teaching computational thinking in first-year engineering,"Fennell, Hayden W. and Lyon, Joseph A. and Magana, Alejandra J. and Rebello, Sanjay and Rebello, Carina M. and Peidrahita, Yuri B.",2019,Sin Valor
Designing Integrated Math + CT Activities to Promote Sensemaking about Place Value in Grades K-2,"Dahshan, Mai and Galanti, Terrie M.",2023,"In recent years, there has been a growing emphasis on using computational thinking (CT) to teach mathematical concepts. The integration of math+CT enables students to gain a deeper understanding of both mathematical and computer science (CS) concepts. Although numerous professional development programs provide teachers with a solid understanding of CT and methods for integrating it into the curriculum, there has been little research on how teachers apply this knowledge to the design and development of math+CT activities. Moreover, the majority of integrated activities are concentrated in the upper elementary grades, while the early grades (i.e., K-2) remain underexplored. The purpose of this study is to describe how teachers translate their CT knowledge in the collaborative design of an integrated math+CT activity focused on number sense and mathematical operations for grades K-2. Research faculty from the CS and Teacher Education departments designed block-based programming activities for K-2 students to explore and make sense of place value representations of the numbers 1 - 1000. In-service elementary teachers in an online graduate STEM CT course (N = 13) experienced these activities as learners and provided feedback for redesign from their perspectives as classroom teachers. Qualitative analysis of collaborative problem-solving slides and individual reflections revealed how teachers connected their mathematical knowledge for teaching place value to their emergent understanding of CT concepts of abstraction, decomposition, and debugging. This research bridges the gap between enthusiasm for math+CT integration and teacher capacity to use CT to promote creative mathematical thinking and problem-solving in K-2 classrooms."
Designing Interaction and User Interface of Computational Thinking Digital Game for Children using User-Centered Design Approach,"Ramadhani, Nira Rizki and Mulyanto, Adi and Niwanputri, Ginar Santika",2020,Sin Valor
Designing Project-based learning experiences to integrate Computational Thinking skills at Teacher Colleges,"Simmonds, Jocelyn and Hitschfeld-Kahler, Nancy and Scheihing, Eliana and Henriquez, Valeria and Munoz, Valentin and Casanova, Cecilia and Torrent, Catalina and Contreras, Paulo and Mercado, Karen and Estrada, Daniel and Marquez, Lucia",2024,"We describe our experience introducing computational thinking skills at teacher colleges through project-based learning (PBL). We have designed projects that use technology to tackle driving questions derived from the national school curriculum, and at the same time are aligned with learning objectives from pre-service teacher training programs. We have carried out a preliminary validation of these projects with teacher educators, who are now incorporating these experiences into their courses with pre-service teachers."
Designing “Bebras” Serious Games Interaction for Indonesian Upper Elementary School Students,"Aslina, Yasya Rusyda and Mulyanto, Adi and Niwanputri, Ginar Santika",2020,Sin Valor
Developing a community definition and teaching modules for computational thinking: accomplishments and challenges,"Ater-Kranov, Ashley and Bryant, Robert and Orr, Genevieve and Wallace, Scott and Zhang, Mo",2010,"The NSF-funded Northwest Distributed Computer Science Department (NW-DCSD) project brings together 24 multi-disciplinary faculty from 19 diverse colleges and universities in an effort to change the face of computing in the Pacific Northwest region of the United States. We offer an innovative and inclusive vision of computing in the 21st century and foster opportunities for multi-disciplinary and inter-institutional computing and computer science education collaborations. Over the project's first two years, this community has created 9 engaging, easy-to-use learning modules that teach various levels of computational thinking to two different audiences: non-computer science and computer science undergraduate students. This paper presents the development of a community definition of computational thinking, the learning modules, initial findings, unanticipated challenges, and next steps."
Developing a Computational Thinking Curriculum for Multilingual Students: An Experience Report,"Jacob, Sharin and Nguyen, Ha and Richardson, Debra and Warschauer, Mark",2019,Sin Valor
Developing a didactic sequence for introducing computational thinking in the early years of elementary school,"Silva, Diego S. and Melo, Sérgio L. and Basto Diniz, Juliana R.",2021,Sin Valor
Developing a Digital Game to Assess Lower Primary Students' Computational Thinking Practices based on Evidence-Centered Game Design,"Luo, Qi and Zhang, Shuhan",2025,"Computational Thinking (CT) has become increasingly essential in the current era of rapid digital advancement. Despite the availability of various tools to assess CT, there is a notable scarcity of tools designed for evaluating CT practices in lower elementary students. To address this gap, this study develops a digital game titled ""Magical Adventure"" based on the Evidence-Centered Game Design (ECGD) framework, which aimed at assessing the CT practices of young children. The game comprises five scenarios, targeting five CT practices respectively, including pattern recognition, abstraction, problem decomposition, algorithmic thinking, and debugging. Scoring criteria were designed to evaluate students' CT abilities based on the anticipated gameplay process data. This study describes the design and development process of the game. Future steps will include validation of its effectiveness through expert reviews and cognitive interviews, followed by empirical research to optimize and refine the game, enhancing its accuracy in reflecting students' CT practices."
Developing a Game to Assess Abstraction Skills of Elementary Students: Design Principles and Validation Process,"Luo, Qi and Zhang, Shuhan",2024,Sin Valor
Developing a Procedural Problem-solving-based Framework of Computational Thinking Components,"Jeng, Hi-Lian and Liu, Li-Wen and Chen, Chung-Nien",2019,Sin Valor
Developing a Self-efficacy Scale for Computational Thinking (CT-SES),"De Jong, Imke and Jeuring, Johan",2022,"Self-efficacy is an important construct in education, as it can influence (among other aspects) perseverance, engagement and success on educational tasks. As such, a student’s Computational Thinking (CT) self-efficacy can have an important influence on, and may be a predictor for, the development and use of CT skills. This poster abstract provides the details of an in-progress study in which we develop a scale to measure CT self-efficacy in different contexts."
"Developing a Systemic, Scalable Model to Broaden Participation in Middle School Computer Science","Wiebe, Eric and Barnes, Tiffany and Freeman, Sharon and Frye, David and Maher, Mary Lou and Cao, Lijuan and Dorodchi, Mohsen M and Pugalee, David and Rorrer, Audrey S. and Boulden, Danielle and Cateté, Veronica",2019,Sin Valor
Developing a Teacher Training Curriculum Including Computational Thinking Skills: Early Advances on a Study Focused on Colombia,"Muñoz del Castillo, Armando and Muñoz, Mario A. and Acosta Huertas, Lydia Cruz and Herrera, Edgar and Jimenez Toledo, Javier and Ramos, Deixy Ximena",2019,Sin Valor
Developing A Unified Model of Teaching Computational Thinking,"Rozali, Nurul Faizah and Zaid, Norasykin Mohd and Noor, Norah Md and Ibrahim, Nor Hasniza",2018,Sin Valor
Developing Chinese Elementary School Students' Computational Thinking: A Convergent Cognition Perspective,"Liu, Yaqin and Ma, Zhiqiang and Qian, Yizhou",2019,"Computational thinking is considered a fundamental skill of children in the 21st century. In 2017, the new national curriculum standards of China included computational thinking as a core literacy of students. In this poster session, the authors will introduce their research on developing Chinese elementary school students' computational thinking skill. The authors have developed a new information technology course with the focus on computational thinking. The research uses the convergent cognition theory as the theoretical framework. The convergent cognition theory posits that learning computer programming affects students' mathematical thinking and vice versa. The programming environment is Scratch. A group of third grade students and a group of fourth grade students are the participants. Their computational thinking skill and math ability will be measured to see whether this course develops students' computational thinking skill and whether convergent cognition effects exist. Examples from the instructional materials will be presented as part of the poster. The authors will also report on the preliminary results of the course's effectiveness on developing students' computational thinking."
Developing community-based engagement in smart cities: A design-computational thinking approach,"Lee, Chien-Sing and Wong, K. Daniel",2017,Sin Valor
Developing Computational Thinking and Reading and Writing Skills through an Approach for Creating Games,"Fernandes, Kleber Tavares and da Silva Aranha, Eduardo Henrique and Lucena, Márcia Jacyntha Nunes R. and de Souza Fernandes, Gildene Lima",2020,Sin Valor
Developing Computational Thinking for Children with Autism using a Serious Game,"Elshahawy, Menna and Bakhaty, Mariam and Sharaf, Nada",2020,Sin Valor
Developing Computational Thinking in Middle School Music Technology Classrooms,"McCall, Lauren and Allen, Brittney and Freeman, Jason and Garrett, Stephen and Grossman, Sabrina and Paz, Jed and Edwards, Doug and McKlin, Tom and Lee, Taneisha",2024,"To engage diverse populations of students who may not self-select into computing courses, a curriculum for a middle school music technology + computer science course that addresses learning standards for both subjects was developed and deployed. Students who engage with the curriculum learn modern music production techniques and computational thinking concepts. This is through a mix of traditional approaches to music technology education (digital audio workstations) and computational approaches via a culturally relevant learning platform that introduces students to coding through music production and remixing. This poster reflects on the last two years of curriculum design and deployment, teacher training, and student and educator engagement and feedback to provide insight into the teaching (and learning) of computational thinking in the music technology classroom."
Developing Computational Thinking in STEM Education with Drones,"Sattar, Farha and Nawaz, Muhammad",2023,Sin Valor
Developing Computational Thinking Skills in Adolescents With Autism Spectrum Disorder Through Digital Game Programming,"Munoz, Roberto and Villarroel, Rodolfo and Barcelos, Thiago S. and Riquelme, FabiáN and Quezada, ÁNgeles and Bustos-Valenzuela, Patricia",2018,Sin Valor
Developing Computational Thinking Skills With Algorithm-Driven Spreadsheeting,"Csernoch, Mária and Biró, Piroska and Máth, János",2021,Sin Valor
Developing Computational Thinking through a Virtual Robotics Programming Curriculum,"Witherspoon, Eben B. and Higashi, Ross M. and Schunn, Christian D. and Baehr, Emily C. and Shoop, Robin",2017,"Computational thinking describes key principles from computer science that are broadly generalizable. Robotics programs can be engaging learning environments for acquiring core computational thinking competencies. However, few empirical studies evaluate the effectiveness of a robotics programming curriculum for developing computational thinking knowledge and skills. This study measures pre/post gains with new computational thinking assessments given to middle school students who participated in a virtual robotics programming curriculum. Overall, participation in the virtual robotics curriculum was related to significant gains in pre- to posttest scores, with larger gains for students who made further progress through the curriculum. The success of this intervention suggests that participation in a scaffolded programming curriculum, within the context of virtual robotics, supports the development of generalizable computational thinking knowledge and skills that are associated with increased problem-solving performance on nonrobotics computing tasks. Furthermore, the particular units that students engage in may determine their level of growth in these competencies."
Developing Computational Thinking Through Image Making and Constructionist Learning (Abstract Only),"Fordham, Eileen and Freger, Halley and Hinchman-Dominguez, Amanda and Mitchell, Alexander and Rebelsky, Daniel and Tsou, Victoria and Wheeler, Earnest and Wolter, Zoe and Rebelsky, Samuel A.",2015,"Consider the following scenario: A student is browsing Facebook and sees a strangely compelling image on her friend's page. She follows the ""how I made this link"" to learn more. She finds herself on a page with a gallery of animations that she browses. Then she sees a ""Create"" button and clicks it. She skims the instructions and decides that this is not a ""standard"" graphics program - rather than using a timeline and ""tools"", it has just a few basic images (e.g., a horizontal blend, a vertical blend, some time-blends) and a few operations that you use to build new images from existing images. She plays a bit. And she finds that she can create some strange and interesting images, but not necessarily the ones she wants to make, and certainly not anything like her friend made. So she looks further. She learns that there are ""challenges"" that help you learn the system (and, as importantly, that help you consider and master different aspects of computational thinking), and tries to figure out how to make images as seemingly simple as a triangle or a circle using the limited selection of basic images and operations. It's not easy, but she finds it fun to try (and sometimes more fun to fail -- failures also create interesting images). You've just read a sample encounter with the Mathematical Image Synthesis Toolkit, or MIST. MIST is an open-source, Web-based graphics application that takes a constructionist approach in which open experimentation in image making helps students develop skills in computational thinking and deepen their understanding of mathematical functions. MIST is available at http://glimmer.grinnell.edu."
Developing computational thinking through pattern recognition in early years education,"Calderon, Ana C. and Crick, Tom and Tryfona, Catherine",2015,"Alongside recent UK initiatives on computing education, coupled with demands for the development of broader societal digital competencies, we propose that computational thinking skills can be taught to early year students and highlight a method for teaching a specific aspect, namely pattern recognition. Although our example might appear specific to this context, we identify how this could readily be extended to a broader class of educational settings, proposing an underlying pedagogical framework. Finally, a proof-of-concept prototype, corresponding to the implementation of the method, is highlighted."
Developing Computational Thinking through Project-Based Airplane Design Activities,"Yang, Dazhi and Baek, Youngkyun and Swanson, Steve",2020,Sin Valor
Developing computational thinking via the visual programming tool: lego education WeDo,"Pinto-Llorente, Ana M and Mart\'{\i}n, Sonia Casillas and Gonz\'{a}lez, Marcos Cabezas and Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e}",2016,"This study seeks to extend the existing research on the use of visual programming tools to work and develop computational thinking. We show the primary education students' perceptions of the use of the software Lego Education WeDo in the subject of natural sciences to promote the computational thinking. We tried to test the following hypotheses: Students will learn to build and program 3D models with Lego Education WeDo (H1), students will think creatively to solve the problems (H2), Lego Education WeDo will help pupils to know the relationship between cause and effect (H3), and the tasks developed will allow pupils to reflect about the possibilities they have and to find the correct answer (H4). Based on the result analysis there were evidences of the effectiveness of the project to increase the participants' awareness of the computational thinking. The research also concluded that according to learners' perception, the way in which activities were designed provided them possibilities to learn to build models in 3D and program them. Moreover, the findings of the study also demonstrated that the success of the project also depended on the teacher's role as a guide in the teaching-learning process."
Developing Computational Thought in Mathematics through Educational Robotics in Basic Education: A practical research analysis,"Oliveira, Janaina Fonsêca and Quarto, Cicero Costa and Silva Dos Santos, André Luís and Belfort, Iran Charles Pereira and de Jesus Viana Sá, Eveline and Santos, Jhonny Robert Sousa",2022,Sin Valor
Developing Future Computational Thinking in Foundational CS Education: A Case Study From a Liberal Education University in India,"Kalluri, Balaji and Prasad, Prajish and Sharma, Prakrati and Chippa, Divyaansh",2024,Sin Valor
Developing Implementation Measures for K-12 Computer Science Curriculum Materials,"Rutstein, Daisy W. and Xu, Yuning and McElhaney, Kevin and Bienkowski, Marie",2019,"As K-12 computer science (CS) education initiatives scale throughout the U.S., researchers seek to understand the context-specific relationships between CS instruction and student learning. Evaluation of instruction requires valid measures of curriculum implementation. We have developed measures for identifying conditions for successful implementation of an introductory high school computer science curriculum along two-dimensions: teaching quality and curriculum enactment. Additionally, we have defined three types of instructional strategies for teaching quality. Quantitative and qualitative data were collected from 53 teachers through surveys and interviews. Data were aggregated and integrated to derive scaled measures for the instructional strategies and curriculum adaptation, and implementation measures were correlated with student end-of-unit assessment data. We found potential factors that can enhance or impede the successful implementation of CS curriculum materials, and we have identified several broad issues associated with scaling up CS curricular implementation."
Developing Inclusive Computing with the CT Pathways Toolkit,"Coenraad, Merijke and Burke, Quinn and Ruiz, Pati and Mills, Kelly and Roschelle, Jeremy",2022,"To promote inclusion of students with marginalized identities, districts need to develop comprehensive inclusive computing pathways across grade levels. Working in a Research Practice Partnership (RPP), we have co-designed a district-facing toolkit to support the creation of these pathways. In this poster, we present both the CT Pathways Toolkit and results from four districts piloting it. We examine the experiences of the pilot districts and analyze trends in the toolkit's use. This work expands knowledge about building inclusive computing pathways and computational thinking (CT) integration within K-12 schools."
Developing Inclusive K-12 Computing Pathways for the League of Innovative Schools,"Burke, Quinn and Roschelle, Jeremy and Angevine, Colin and O’Donnell, Kerri Ann and Smith, Kimberly and Weisgrau, Josh",2019,Sin Valor
Developing Interactive Visualizations Focusing on Computational Thinking in K-12 Computer Science Education,"\v{S}iaulys, Tomas",2021,"Visualization is a common feature of computer science education tools in K-12 and beyond. However, there are still many unknowns about what makes visual tools effective. The focus of this research is to explore the properties of effective interactive visualizations in non-programming tasks for teaching computational thinking in K-12. Main contribution is expected to be an evaluated model of a system for developing these interactive visualizations."
"Developing Machine Learning Agency Among Youth: Investigating Youth Critical Use, Examination, and Production of Machine Learning Applications","Adisa, Ibrahim Oluwajoba",2023,"Abstract. Young people are surrounded by machine learning (ML) devices and their lived experiences are increasingly shaped by the ML technologies that are ever-present in their lives. As innovations in machine learning technologies continue to shape society, it raises important implications for what young people learn, their career trajectories, and the required literacies they need to thrive in this changing occupational environment. Youth are particularly vulnerable to the impact of ML and very little has been done to empower them to critically engage in the discourse surrounding the next generation of technologies that have a marked potential to shape their lives for better or worse. My dissertation work seeks to develop youth autonomy and agency around ML by designing an intervention that supports youth critical use, examination, and production of ML applications in the context of promoting self-expression and social good. I will conduct a qualitative single case study research and collect multiple forms of data using interviews, story completions, digital artifacts, observations, and focus group discussions. These data sources will allow me to conduct an intensive analysis and investigation of how youth populations can be supported to develop the skills, practices and critical consciousness needed to effectively engage with machine learning technologies. Through my research, I also hope to advance the literature on how young people creatively collaborate with ML and use ML for self-expression."
Developing Middle School Students' AI Literacy,"Lee, Irene and Ali, Safinah and Zhang, Helen and DiPaola, Daniella and Breazeal, Cynthia",2021,"In this experience report, we describe an AI summer workshop designed to prepare middle school students to become informed citizens and critical consumers of AI technology and to develop their foundational knowledge and skills to support future endeavors as AI-empowered workers. The workshop featured the 30-hour ""Developing AI Literacy"" or DAILy curriculum that is grounded in literature on child development, ethics education, and career development. The participants in the workshop were students between the ages of 10 and 14; 87% were from underrepresented groups in STEM and Computing. In this paper we describe the online curriculum, its implementation during synchronous online workshop sessions in summer of 2020, and preliminary findings on student outcomes. We reflect on the successes and lessons we learned in terms of supporting students' engagement and conceptual learning of AI, shifting attitudes toward AI, and fostering conceptions of future selves as AI-enabled workers. We conclude with discussions of the affordances and barriers to bringing AI education to students from underrepresented groups in STEM and Computing."
Developing Student's Computational Thinking through Agent-Based Modeling in Secondary Education,"Musaeus, Line Have",2019,"Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to develop pedagogies for introducing students to CT. This research study examines the possible synergistic effect of implementing CT into a STEM subject, e.g. biotechnology. The study uses three interventions in which students work with predesigned computer models. Quantitative and qualitative methods are being used to gather data for analyzing students' gain in both content knowledge and CT."
"Developing the computational thinking process in Physics courses, an empirical study for the learning of the rigid body concept in engineering students","Juárez, Erika Cervantes and Guzmán, Daniel Sánchez",2022,Sin Valor
Development and assessment of computational thinking: A methodological proposal and a support tool,"Pérez, Alexis Daniel Fuentes and Valladares, Gara Miranda",2018,Sin Valor
Development and Evaluation of Quizzes Aimed at Quantifying Computational Thinking,"Tanioka, Hiroki and Yano, Rina",2021,Sin Valor
Development and Implementation of an Online Adaptive Gamification Platform for Learning Computational Thinking,"Ng, Andrew Keong and Atmosukarto, Indriyati and Cheow, Wean Sin and Avnit, Karin and Yong, Mun Hin",2021,Sin Valor
Development and Preliminary Validation of the Assessment of Computing for Elementary Students (ACES),"Parker, Miranda C. and Kao, Yvonne S. and Saito-Stehberger, Dana and Franklin, Diana and Krause, Susan and Richardson, Debra and Warschauer, Mark",2021,"As reliance on technology increases in practically every aspect of life, all students deserve the opportunity to learn to think computationally from early in their educational experience. To support the kinds of computer science curriculum and instruction that makes this possible, there is an urgent need to develop and validate computational thinking (CT) assessments for elementary-aged students. We developed the Assessment of Computing for Elementary Students (ACES) to measure the CT concepts of loops and sequences for students in grades 3-5. The ACES includes block-based coding questions as well as non-programming, Bebras-style questions. We conducted cognitive interviews to understand student perspectives while taking the ACES. We piloted the assessment with 57 4th grade students who had completed a CT curriculum. Preliminary analyses indicate acceptable reliability and appropriate difficulty and discrimination among assessment items. The significance of this paper is to present a new CT measure for upper elementary students and to share its intentional development process."
Development and Validation of the Computational Thinking Concepts and Skills Test,"Peteranetz, Markeya S. and Morrow, Patrick M. and Soh, Leen-Kiat",2020,"Calls for standardized and validated measures of computational thinking have been made repeatedly in recent years. Still, few such tests have been created and even fewer have undergone rigorous psychometric evaluation and been made available to researchers. The purpose of this study is to report our work in developing and validating a test of computational thinking concepts and skills and to compare different scoring methods for the test. This computational thinking exam is intended to be used in computing education research as a common measure of computational thinking so that the research community will be able to make more meaningful comparisons across samples and studies. The Computational Thinking Concepts and Skills Test (CTCAST) was administered to students in several courses, evaluated and revised, and then administered to another group of students. Part of the revision included changing half of the items to a multiple-select format. The test scores using the three scoring methods were compared to each other and to scores on a different test of core computer science knowledge. Results indicate the CTCAST and the test of core computer science knowledge measure similar, but not identical, aspects of students' knowledge and skills, and that item-level statistics vary according to the scoring method that is used. Recommendations for using and scoring the test are presented."
Development and Validation of the Engineering Computational Thinking Diagnostic for Undergraduate Students,"Mendoza Diaz, Noemi V. and Yoon, So Yoon and Trytten, Deborah A. and Meier, Russ",2023,Sin Valor
Development of a Computational Thinking Learning Tool Using a Railway Toy and Music,"Ozawa, T. and Matsumoto, M.",2025,Sin Valor
Development of a Lean Computational Thinking Abilities Assessment for Middle Grades Students,"Wiebe, Eric and London, Jennifer and Aksit, Osman and Mott, Bradford W. and Boyer, Kristy Elizabeth and Lester, James C.",2019,"The recognition of middle grades as a critical juncture in CS education has led to the widespread development of CS curricula and integration efforts. The goal of many of these interventions is to develop a set of underlying abilities that has been termed computational thinking (CT). This goal presents a key challenge for assessing student learning: we must identify assessment items associated with an emergent understanding of key cognitive abilities underlying CT that avoid specialized knowledge of specific programming languages. In this work we explore the psychometric properties of assessment items appropriate for use with middle grades (US grades 6-8; ages 11-13) students. We also investigate whether these items measure a single ability dimension. Finally, we strive to recommend a ""lean"" set of items that can be completed in a single 50-minute class period and have high face validity. The paper makes the following contributions: 1) adds to the literature related to the emerging construct of CT, and its relationship to the existing CTt and Bebras instruments, and 2) offers a research-based CT assessment instrument for use by both researchers and educators in the field."
"Development of a Questionnaire on Self-concept, Motivational Beliefs, and Attitude Towards Programming","Leifheit, Luzia and Tsarava, Katerina and Moeller, Korbinian and Ostermann, Klaus and Golle, Jessika and Trautwein, Ulrich and Ninaus, Manuel",2019,"Academic self-concept, motivational beliefs, and attitudes towards a school subject are relevant for learning and educational achievement. A positive self-concept in science and mathematics is argued to motivate students to persist and advance in studying these subjects. In particular, self-concept, motivational beliefs, and attitudes towards STEM domains were found to be predictive of educational achievement. Recently, programming was suggested to be a key competence in education.To assess self-concept, motivational beliefs, and attitudes towards programming, we developed a new questionnaire based on existing scales for mathematics. The new questionnaire assesses the same aspects for programming on seven subscales, such as self-concept, belief about usefulness, and self-reported persistence when working on programming tasks.We conducted a pilot study in which we used this questionnaire to measure self-concept, motivational beliefs, and attitudes towards programming. The study was set in the context of an extracurricular course on computational thinking (CT) for elementary school students between the ages of seven and ten years. Before the start of the course, we assessed all 31 participating students' self-concept, motivational beliefs, and attitudes towards programming using the developed questionnaire and their CT skills using the Computational Thinking test (CTt).Our results confirmed the expected associations between the aspects assessed by our questionnaire. However, we did not find significant associations of questionnaire results and CT skills. Consequently, future research involving a larger sample is needed to better understand the association between children's actual performance and their self-concept, motivational beliefs, and attitudes towards programming."
Development of a Video Game Design program in the college of engineering,"Ventura, John and Qualls, Joseph and Ventura, Matthew and McGinnis, Raymond and Baker, Chad and Nikaido, Breeana",2017,Sin Valor
Development of a video game that teaches the fundamentals of computer programming,"Ventura, Matthew and Ventura, John and Baker, Chad and Viklund, Grant and Roth, Randall and Broughman, Jonas",2015,Sin Valor
Development of an Open-Source Emotion-Based Adaptive Learning Support System using Computational Thinking Activities,"Herrero-\'{A}lvarez, Rafael",2023,This report summarizes the information related to a PhD project that aims to develop an Open-Source Emotion-Based Adaptive Learning Support System through Computational Thinking activities. This paper outlines the proposed objectives and provides an update on the progress made in research to date.
Development of computational thinking and collaborative learning in kindergarten using programmable educational robots: a teacher training experience,"Gonz\'{a}lez, Yen Air Caballero and Mu\~{n}oz-Repiso, Ana Garc\'{\i}a-Valc\'{a}rcel",2017,"Nowadays, the teaching-learning processes are constantly changing, one of the latest modifications promises to strengthen the development of digital skills and thinking in the participants, from an early age. In this sense, the present article shows the advances of a study oriented to the formation of programming abilities, computational thinking and collaborative learning in an initial education context. As part of the study it was initially proposed to conduct a training day for teachers who will participate in the experimental phase of the research, considering this human resource as a link of great importance to achieve maximum use of students in the development of curricular themes of the level, using ICT resources and programmable educational robots. The criterion and the positive acceptance expressed by the teaching group after the evaluation applied at the end of the session, constitute a good starting point for the development of the following activities that make up the research in progress."
Development of Computational Thinking in High School Students: A Case Study in Chile,"González, Felipe and López, Claudia and Castro, Carlos",2018,Sin Valor
Development of computational thinking skills and collaborative learning in initial education students through educational activities supported by ICT resources and programmable educational robots,"Gonz\'{a}lez, Yen Air Caballero and Mu\~{n}oz-Repiso, Ana Garc\'{\i}a-Valc\'{a}rcel",2017,"The purpose of this paper is to present the PhD thesis research plan, which aims to design, integrate and evaluate educational activities mediated by ICT resources and programmable educational robots, in initial education students, obtaining collaborative learning and Training of computational thinking skills. The research will be developed through a mixed methodology, with the intention of being able to carry out a more complete analysis and evaluation of the subject, obtaining data from different sources (teachers, students and coordinators of educational level). Various instruments such as interviews, questionnaires and participant type observation will be used, focusing on teachers and students. In addition, a rubric will be used to evaluate students' performance in the development of learning activities, through the sequential programming of educational robots. The results that will be obtained with this research will allow to carry out a proposal of technological educational action of great quality, based on the benefits and limitations of the integration of ICT resources and programmable Robots, contributing in a significant way to the implementation of new approaches for the Teaching-learning curriculum content from an early age and empowering participants in the development of computational thinking skills and collaborative learning."
Development of Computational Thinking Skills through Unplugged Activities in Primary School,"Brackmann, Christian P. and Rom\'{a}n-Gonz\'{a}lez, Marcos and Robles, Gregorio and Moreno-Le\'{o}n, Jes\'{u}s and Casali, Ana and Barone, Dante",2017,"Computational thinking is nowadays being widely adopted and investigated. Educators and researchers are using two main approaches to teach these skills in schools: with computer programming exercises, and with unplugged activities that do not require the use of digital devices or any kind of specific hardware. While the former is the mainstream approach, the latter is especially important for schools that do not have proper technology resources, Internet connections or even electrical power. However, there is a lack of investigations that prove the effectiveness of the unplugged activities in the development of computational thinking skills, particularly for primary schools. This paper, which summarizes a quasi-experiment carried out in two primary schools in Spain, tries to shed some light on this regard. The results show that students in the experimental groups, who took part in the unplugged activities, enhanced their computational thinking skills significantly more than their peers in the control groups who did not participate during the classes, proving that the unplugged approach may be effective for the development of this ability."
Development of Computational Thinking Skills: An Experience With Undergraduate Students,"Laura-Ochoa, Leticia and Bedregal-Alpaca, Norka",2021,Sin Valor
Development of Computational Thinking: Student Motivation Using Ozobot,"\v{Z}\'{a}\v{c}ek, Martin and Smolka, Pavel",2020,"The authors of the article focus on Computation thinking. The aim of the article is any motivate the student primary and secondary (high) schools using robotic toys: Ozobot EVO. The theoretical part of the thesis consists of a description of the motivation and a description of Computational thinking. The practical part shows the topics on how to work with Ozobots and how to involve them in teaching. The level of thinking of young people is very low, for this reason, we have set ourselves the goal of developing thinking using algorithms."
Development of CT Using Need Assessment and Gamification: A Systematic Review,"Aroonsiwagool, Athit and Tuntiwongwanich, Somkiat",2021,Sin Valor
Development of iOS Software n-Queens Problem for Education and Its Application for Promotion of Computational Thinking,"Sasaki, Yuji and Fukui, Masanori and Hirashima, Tsukasa",2019,Sin Valor
Development of Mobile Application for The Concept of Pattern Recognition in Computational Thinking for Mathematics Subject,"Abdullah, Abdul Halim and Othman, Muhammad Asnawi and Ismail, Norulhuda and Rahman, Sharifah Nurarfah S. Abd and Mokhtar, Mahani and Zaid, Norasykin Mohd",2019,Sin Valor
Development of Phylum Chordata Sound Recognition System using Machine Learning and Deep Learning Techniques: A Case Study of Catfish,"Akinyemi, Lateef Adesola and Oshinuga, Olamide Peter and Eshilokun, Oluwafikunmi Adegbenga and Oladejo, Sunday Oladayo and Ekwe, Stephen Obono",2023,Sin Valor
Development of Web-Based Programming Learning Support System with Graph Drawing of Mathematics as a Learning Task,"Iwamoto, Tomoya and Matsumoto, Shimpei",2019,Sin Valor
Diagramming as a Strategy for Primary/Elementary-Age Program Comprehension,"Salac, Jean",2020,"Worldwide, many countries are implementing Computer Science (CS) and Computational Thinking (CT) instruction at the primary and secondary school level. This push for CS/CT instruction in younger ages increases the need for pedagogical practices, such as learning strategies, that are effective for a wide array of learners. However, research into strategies for young learners is relatively sparse, especially compared with strategies at the university level. This study aims to investigate a commonly used practice at the university level, diagramming, as a potential strategy for students in grades 4-8 (ages 10-15). Our hope is that diagramming can be added to a suite of strategies to support program comprehension in younger learners."
Didactic Methods of Integrating Programming in Mathematics in Primary School: Findings from a Swedish National Project,"Ahmed, Gashawa and Nouri, Jalal and Zhang, LeChen and Nor\'{e}n, Eva",2020,"The association between mathematics and programming in an educational context is not new. Today, programming has been introduced into curricula worldwide for younger children. In the Swedish case, primary school teachers are expected to integrate programming in mathematics education from autumn 2018. However, Swedish teachers' knowledge of programming and programming didactics is limited. Meanwhile, there is little research on K-9 programming education. This has led to the dilemma that the mathematics teachers have limited support in didactic knowledge and good examples. This study reports on a teacher professional development project in programming. More specifically, teachers used Lesson Study to plan, execute, and evaluate lessons that integrated programming into various school subjects in elementary school. This study analyzed the didactic strategies developed in 10 lesson studies, as well as mapped the opportunities and challenges of pupils' learning in the mathematics subject. The result was the identification of three didactic strategies, which were analog programming, robot programming and block programming, as well as 11 didactic methods applied within these strategies. The paper contributes with examples of the didactic methods that teachers have developed and evaluated using lesson study. The paper further provides insights on how teachers can take progression into account by applying the three didactic strategies. At last but not least, the study shows a great need for teachers to develop computational thinking abilities."
Digital and Physical Fabrication as Multimodal Learning: Understanding Youth Computational Thinking When Making Integrated Systems Through Bidirectionally Responsive Design,"Richard, Gabriela T. and Giri, Sagun",2019,"This article proposes and explores the kinds of computational thinking, creative practices, design activities, and inclusive learning opportunities provided to diverse high school youth when designing integrated systems through simultaneously physically and digitally responsive wearable games and systems. Previous work in this area, conducted by Richard, coined the term “bidirectionally responsive design” (BRD) to describe the design of dual-feedback systems using multiple digital and physical interfaces. BRD also emphasizes using simplified fabrication tools, media and coding platforms, and microcontrollers common in youth content creation communities and makerspaces. This study provides a framework to analyze computational concepts, practices, and perspectives that leverage an integrated systems and multimodal learning approach, such as BRD, adding to, building on, and integrating previous analytic approaches to looking at Scratch coding, media design, physical computing and e-textiles. Using a detailed case study of one team during one of the early workshop iterations, we conduct a multimodal analysis of bidirectionally responsive making activities and discuss the ways that they present novel understanding of integrating diverse interests and encouraging collaborative and distributed computational thinking. We further examine how BRD operationalizes and extends multimodal learning theory by adding tangible and integrative dimensions as additional modalities learners can leverage to facilitate meaning making, metacognition, and agency. We also discuss how designing integrated systems, as facilitated through BRD, provides an opportunity to engage in authentic practices around the design of complex systems."
Digital capital: a platform for developing computational thinking,"Vrieler, Tina",2017,"The introduction of computational thinking (CT) and computer science (CS) in the K-12 curricula highlights the need to understand young learners' various perceptions and attitudes towards CT and CS. To address this challenge we draw on the work of Bourdieu's capital and Archer et al.'s science capital to propose a new capital ""digital capital"" as a theoretical framework. We believe that a study on young people's development of digital capital is long overdue and can give a good indication of pupils' potential for developing CT skills, as well as CS aspirations in the future."
Digital Design Literacy in K-9 Education: Experiences from Pioneer Teachers,"Van Mechelen, Maarten and Wagner, Marie-Louise and Baykal, G\""{o}k\c{c}e Elif and Charlotte Smith, Rachel and Iversen, Ole Sejer",2021,"Based on a comprehensive account of digital design literacy, we report from an interview study with pioneer teachers to disclose their experiences from teaching design in formal K-9 education. Unique for the study is that the interviewees were highly qualified K-9 teachers with research-based in-service training in design and more than three years of teaching experience in the area. Our findings suggest that digital design literacy supports children's agency and empowerment in relation to digital technology. Moreover, digital design literacy provides children with four broad competence areas of effective teamwork, contextual inquiry, imagination and creation, and design process navigation. Our study also demonstrates that digital design literacy does not fit seamlessly within the path of conventional school courses. Several structural barriers in formal education such as summative assessments, teacher-roles, failure-prevention and children's lack of experiences with open-ended assignments are reported and discussed in relation to previous studies in child-computer interaction research."
Digital ink for cognitive assessment of computational thinking,"Ambrósio, Ana Paula and Xavier, Cleon and Georges, Fouad",2014,Sin Valor
Digital Legacies on Paper: Reading Punchcards with Computer Vision,"Jansen, Gregory",2019,Sin Valor
Discussing the Challenges Related to Deployment of Computational Thinking in Brazilian Basic Education,"Carvalho, Tainã and Andrade, Daiane and Silveira, Jayne and Auler, Victor and Cavalheiro, Simone and Aguiar, Marilton and Foss, Luciana and Pernas, Ana and Reiser, Renata",2013,Sin Valor
Discussion of Ability Cultivation of Computational Thinking in Course Teaching,"Deng, Zhenrong and Huang, Wenming and Dong, Rongsheng",2009,Sin Valor
DISSECT: An experiment in infusing computational thinking in a sixth grade classroom,"Peel, A. and Fulton, J. and Pontelli, E.",2015,Sin Valor
DISSECT: An experiment in infusing computational thinking in K-12 science curricula,"Arraki, K. and Blair, K. and Bürgert, T. and Greenling, J. and Haebe, J. and Lee, G. and Peel, A. and Szczepanski, V. and Pontelli, E. and Hug, Sarah",2014,Sin Valor
DISSECT: Analysis of pedagogical techniques to integrate computational thinking into K-12 curricula,"Burgett, T. and Folk, R. and Fulton, J. and Peel, A. and Pontelli, E. and Szczepanski, V.",2015,Sin Valor
DISSECT: Exploring the relationship between computational thinking and English literature in K-12 curricula,"Nesiba, Natasha and Pontelli, Enrico and Staley, Timothy",2015,Sin Valor
DISSECT: integrating computational thinking in the traditional K-12 curricula through collaborative teaching (abstract only),"Hug, Sarah and Sandry, Josh and Vordermann, Ryan and Pontelli, Enrico and Wright, Ben",2013,"The goal of the DISSECT program is to integrate computational thinking lessons into general education K-12 classrooms via graduate student/teacher partnerships. The idea of combining the teaching of CT with other disciplines is not new and it has taken shape in a variety of recent efforts in the formal education of youth. What is promising and innovative is the approach as it is implemented in K12 DISSECT classrooms. Through a collaborative teaching partnership, teachers gain a new perspective regarding computer science, and in cooperation with graduate students well-versed in computer science concepts, develop lessons and course modules that serve two purposes: 1.) Address K-12 content standards in core disciplines (e.g., language arts, life science) and 2.) Introduce CT concepts, such as abstraction, algorithms, data analysis and modeling. This poster describes ways computational thinking (CT) is taught in general K-12 classrooms in New Mexico through cooperative teaching. Along with their potential to stimulate interest in computing, these pilot modules were viewed by K12 teachers as enhancing disciplinary course content that teachers are charged with teaching (e.g., middle school science, language arts), deemed vital for sustainability in K12 schools by participating teachers. Preliminary data indicate graduate student and teacher satisfaction with cooperative teaching of CT. Next steps for research will involve student level data collection and analysis."
Diverse Approaches to School-wide Computational Thinking Integration at the Elementary Grades: A Cross-case Analysis,"Sherwood, Heather and Yan, Wei and Liu, Ruohan and Martin, Wendy and Adair, Alexandra and Fancsali, Cheri and Rivera-Cash, Edgar and Pierce, Melissa and Israel, Maya",2021,"Elementary schools throughout the United States are attempting to integrate computational thinking (CT) into their instruction, often without guidance from research about effective approaches for achieving particular CT goals. This cross-case study investigated the school-wide integration of CT in three elementary schools in a large urban school district in the Northeast that has a district-led CS for All initiative. Data included interviews with teachers, professional development providers, and school administrators as well as surveys from teachers and classroom observations in each participating school. Findings revealed three distinct approaches to integration: (a) single teacher leader-driven model, (b) scaffolded professional development model, and (c) intensive coaching model. These approaches reflect the visions set by administrators and teachers, methods used by professional development providers, and cultures of each school. Across the case studies, common pedagogical approaches included strategic use of both unplugged and plugged activities with a range of computational tools, a focus on collaborative project-based learning, and the use of CT-specific academic language to anchor new CT learning within the academic disciplines. The study highlighted advantages and challenges within each integration approach with implications for schools considering CT integration."
DIY Digital Interventions: Behaviour Change with Trigger-Action Programming,"Scott, Ava Elizabeth and Reicherts, Leon and Purohit, Aditya Kumar and Hossain, Elahi and Stefanidi, Evropi and Wagener, Nadine and Sch\""{o}ning, Johannes and Rogers, Yvonne and Holzer, Adrian",2024,"Whether it is sleep, diet, or procrastination, changing behaviours can be challenging. Individuals could design and build their own personalised digital interventions to help them reach their goals, but little is known about this process. Building upon previous research we propose the Behaviour Change with Trigger-Action Programming (BC-TAP) model which describes how individuals could bridge the gap between their current and desired behaviour through the creation of 'Do-It-Yourself' (DIY) digital interventions. We conducted a two-day participatory workshop based on the BC-TAP model with 28 participants. Participants articulated plans to change a behaviour of their choice and represented these plans in mobile device automations. After using their interventions for up to three weeks, participants reflected on their experience. Our findings report opportunities and challenges at each stage of the process. While formulating a digital proxy for certain behaviours was challenging, both failures and successes facilitated participants' awareness of their behaviour, and their ability to change it."
Do Behavioral Factors Influence the Extent to which Students Engage with Formative Practice Opportunities?,"Aggarwal, Ashish and Adepu, Manas and Garcia-Marin, Alex and Gardner-McCune, Christina",2024,"With the increasing interest and enrollment in programming courses, educators must discover innovative and inclusive teaching methods to effectively cater to diverse learner needs and varying levels of prior knowledge. Introductory programming courses (CS1) can prove arduous for novices and insufficiently stimulating for those with experience, creating an educational dilemma. Striking a balance between students' expectations and engagement becomes challenging for educators, especially given the expanding pre-higher education CS exposure.To tackle this challenge, offering optional extra practice opportunities could aid students in mastering concepts, particularly those benefitting from rigorous practice. However, personal motivation and other factors may hinder their engagement, undermining potential benefits. To enhance engagement, providing a minor amount of extra credit as an extrinsic incentive might be effective.In this context, students' engagement with extra credit quizzes (ECQs) is influenced by various factors, with self-regulation and time management playing a pivotal role. This study delves into the correlation between students' weekly ECQ submission time and their total quiz interactions. Specifically, it examines whether the timing of weekly ECQ submissions varies based on the number of quizzes engaged. The analysis also explores group discrepancies in submission times, considering factors like gender and prior programming experience (PPE) relative to ECQ engagement. Ultimately, these insights could reshape educational approaches to better address student needs."
Do Structured Flowcharts Outperform Pseudocode? Evidence From Eye Movements,"Andrzejewska, Magdalena and Stolińska, Anna",2022,Sin Valor
Do we really need computational thinking?,"Nardelli, Enrico",2019,"Considering the expression ""computational thinking"" as an entry point to understand why the fundamental contribution of computing to science is the shift from solving problems to having problems solved."
Documentation comes to life in computational thinking acquisition with agentsheets,"Mota, Marcelle Pereira and Faria, Leonardo Serra and de Souza, Clarisse Sieckenius",2012,"This paper is about the use of live documentation in Computational Thinking Acquisition (CTA) programs with AgentSheets. AgentSheets is a visual programming environment to build games. Based on previous studies showing that semiotic relations among visual game elements could be further explored to the benefit of the learners, we designed PoliFacets, a Web extension to AgentSheets cast as a live conversational document. With it, teachers and learners can follow different threads of conversation about (multiple representations of) game elements and relations between them. We present a qualitative evaluation study of PoliFacets with two experienced AgentSheets instructors and three school teachers trained to coach students in CTA programs. Findings show that although our system has not yet completely fulfilled our design intent, it has led participants to gain relevant insights about their teaching and learning, as well as to articulating doubts and misunderstandings that otherwise could have gone unnoticed."
Does computational thinking correlate with personality? the non-cognitive side of computational thinking,"Rom\'{a}n-Gonz\'{a}lez, Marcos and P\'{e}rez-Gonz\'{a}lez, Juan-Carlos and Moreno-Le\'{o}n, Jes\'{u}s and Robles, Gregorio",2016,"Computational thinking (CT) is being considered as a key set of problem-solving skills to be acquired by the new generations of digital citizens and workers in order to thrive in a computer-based world. However, from a psychometric point of view, CT is still a poorly defined psychological construct: there is no full consensus on a formal definition of CT or how to measure it; and its correlations with other psychological constructs, whether cognitive or non-cognitive, have not been completely established. In response to the latter, this paper aims to study specifically the correlations between CT and the several dimensions from the 'Big Five' model of human personality: Conscientiousness, Openness to Experience, Extraversion, Agreeableness, and Neuroticism. To do so, the Computational Thinking Test (CTt) and the Big Five Questionnaire-Children version (BFQ-C) are administered on a sample (n = 99) of Spanish students from 5th to 10th grade. Results show statistically significant correlations between CT and: Openness to Experience (r = 0.41), Extraversion (r = 0.30), and Conscientiousness (r = 0.27). These results are partially consistent with the literature about the links between cognitive and personality variables, and corroborate the existence of a non-cognitive side of CT. Hence, educational interventions aimed at fostering CT should take into account these non-cognitive issues in order to be comprehensive and successful."
Does computational thinking really have an impact on academic performance? A systematic review,"Zhou, Pinghong and Tang, Yumin and Zhang, Yi and Yu, Yue and Li, Yixin",2024,Sin Valor
Does Computer Game Design and Programming Benefit Children? A Meta-Synthesis of Research,"Denner, Jill and Campe, Shannon and Werner, Linda",2019,"It is widely believed that there are educational benefits to making computer games, but there is no systematic review of research on this topic. This article describes a meta-synthesis of research on children designing and programming computer games that investigates the extent to which there is evidence of benefits for computer science learning and motivation. Over 400 articles were identified, and 68 articles met the inclusion criteria. A systematic analysis and synthesis across studies showed some evidence that computer game design and programming can lead to changes in programming knowledge, problem solving, and computer science attitudes and confidence. However, most of the evidence described engagement in computing-related practices and did not measure learning. The findings were mostly positive, although several studies noted more negative attitudes toward programming after making games. The results were similar across different pedagogical approaches, although social interaction may provide unique opportunities for computer science learning. The synthesis resulted in a list of design elements for studying computer game design and programming activities; these can be used to increase the availability of evidence about learning. The article concludes with the identification of gaps in the research and suggestions for additional research."
Does Musical Context Improve Computational Thinking Skills?,"Padhye, Harsh and Gibson, Rachel and Bull, Glen and Nguyen, N. Rich",2023,"The Make-To-Learn Lab at the University of Virginia developed TuneScope, a tool to facilitate computational thinking (CT) through music, to help democratize computer science education. Built upon the existing framework of Snap! (University of California, Berkeley), TuneScope leverages sound analysis, design, and music composition to engage novices with CT fundamentals. Existing research shows the benefits of using familiar contexts to teach CT, and TuneScope builds upon this with musical contexts. We have designed a course centered around the use of TuneScope to teach fundamentals of CT through music. In this paper, we investigate how students use TuneScope to develop sequential melodies, build chords, and sample recorded sounds while simultaneously learning fundamental programming principles such as algorithm design and abstraction. Using sentiment analysis, we demonstrate that students have had a largely positive experience in learning and grasping CT fundamentals throughout a diverse curriculum. As of today, the total enrollment of the course consists of over 45% female students with a 100% retention rate. TuneScope has also been accepted as an official Snap! library to be used by thousands of Snap! users worldwide."
Dr. Scratch: a Web Tool to Automatically Evaluate Scratch Projects,"Moreno-Le\'{o}n, Jes\'{u}s and Robles, Gregorio",2015,"This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment."
Dragon architect: open design problems for guided learning in a creative computational thinking sandbox game,"Bauer, Aaron and Butler, Eric and Popovi\'{c}, Zoran",2017,"Educational games have a potentially significant role to play in the increasing efforts to expand access to computer science education. Computational thinking is an area of particular interest, including the development of problem-solving strategies like divide and conquer. Existing games designed to teach computational thinking generally consist of either open-ended exploration with little direct guidance or a linear series of puzzles with lots of direct guidance, but little exploration. Educational research indicates that the most effective approach may be a hybrid of these two structures. We present Dragon Architect, an educational computational thinking game, and use it as context for a discussion of key open problems in the design of games to teach computational thinking. These problems include how to directly teach computational thinking strategies, how to achieve a balance between exploration and direct guidance, and how to incorporate engaging social features. We also discuss several important design challenges we have encountered during the design of Dragon Architect. We contend the problems we describe are relevant to anyone making educational games or systems that need to teach complex concepts and skills."
Draw2Code: Low-Cost Tangible Programming for Creating AR Animations,"Im, Hyejin and Rogers, Chris",2021,"Computational thinking is nowadays considered an essential skill in the K-12 educational curriculum. Many tangible computational kits designed for early childhood are either too expensive to benefit a wide range of children or only provide predetermined challenges with limited creative content creation opportunities. In this paper, we investigated low-cost and expressive tangible interfaces that foster computational literacy. We present Draw2Code, a paper-based computational kit for young children to create an interactive AR animation. Children use Draw2Code to make their paper drawing alive as an animated virtual sprite and control it using hand gestures. It exposes children to basic programming concepts through playful and tangible interaction. Results from our initial evaluation with nine child-parent dyads indicate that children ages 5 to 12 successfully used Draw2Code and played with Draw2Code in 33 minutes on average while creating 2 to 5 diverse AR animations based on their ideas. Throughout the session, all children were engaged in computational thinking concepts and practices and learned drawing and gesture-based interactions."
DWES: A Dynamic Weighted Evaluation System for Scratch based on Computational Thinking,"Chai, Xiaolin and Sun, Yan and Luo, Hong and Guizani, Mohsen",2022,Sin Valor
Early Developmental Activities and Computing Proficiency,"Cutts, Quintin and Patitsas, Elizabeth and Cole, Elizabeth and Donaldson, Peter and Alshaigy, Bedour and Gutica, Mirela and Hellas, Arto and Larraza-Mendiluze, Edurne and McCartney, Robert and Riedesel, Charles",2018,"As countries adopt computing education for all pupils from primary school upwards, there are challenging indicators: significant proportions of students who choose to study computing at universities fail the introductory courses, and the evidence for links between formal education outcomes and success in CS is limited. Yet, as we know, some students succeed without prior computing experience. Why is this?  Some argue for an innate ability, some for motivation, some for the discrepancies between the expectations of instructors and students, and some -- simply -- for how programming is being taught. All agree that becoming proficient in computing is not easy. Our research takes a novel view on the problem and argues that some of that success is influenced by early childhood experiences outside formal education. In this study, we analyzed over 1300 responses to a multi-institutional and multi-national survey that we developed. The survey captures enjoyment of early developmental activities such as childhood toys, games and pastimes between the ages 0 --- 8 as well as later life experiences with computing. We identify unifying features of the computing experiences in later life, and attempt to link these computing experiences to the childhood activities. The analysis indicates that computing proficiency should be seen from multiple viewpoints, including both skill-level and confidence. Our analysis is the first to show, we believe, that particular early childhood experiences are linked to parts of computing proficiency, namely those related to confidence with problem solving using computing technology. These are essential building blocks for more complex use. We recognize issues in the experimental design that may prevent our data showing a link between early activities and more complex computing skills, and suggest adjustments for future studies. Ultimately, we expect that this line of research will feed in to early years and primary education, and thereby improve computing education for all."
Early validation of computational thinking pattern analysis,"Koh, Kyu Han and Nickerson, Hilarie and Basawapatna, Ashok and Repenning, Alexander",2014,"End-user game design affords teachers a unique opportunity to integrate computational thinking concepts into their classrooms. However, it is not always apparent in game and simulation projects what computational thinking-related skills students have acquired. Computational Thinking Pattern Analysis (CTPA) enables teachers to visualize which of nine specific skills students have mastered in game design that can then be used to create simulations. CTPA has the potential to automatically recognize and calculate student computational thinking skills, as well as to map students' computational thinking skill progression, as they proceed through the curriculum. The current research furthers knowledge of CTPA by exploring its validity based on how its performance correlates to human grading of student games. Initial data from this validation study indicates that CTPA correlates well with human grading and that it can even be used to predict students' future achievement levels given their current skill progression, making CTPA a potentially invaluable computational thinking evaluation tool for teachers."
EcoMOD: Integrating Computational Thinking into Ecosystems Science Education via Modeling in Immersive Virtual Worlds (Abstract Only),"Dickes, Amanda and Metcalf, Shari and Kamarainen, Amy and Reilly, Joe and Brennan, Karen and Grotzer, Tina and Dede, Chris",2018,"In recent years, the field of education has challenged researchers and practitioners to incorporate computing as an essential focus of K12 STEM education. Widely recognized as a ""basic skill"" necessary for economic opportunity and social mobility, integrating computing within K12 STEM supports learners of all ages in applying computational thinking within established and accessible contexts while co-developing practices essential to mathematical and scientific expertise. The EcoMOD project is an example of such an integration. In EcoMOD, immersive virtual environments are blended with interactive computational modeling tools designed specifically for younger children in an attempt to support ecological knowledge, complex causal reasoning and computational creation in third grade students. Our curricular design is grounded in the Science-as-Practice perspective and literature on young children's computing. In this proposal, we present outcomes from early pilot work with 35 third graders across the greater Boston area. This work has implications for designers of educational technologies by illuminating aspects of children's understanding that researchers and designers can leverage to support deeper and earlier understandings of ecological dynamics and computational practices."
"Ecosystems That Build Equitable, K-5 Sustainable Computer Science Education","Levitt, Diane and Ray, Meg",2024,"The rollout of computer science education has been dependent on a patchwork of uncoordinated professional learning experiences. This has left some schools serving students from underrepresented groups without an articulated, rigorous, joyful K-12 CS education. Based on our work with four urban schools serving such students, we propose that an ecosystem of support that prepares every administrator and teacher to include CS in every student's education with a whole school approach and sustained professional learning, is one way to assure an equitable, sustainable CS education. We propose changes in policy to scaffold such an ecosystem."
Educational Digital Games and Computational Thinking for students with Intellectual Disabilities - Guidelines for accessibility,"Dutra, Taynara Cerigueli and Felipe, Daniel and Gasparini, Isabela and Maschio, Eleandro",2021,Sin Valor
Educational Robotics and Computational Thinking Development in Preschool,"Gerosa, Anaclara and Koleszar, Víctor and Gómez-Sena, Leonel and Tejera, Gonzalo and Carboni, Alejandra",2019,Sin Valor
Educational Robotics and Computer Programming in Early Childhood Education: A Conceptual Framework for Assessing Elementary School Students’ Computational Thinking for Designing Powerful Educational Scenarios,"Alam, Ashraf",2022,Sin Valor
"Educational Robotics and Mediated Transfer: Transitioning from Tangible Tile-based Programming, to Visual Block-based Programming","Pedersen, Bjarke Kristian Maigaard Kj\ae{}r and Jacobsen, Didde Marie and Teichert, Lukas Juhl Lyk and Nielsen, Jacob",2021,"In this paper we present the results from a study in which participants (n=26, aged 6-9) were exposed to two different ER systems, one based on tangible tile-based programming and one on visual block-programming. During the transition from the first to the second system, mediated transfer of knowledge regarding computational concepts, were observed. Furthermore, the participants CT skills were likewise observed to improve throughout the study, across both ER systems."
Educational Robotics Applied to Computational Thinking Development: A Systematic Mapping Study,"Souza, Isabelle M. L. and Andrade, Wilkerson L. and Sampaio, Lívia M. R.",2021,Sin Valor
Educational Robotics as a Strategy to Develop Computational Thinking in Basic General Education,"Quezada, Lida and Maldonado, Marlon",2022,Sin Valor
Educational robotics for the formation of programming skills and computational thinking in childish,"González, Yen Air Caballero and Muñoz-Repiso, Ana García-Valcárcel",2017,Sin Valor
EducationPaving the way for computational thinking,"Guzdial, Mark",2008,"Drawing on methods from diverse disciplines---including computer science, education, sociology, and psychology---to improve computing education."
Educators' Perspective on the role of Computational Technology in K-12 Education,"Fall, Abdou and Popoola, Saheed",2024,"The use of computational technology is common in K-12 education. Existing work on the use of technology have often focused on experiments without considering the educator’s viewpoint. Yet, educators are those who deal directly with the student and introduce these technology to the student. This paper examines the perception of educators on the use of computational technology in the classroom. We conducted a qualitative study consisting of semi-structured interviews and open-ended questions with K-12 educators. The data from the study was then analysed to extract thematic group perceptions on the use of technology in the classroom. The results show that most educators believe that technology enhances learning in general even though there may be some aspects of learning that are inhibited by technology. Furthermore, the solutions offered by computational technology are instrumental in solving business, health, and societal problems. These industry relies on the problem-solving capacity of learners from the school system who possess computational skills. Hence, the educators recommend that students should be introduced to computational technology as early as possible because the knowledge of computational technology is essential for the students’ future careers."
EEG-based Cognitive Load assessment in Matlab GUI and impact on Learning System,"Ahmed, Sabbir and Walid, Md. Abul Ala and Islam, Monira",2020,Sin Valor
Effective Models for Integrating Computational Thinking into NYC Elementary Schools: A Proposed Research Agenda (Abstract Only),"Charles, Thea and Oliver, Amber and Mulloy, Kate",2018,"Initial research shows the promise of instructional and learning benefits for students when computational thinking is effectively integrated across the curriculum. Benefits include building higher-order thinking and problem-solving skills, creating real-world applied contexts, and enabling students to create, produce and interact with information. These are critical levers to wide adoption. To address this challenge, in partnership with the Education Development Center, we have developed a three-year study in which we will work closely with five high-poverty New York City elementary schools that, with the help of an external implementation partner, are trying out distinctly different approaches to integrating CT into elementary instruction, in order to understand how those models work in various contexts, and which models may be particularly effective.Our poster will display the proposed integration model of our first demonstration site as well as the indicators and instruments we are using to understand how this model works."
Effectiveness of a computational thinking (CS0) course on student analytical skills,"Van Dyne, Michele and Braun, Jeffrey",2014,": In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors."
Effectiveness of e-Crossword Puzzle tool in the Multidisciplinary course for the undergraduate students,"Naik, Shefali Trushit and Purohit, Jap Ashokbhai",2023,"Faculty members have the challenge of making classes engaging, while students often find it difficult to remember concepts taught in class, recall them when needed, and stay focused throughout. To address this issue, a crossword puzzle was used in an experimental capacity in a multidisciplinary undergraduate introductory data science course to evaluate its effectiveness at Ahmedabad University. The results showed that the crossword puzzle helped to increase interactivity in class and improved retention of knowledge and concepts covered during the session. Moreover, it helped to foster interest in learning new concepts or reinforcing weaker ones."
Effectiveness of marker-based augmented reality game on computational thinking skills and cognitive load for middle school students,"Rao, Toluchuri Shalini Shankar and Tiwari, Ajay Shankar and Mitra, Utanko and Bhagat, Kaushal Kumar",2024,Sin Valor
Effects of a Computational Thinking Experimental Course on Students' Perceptions of Their Problem-Solving Skills,"Vourletsis, Ioannis and Politis, Panagiotis",2020,"Computational thinking (CT) is an essential skill for students in the 21st century, providing a set of problem-solving methods that involve formulating problems and solutions in a form that can be carried out by an information-processing agent across a variety of fields. In addition, research shows that the integration of CT in education has the potential to improve the problem-solving skills of K-12 students. This study aimed to investigate the effect of a CT experimental course on 94 primary school students' perceptions of their problem-solving skills as well as possible correlations between the variables concerning the students' perceptions. Participants worked in pairs in the context of Scratch, a block-based visual programming language, and the data were collected through the Problem-Solving Inventory for Children (PSIC). A one-group pretest-posttest was conducted and the results suggest that a CT course can improve participants' overall perceptions of their problem-solving skills. Finally, increases in the participants' levels of control over emotions and behavior when facing problems were correlated with increases in their will to face their problems rather than avoid them."
Effects of integrating Collaboration Scripts into Pair Programming for Developing Computational Thinking,"Ma, Zhiqiang and Liu, Yaqin and Chen, Mingxuan",2020,Sin Valor
Effects of Professional Development on Programming Knowledge and Self-Efficacy,"Reimer, Yolanda J. and Coe, Michael and Blank, Lisa M. and Braun, Jeffrey",2018,Sin Valor
Elementary Computational Thinking Instruction and Assessment: A Learning Trajectory Perspective,"Luo, Feiya and Israel, Maya and Gane, Brian",2022,"There is little empirical research related to how elementary students develop computational thinking (CT) and how they apply CT in problem-solving. To address this gap in knowledge, this study made use of learning trajectories (LTs; hypothesized learning goals, progressions, and activities) in CT concept areas such as sequence, repetition, conditionals, and decomposition to better understand students’ CT. This study implemented eight math-CT integrated lessons aligned to U.S. national mathematics education standards and the LTs with third- and fourth-grade students. This basic interpretive qualitative study aimed at gaining a deeper understanding of elementary students’ CT by having students express and articulate their CT in cognitive interviews. Participants’ (n = 22) CT articulation was examined using a priori codes translated verbatim from the learning goals in the LTs and was mapped to the learning goals in the LTs. Results revealed a range of students’ CT in problem-solving, such as using precise and complete problem-solving instructions, recognizing repeating patterns, and decomposing arithmetic problems. By collecting empirical data on how students expressed and articulated their CT, this study makes theoretical contributions by generating initial empirical evidence to support the hypothesized learning goals and progressions in the LTs. This article also discusses the implications for integrated CT instruction and assessments at the elementary level."
Elementary Students' Understanding of Variables in Computational Thinking-Integrated Instruction: A Mixed Methods Study,"Luo, Feiya and Yan, Wei and Liu, Ruohan and Israel, Maya",2022,"Variable is a common computer science (CS) concept and is being introduced to upper elementary students in computational thinking (CT)-integrated instruction. However, there is scant empirical evidence of when and how elementary students should learn variables. For example, national computer science (CS) standards advise introducing variables in grades 3-5 and a K-8 variable learning trajectory (LT) synthesized learning goals from the literature and hypothesized four levels of thinking in working with variables. Yet, little empirical research lies behind these. This mixed methods study examined elementary students' understanding of variables. Participants were sampled from two fourth-grade classes from a Midwestern elementary school that implemented a series of CT-integrated math lessons. Students' written responses to variables assessment items were analyzed. Additionally, cognitive think-aloud interviews were conducted with nine students to elicit students' understanding while solving the variables assessment items. Our findings suggested that most students lacked a conceptual understanding of using variables to create generalized problem solutions that could work with any set of inputs. Additionally, students had difficulty with specific mechanics of using variables such as storing user input in a variable, updating variable values, and using the values stored in variables. This study underscores the need for careful design, use, and analysis of elementary CT-integrated lessons and assessments to introduce and reinforce the conceptual understanding and specific mechanics of variables for elementary students."
Elementary Students’ Debugging Behaviors in a Game-based Environment,"Yan, Wei and Israel, Maya and Liu, Tongxi",2021,"This basic interpretive qualitative study investigated four students’ debugging behaviors in Zoombinis, a game-based computational thinking (CT) environment. Analysis involved deductive coding of students’ debugging behaviors using videos of students’ computer screens. The findings revealed a range of debugging behaviors and strategies. Findings also indicated that students could articulate an intermediate understanding of debugging as related to the debugging LT [7]."
Elementary Teachers Engaging with Learning Trajectories to Create Professional Learning Goals around Computer Science Integration,"Albert, Jennifer and Joswick, Candace and Joshi, Deepti and Jocius, Robin and Blanton, Melanie and Petrulis, Robert",2024,"In this poster, we present our efforts to engage elementary teachers with learning trajectories as a tool for developing both their own and their students' comprehension of computational thinking (CT) and strategies for integrating CT learning in their classroom. Eleven teachers, who voluntarily joined a teacher professional development (PD) program to develop teacher leaders for CT integration in the elementary context, attended a one-day PD session aimed at reviewing their knowledge of CT, participating in CT-infused lessons, and engaging with CT learning trajectories. Over the next year, teachers will participate in monthly virtual PD to continue to grow both their CT content knowledge and pedagogical knowledge. Our goal is to develop these teachers as teacher leaders who will support others as they integrate CT. This poster will show our current progress on CT learning trajectories and teacher leaders' responses to the tool."
Eliciting Student Scratch Script Understandings via Scratch Charades,"Franklin, Diana and Salac, Jean and Thomas, Cathy and Sekou, Zene and Krause, Sue",2020,"With many school districts nationwide integrating Computer Science (CS) and Computational Thinking (CT) instruction at the K-8 level, it is crucial researchers closely inspect the relationship between program expression and student understandings. In this study, we propose and report on our use of Scratch Charades, a game in which students act out Scratch scripts while others build them. The purpose of Scratch Charades is to familiarize students with scripts and blocks without the cognitive overhead of the complex user interface. However, in this study, we also used it to elicit student understandings about Scratch blocks and scripts to design mnemonics to help students debug their code. We propose two building and/or debugging strategies based on our observations."
Embeddables: Designing Physical-Digital Manipulatives for Young Children,"Matthews, Sarah and Nicholas, Maria and Paatsch, Louise and Kervin, Lisa and Wyeth, Peta",2025,"Introducing digital literacy to young children develops foundational skills in problem-solving and supports their cognitive development, including critical thinking. However, physical manipulatives for digital literacy are not always designed for early-year environments or specifically for young children. Physical manipulatives can offer developmentally appropriate tools to introduce foundational digital literacy through dynamic system knowledge before children become developmentally ready for more formalised coding activities. This paper presents an initial study in a preschool environment with children (ages 3 – 5 years) using novel physical manipulatives, Embeddables (Fig. 1), in child-led free and guided play activities in a preschool. From our initial analysis of the types of activities the children engaged in, we identify how, firstly, children used the proximal relations to undertake experimental understanding of the devices, which secondly led to using the proximal relationships in their social play, further supported by the scale and feedback of the toys."
Embodied programming: Supporting the move from concrete to abstract,"Trory, Anthony",2016,Sin Valor
Embracing coding mistakes to teach computational thinking,"Harrison, W. Scott and Hanebutte, Nadine",2018,"In this paper, we argue for a pedagogical approach of embracing ""mistakes"" as an effective teaching tool for coding. This technique of teaching uses mistakes as a learning tool to teach computational thinking. Instead of simply showing and explaining correct solutions, code with logical errors is presented to the class. After verifying the code does not work, the class as a whole, becomes engaged in trying to correct the logical errors in code presented to the class. In this paper, we reference the Student Query Directed Learning approach which we map into our techniques. We present a transcript of a lecture one of the authors has given using this technique to illustrate motivations, how to steer the conversation where we want it to go, and student/instructor interactions. Finally, we suggest some ""ground rules"" to ensure this environment is all-encompassing and one which is conducive to learning."
Embracing Mathematical Conjecture Through Coding and Computational Thinking,"Castle, Sarah D.",2024,"Mathematics and computer science education have an intertwined history as proof undergirds both disciplines. This initial instrumental case study follows 16 different computational science students through a series of 8 linear algebra modules. Thematic analysis was used to highlight that when students learn mathematics through computation, opportunities for conjecture can be fostered alongside computational thinking."
Emerging Learning Progressions in K-5 Integrated Mathematics And Computer Science Lesson Plans (Abstract Only),"Israel, Maya and Lash, Todd and Reese, George",2017,"There is growing momentum to integrate computer science (CS) education across K-12, but there is little information about how this integration should take place (Grover &amp; Pea, 2013). This is especially true in the elementary grades, as fewer studies have examined computing at these grades. Through a National Science Foundation STEM+C project, we are developing and studying learning progressions for integrated CS and mathematics at the elementary level. Our research examines how teachers are introducing CS concepts within mathematic as well as what computational concepts and practices naturally can be taught within the context of elementary mathematics. We are also examining how these emerging progressions align with the K-12 CS Framework and the new standards from the Computer Science Teachers Association (CSTA). Future aims are to develop a coherent set of learning progressions related to areas such as debugging, sequencing, looping, conditionals, and decomposition within mathematics topics such as geometry, fractions, and arithmetic number stories. Our research lays the groundwork for the development of learning trajectories that will guide curriculum developers and practitioners to understand how to teach students across grades K-5 computing within the context of their mathematics instruction."
Emerging Technologies in K–12 Education: A Future HCI Research Agenda,"Van Mechelen, Maarten and Smith, Rachel Charlotte and Schaper, Marie-Monique and Tamashiro, Mariana and Bilstrup, Karl-Emil and Lunding, Mille and Graves Petersen, Marianne and Sejer Iversen, Ole",2023,"This systematic mapping review sheds light on how emerging technologies have been introduced and taught in various K–12 learning settings, particularly with regard to artificial intelligence (AI), machine learning (ML), the internet of things (IoT), augmented reality (AR), and virtual reality (VR). These technologies are rapidly being integrated into children's everyday lives, but their functions and implications are rarely understood due to their complex and distributed nature. The review provides a rigorous overview of the state of the art based on 107 records published across the fields of human-computer interaction, learning sciences, computing education, and child–computer interaction between 2010 and 2020.&nbsp;The findings show the urgent need on a global scale for inter- and transdisciplinary research that can integrate these dispersed contributions into a more coherent field of research and practice. The article presents nine discussion points for developing a shared agenda to mature the field. Based on the HCI community's expertise in human-centred approaches to technology and aspects of learning, we argue that the community is ideally positioned to take a leading role in the realisation of this future research agenda."
Empowering Novice Programmers with Visual Problem Solving tools,"Murali, Ritwik and Sukumar, Rajkumar and Sanjana Gali, Mary and Avudaiappan, Veeramanohar",2023,"Learning one’s first programming language includes challenges of syntax, surplus code and semantics. The learning can be easy or quite hard for a novice programmer depending on the programming language. Even the small “Hello World” program code contains semantic and syntactic complexity. This paper discusses the pros and cons of multiple tools that may be used for syntax independent implementation of solutions. Based on the shortcomings of existing tools, Flowgramming – a platform independent flowcharting software for the novice programmer / problem solver and their instructor, is also proposed in the paper. Flowcharts developed using Flowgramming can be executed by the built-in interpreter which helps the novice programmer focus on understanding the problem solving strategy in a visually appealing manner and also allows for a language independent learning of solution strategies."
Empowering the Next Generation of Computational Thinkers,"Kafai, Yasmin B.",2023,"Over the past ten years, global efforts have promoted computational thinking in K-12 computer science education. With the increasing prevalence of machine learning and artificial intelligence, there is a pressing need to broaden the scope of computational thinking to enable students to become competent, creative, and critical learners. Future digital literacies should encompass an appreciation of the distinctions between machine and human thinking, an awareness of the social aspects of data production, and an understanding of the values, biases, and historical contexts embedded within digital technologies. This opens up new possibilities for teachers and schools to guide students in actively shaping their digital destinies."
Enabling Peer-Led Coding Camps by Creating a Seed Effect in Young Students,"Fronza, Ilenia and Corral, Luis and Iaccarino, Gennaro and Pahl, Claus",2021,"During peer-led intensive events (such as hackathons and coding camps), students actively assist others to learn and, in turn, benefit from an effective learning environment. In this paper, we present the results of an observational study, having as a working setting a coding camp based on Computational Thinking (CT), to explore how peer-led coding camps can create a seed effect in young students. In particular, we analyze how a practical approach to convey CT skills motivates and effectively prepares student tutors. Moreover, we compare the previous and next edition of the camp to identify the specific contribution of the tutors. We observed that students benefit in particular from CT perspectives and develop the necessary motivation to eventually serve as tutors, creating a multiplier effect that benefits a larger number of students of future cohorts. Moreover, our results show that student tutors contributed positively to the facilitation of the subsequent edition of the coding camp."
Encouraging the Development of Computational Thinking Skills through Structured Dance Activities (Discussion Paper),"Fairlie, Fiona",2024,"This paper investigates whether aspects of structured dance and choreography may improve cognitive skills related to computational thinking. It also explores the relationship between performance on computational thinking tasks and motivation. Twenty participants,aged between 7 and 9 years old, undertook the Beginners Computational Thinking Test (BCTt) as a pre-test, took part in three dance related workshops then completed the BCTt as post-test and responded to an adapted version of the Intrinsic Motivation Inventory (IMI). Student performance on the BCTt improved significantly from pre-test to post-test for both boys and girls and seems generalised across the computational categories measured by BCTt. The study did not show a correlation between performance and motivation in girls but suggests that there may be some correlation between improvement in score and reported enjoyment in boys."
End-user Development and Closed-Reading: an Initial Investigation,"Abdollahinami, Sevda and Ducceschi, Luca and Zancanaro, Massimo",2022,"In this work, we explore the idea of designing a tool to augment the practice of closed-reading a literary text by employing end-user programming practices. The ultimate goal is to help young humanities students learn and appreciate computational thinking skills. The proposed approach is aligned with other methods of applying computer science techniques to explore literary texts (as in digital humanities) but with original goals and means. An initial design concept has been realised as a probe to prompt the discussion among humanities students and teachers. This short paper discusses the design ideas and the feedback from interviews and focus groups involving 25 participants (10 teachers in different humanities fields and 15 university students in humanities as prospective teachers and scholars)."
Enduring Lessons from 'Computer Science for All' for AI Education in Schools,"Grover, Shuchi and Fields, Deborah and Kafai, Yasmin and White, Shana and Strickland, Carla",2024,"Even as efforts to promote K-12 CS education forge ahead, there is a growing consensus that students must also be taught artificial intelligence (AI) and machine learning (ML) in order to be prepared for the fast-changing world powered by AI/ML. How can ensure that we leverage learnings from two decades of CS education research and practice, and build on successes while mitigating missteps? This panel invites researchers with deep expertise in 'CSForAll' efforts for a timely discussion and sharing of valuable lessons from CS education efforts about pedagogies, attention to equity, and teacher preparation that will also benefit K-12 AI education."
ENGAGE: A Game-based Learning Environment for Middle School Computational Thinking,"Boyer, Kristy and Buffum, Philip Sheridan and Culbertson, Kirby and Frankosky, Megan and Lester, James and Martinez-Arocho, Allison and Min, Wookhee and Mott, Bradford and Rodriguez, Fernando and Wiebe, Eric",2015,"We present ENGAGE, a game-based learning environment for teaching computational thinking to middle school students. This project has dual aims: introducing computational thinking practices to students at a young age, and improving computational thinking attitudes among underrepresented students. In pursuit of these two goals, the ENGAGE team has mapped the learning objectives of the AP CS Principles course to the middle school level, and then built an immersive game experience upon that foundation. Students choose computer scientist avatars to represent themselves, and then play in pairs as they investigate a data-related mystery in an underwater research station, solving computational thinking challenges along the way. ENGAGE is currently being implemented as part of a quarterly elective in four middle schools in North Carolina. During the elective, students spend a total of ten classroom sessions playing the game, supplemented by ""unplugged"" activities that reinforce concepts learned in the game environment. We plan to expand to more middle schools in the 2015-2016 school year. In this demo, members of the SIGCSE community will be able to experience the ENGAGE game for themselves and learn more about its development and future directions. We will also discuss our success in recruiting and teaching the ENGAGE curriculum to middle school teachers who had no prior computer science experience, and the success of those middle school teachers in implementing ENGAGE within their classrooms."
Engaging African American Elementary School Children in Code Understanding,"Nche, Olivia",2019,"This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715"
Engaging and motivating computing activities with computational thinking concepts you can use,"Webb, Heidi",2013,"Even before entering middle school students have been exposed to some of the conceptual methods and skill sets that underlie computational thinking (CT). For example, elementary school aged children begin using problem-solving and abstraction in Mathematics, English and Geography when they study word problems, learn about sentence structures and grammar rules, and work with maps. However, prior to middle school the problem sets tend to be concrete and scaffolded to aid the student in learning the foundations needed to work with complex problems. As children develop their cognitive capacities, they should be able to explore and learn about CT in a more abstract and generalizable fashion. However, when computing technology is added to the design and implementation of a solution it can be overwhelming for those who may not be comfortable turning to technology for answers. For this reason, problem solving can be difficult for young people who haven't learned the role technology may have in their lives now or in the future."
Engaging Estonian primary school children in computational thinking through adaptive educational games: A qualitative study,"Malva, Liina and Hooshyar, Danial and Yang, Yeongwook and Pedaste, Margus",2020,Sin Valor
Engaging Primary and Secondary School Students in Computer Science Through Computational Thinking Training,"Herrero-Álvarez, Rafael and Miranda, Gara and León, Coromoto and Segredo, Eduardo",2023,Sin Valor
Engineering and Computational Thinking talent in middle school students: A framework for defining and recognizing student affinities,"Cross, Jennifer and Hamner, Emily and Zito, Lauren and Nourbakhsh, Illah",2016,Sin Valor
Engineering Human Body for Systematic and Computational Thinking,"Zhu, Chengzhang and Ahn, Jeong Eun and Cui, Luobin and Hare, Ryan and Tang, Ying",2023,Sin Valor
Enhancement the computational thinking skills via the simulation game,"Daungcharone, Kannika",2017,Sin Valor
Enhancing Chronic Kidney Disease Prediction Through Data Preprocessing Optimization and Machine Learning Techniques,"Akinyemi, Lateef Adesola and Oshinuga, Olamide Peter and Ekwe, Stephen Obono and Oladejo, Sunday Oladayo",2023,Sin Valor
"Enhancing Computational Thinking with 3D printing: Imagining, designing, and printing 3D objects to solve real-world problems.","Grizioti, Marianthi and Kynigos, Chronis and Nikolaou, Maria-Stella",2024,"Printing 3D objects is exciting and engaging for young learners. However, how can this emerging technology benefit the development of skills, such as Computational Thinking (CT) and Design Thinking (DT), through a meaningful process of imagining, designing and tinkering with objects that could be used in real-world problems? Our knowledge is still limited, due to the complexity of designing 3D printable models from scratch with the existing digital tools. This paper discusses a web-based tool that enables learners to create and dynamically manipulate the behavior and properties of 3D printable models with high-level programming. This design aims to foster computational thinking, creativity, and design thinking skills as it focuses on the design process of the model, its behavior and its usage after printing. It also presents the results of a pilot study in which secondary school students engaged in a Design Thinking project for designing and printing sustainable everyday objects using this design. The study revealed new kinds of educational potential of 3D printing including the understanding of complex mathematical and CT ideas that were too complicated before, and the connection of CT practices with real-world problems through the implementation of a Design Thinking project with digital media."
Enhancing Confidence in Using Computational Thinking Skills via Playing a Serious Game: A Case Study to Increase Motivation in Learning Computer Programming,"Kazimoglu, Cagin",2020,Sin Valor
Enhancing High-School Students' Computational Thinking with Educational Robotics Learning,"Chookaew, Sasithorn and Howimanporn, Suppachai and Pratumsuwan, Pornjit and Hutamarn, Santi and Sootkaneung, Warin and Wongwatkit, Charoenchai",2018,Sin Valor
Enhancing Programming Education through Game-Based Learning: Design and Implementation of a Puyo Puyo-Inspired Teaching Tool,"Tian, Ruochen and Saito, Daisuke and Washizaki, Hironori and Fukazawa, Yoshiaki and Kobayashi, Hiroshi and Tsuji, Ayumi",2024,"Although programming is part of primary school curricula in many countries, barriers persist for elementary students learning programming such as an insufficient understanding of the underlying mathematics, complex concepts, and purpose of programming. These challenges often lead to disinterest. Herein we present an innovative game-design-based programming education tool. Students progressively enhance a classic game, Puyo Puyo, using fundamental programming concepts and selecting the appropriate code. This engaging approach improves students' computational thinking abilities as they transform code into a functional game. Here, we describe the tool's background and structure. Then we detail a workshop using the tool, including analyzing the changes in students' programming skills, computational thinking, and interest in programming. Finally, we summarize the findings and future research directions."
Enhancing Stanford Design Thinking for Kids with Digital Technologies A Participatory Action Research Approach to Challenge-Based Learning,"Motschnig, Renate and Pfeiffer, Daniel and Gawin, Anna and Gawin, Peter and Steiner, Michael and Streli, Lisa",2018,Sin Valor
Enhancing Students’ Social and Emotional Learning in Educational Virtual Heritage through Projective Augmented Reality,"Schaper, Marie-Monique and Pares, Narcis",2022,"The global agenda in education foresees the integration of social and emotional learning to equip students to succeed in our evolving digital society. In this paper, we focus on deepening into the research on AR/MR technologies to foster students’ comprehension of socio-cultural values in historical contexts. We address this challenge by exploring the potential of the interaction paradigm called World-as-Support (WaS). We present a case study of an educational Virtual Heritage experience with primary students for a bomb shelter built during the Spanish Civil War. Our findings showed that the experience enhanced students’ capabilities to reflect upon high-level issues related to value human dignity, to grasp some of the essential qualities of the value solidarity and to connect historical events with present political situations in Spain. Finally, we discuss four design recommendations for learning activities based on the WaS concerning (1) the enhancement of students’ competences in collaboration, and communication; (2) critical thinking; (3) contextualization of historical contents; and (4) moral and ethical considerations for digital augmentation."
Enhancing Synergy Among Engineering Educators through Computational Thinking,"Johnson, Charles A. N. and Bin Daud, Moh'd Fadzil and Arsat, Mahyuddin Bin and Bt. Wan Hussin, Wan Nazdah and Egba, Ernest Ituma",2017,Sin Valor
Enhancing the Adoption of Computational Thinking Education Among the Malaysians to Prepare for Future Industrial Revolution,"Che Kamaruddin, Ahmad Rasydan and Low, Jing Hong and Sarwar, Abdullah",2022,"This study explains the factors that enhance Computational Thinking (CT) in the education of Malaysia, specifically for undergraduate students. The purpose of strengthening the CT among the undergraduate students is to ensure the readiness and preparation for the coming industrial revolution, such as Industry Revolution 4.0 and beyond. This study proposes integrating Technology Readiness Index(TRI) and Technology Acceptance Model (TAM) as main factors to examine how it enhances the CT in Malaysian education. In addition, this integration will operate as the main theoretical framework for this research study and form a model in this research study, namely Technology Readiness Acceptance Model (TRAM). This study shall establish a suitable adoption model to integrate computational thinking from the Malaysian education perspective for the future industrial revolution. The discussion and explanation on the factors that enhance CT in Malaysian education are discussed further in the paper."
Enhancing the Role of Computational Thinking in Primary and Secondary Education in Switzerland,"Arnold, Ruedi and Amstalden, Barbara and Bader, J\""{o}rg",2022,"Computational Thinking (CT) is a fundamental and important skill set in our world and should therefore be taught and practiced in school. In this poster abstract, we present our ongoing initiative on establishing CT as a fundamental and interdisciplinary contribution of Computer Science as a necessary component of general education and describe our aim to enhance the knowledge about it in Switzerland’s teacher communities. We give an outline of our planned activities and present first results from a field test in a Swiss high school with an original example of CT-tailored teaching material for the subject of logic."
Enhancing Understanding of Data Traces and Profiling Among K--9 Students Through an Interactive Classroom Game,"Kahila, Juho and Vartiainen, Henriikka and Arkko, Eetu and Lin, Anssi and Pope, Nicolas and Tedre, Matti",2024,"With the increasing popularity of social media among ever younger children, there is a growing need to educate young learners about the key concepts and mechanisms related to data collection, profiling, and content recommendation on online platforms. This paper presents a gamified K–9 classroom activity where learners analyze data traces to construct and iteratively refine detailed profiles of a mystery online person, thereby learning to recognize the digital traces typical of online interactions. Using data from 163 fifth- and eighth-grade students collected over 11 game sessions, the results demonstrate that the majority of learners were able to analyze and integrate various data traces to assemble coherent profiles, showing an emerging competence in recognizing data collection and profiling in online interactions, including their ubiquity, multimodality, and their consequences. The results also reveal that the learners’ ability to critically reflect on profiling is still developing. This paper contributes to the fields of AI education and social media literacy by demonstrating the feasibility of early education on social media mechanisms."
Enseigner la pens\'{e}e informatique avec Kniwwelino : \'{E}tude exploratoire de terrain en milieu scolaire: Teaching Computational Thinking with Kniwwelino: Exploratory Field Study in School Settings,"Schwartz, Lou and Maquil, Val\'{e}rie and Johannsen, Laurence and Moll, Christian",2022,"We are presenting the results of a study carried out with six primary and secondary schools in Luxembourg, pilots in introducing the Kniwwwelino Classroom kit (KCK) in their teaching of programming and computational thinking to children. The aim of the study was to explore: (1) how teachers appropriate this kind of tool for teaching computational thinking and programming, (2) whether the KCK is suitable for this purpose, and (3) the user experience of the KCK. To these ends, we used several data collection tools through a mainly qualitative exploratory approach: semi-guided interviews, diaries and several questionnaires. We have learned that: (1) the KCK is versatile enough to adapt to different environments, objectives and pedagogical approaches and thus offers a great deal of freedom to teachers, (2) the playful and tangible approach of the KCK seems more adapted to introducing programming and enables pupils to develop problem-solving, collaboration and creativity skills, and (3) if the user experience has been positive for both teachers and students, this first KCK prototype is still addressing intermediate computer-skilled teachers."
Entry: visual programming to enhance children's computational thinking,"Han, Ahyoung and Kim, Jihyun and Wohn, Kwangyun",2015,"This paper introduces Entry, a visual programming application which is developed to facilitate children's computational thinking. As an HTML5-based visual programming platform, it provides children and beginners with an integrated environment in which they not only learn programming in an easy and fun way but also create, post and share their own programs. This will enhance children's computational thinking and is expected to serve as an effective learning tool for the STEAM education. We have held a workshop with 16 elementary school teachers and conducted a preliminary survey to illuminate Entry's 1) potential educational implications on logical thinking, problem solving and creativity, and 2) applicability in the field of education. This paper is expected to contribute to future research on programming education and STEAM education programs for children."
EPILOGUE: LESSONS LEARNED,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Escape machine: teaching computational thinking with a tangible state machine game,"Weller, Michael Philetus and Do, Ellen Yi-Luen and Gross, Mark D",2008,"We present a methodology for building objects-to-think-computationally-with and illustrate its application in developing our Escape Machine game. The input mechanism for this game is a tangible state machine built with Posey, our computationally enhanced construction kit. Through manipulating this state machine children create an algorithmic specification for the behavior of both the avatar and its enemies in an attempt to navigate a maze without being eaten. We outline several strategies for success at Escape Machine and discuss how it embeds an important computational thinking concept in interaction with a tangible device."
Escape Room Game for CT Learning Activities in the Primary School,"Kahila, Juho and Parkki, Tuomo and Gr\""{o}hn, Anssi and Karvinen, Atte and Telimaa, Elmeri and Riikonen, Pekka and Tiitta, Riku and Haantio, Pasi and Kein\""{a}nen, Anssi and Kerkk\""{a}nen, Tero and Jormanainen, Ilkka and Penttinen, Silja and Tedre, Matti",2020,"This systems short paper presents the design and implementation of an escape room game for practicing computational thinking (CT) skills in the primary school. The game, which can be packed into two small suitcases and set up anywhere, combines physical and virtual elements in order to engage learners into exploring the room. Aural elements with spoken tracks and background soundscape are combined with smart lighting to intensify the immersion. The game’s CT puzzles are modified from Bebras Challenge, and escaping the room requires solving all of them. This paper describes the game disposition and design, the room setup, design and implementation of computational thinking minigames, and the system architecture."
Escaping the Turing Tar-Pit with AI Programming Blocks,"Repenning, Alexander",2024,"Game design is often considered a motivational approach to get young children interested in programming and computational thinking. However, while the idea of game programming may be compelling from an educational point of view, creating games with interesting interactions that are actually fun to play remains challenging. Modern tools aimed at novice programmers should empower their users to create games, such as Pac-Man, that approach or even exceed the gameplay of 1980's arcade games. By adding a high-level AI pathfinding block to the RULER.game tool, 13 students in grades 1-4 attempted to build Pac-Man-like games. The findings suggest that all students were able to create Pac-Man-like games with compelling gameplay interactions, including ghosts finding the shortest path through complex mazes to Pac-Man, multiple ghosts collaborating with each other, and sophisticated game world topologies featuring toroidal portals."
Establishing Computational Thinking as Just Another Tool in the Problem Solving Tool Box,"Fleenor, Hillary",2019,"Even though the computer science education community has not definitively established exactly what ?Computational Thinking"" entails, most will agree that it is using a computing machine to solve problems. Like all tools for solving problems, this knowledge should be made available to everyone. Jeannette Wing sounded this call in 2006, writing that ""computational methods and models give us the courage to solve problems and design systems that no one of us would be capable of tackling alone."" These skills are not just for computer scientists, but for anyone and everyone who plans to solve problems. We already teach other forms of problem solving to all our students including: Mathematical Thinking, Critical Thinking, and Scientific Reasoning. Computational Thinking, as well as engineering and design's Design Thinking, should be equally exposed to all students. It is also important to illuminate that these tools are not used in isolation to solve problems. Perhaps the key to the acceptance of Computational Thinking (as well as Design Thinking) as essential educational tools is to highlight their overlap and interdependence with other problem solving skills. The next generation will need practice with every tool at their disposal to be prepared to solve tomorrow's problems. I propose embedding Computational Thinking in a problem solving framework that leverages teachers' (and students') existing knowledge of problem solving in mathematics, science, and language arts in order to encourage teachers in non CS disciplines to teach Computational Thinking in their classrooms."
eTeacher: A Pilot in Flemish Secondary Education,"Hoobergs, Jesse and van den Berg, Birthe and Schrijvers, Tom",2023,"The Flemish Government has imposed a new and challenging set of learning objectives for secondary education. An important part comprises Computational Thinking for 3rd and 4th year students, and Computer Science for students in their 5th and 6th year. Yet, most teachers, who have mostly not been trained to teach these subjects, do not feel confident in programming-related topics. With eTeacher, we take away this burden from the teacher and allow students to work independently and at their own pace. In particular, we present a platform with an integrated course text for Computational Thinking. eTeacher is available on every device, gives automatic code-feedback both content-wise and on programming style and provides exercises of different types and levels. Teachers can monitor their students individually and consult statistics. The platform was extensively evaluated in a pilot at 20 schools."
Evaluating a Computational Thinking and Computing Attitudes Instrument for Educational Purposes,"Oliveira, Eduardo C. and Correia, Ronaldo C. M. and Bittencourt, Roberto A.",2021,Sin Valor
Evaluating Scratch Programs to Assess Computational Thinking in a Science Lesson (Abstract Only),"Albert, Jennifer and Peddycord III, Barry and Barnes, Tiffany",2015,"In this poster, we describe efforts to assess computational thinking activities that can be easily implemented in any science classroom. Studies have shown that a set of conditions must be met for computational thinking tools to be used in K-12 education and that when they are used, there is a wide spectrum in the level of computational thinking that the tool enables. This study extends this work by examining how middle school students translated their science fair projects into Scratch and what evidence of computational thinking is present. Scrape, a tool designed to analyze Scratch projects was used. Overall, it was found that most students simply created a presentation of their project without much complexity. Eight students created interactive projects that required user participation and used more advanced computational concepts. Finally, recommendations are given for next steps in the creation of a series of activities that would scaffold student learning as they apply to computational thinking concepts of a science concept."
Evaluating Student Computational Thinking Skills in Physics Experimental Class,"Zakwandi, Rizki and Istiyono, Edi",2022,Sin Valor
Evaluating the Effect of Using Physical Manipulatives to Foster Computational Thinking in Elementary School,"Aggarwal, Ashish and Gardner-McCune, Christina and Touretzky, David S.",2017,"Researchers and educators have designed curricula and resources for introductory programming environments such as Scratch, App Inventor, and Kodu to foster computational thinking in K-12. This paper is an empirical study of the effectiveness and usefulness of tiles and flashcards developed for Microsoft Kodu Game Lab to support students in learning how to program and develop games. In particular, we investigated the impact of physical manipulatives on 3rd -- 5th grade students' ability to understand, recognize, construct, and use game programming design patterns. We found that the students who used physical manipulatives performed well in rule construction, whereas the students who engaged more with the rule editor of the programming environment had better mental simulation of the rules and understanding of the concepts."
Evaluating the Impact of the Girls Who Code Summer Immersion Program: (Abstract Only),"Clarke, Ryan and Judd, Sarah",2018,"Girls Who Code, a national nonprofit founded in 2012 with the mission to close the gender gap in the computer science (CS) fields, has reached tens of thousands of girls through our CS enrichment programs. To date, our Summer Immersion Program (SIP) has provided nearly 5,000 rising 11th- and 12th-grade girls from across the U.S. with the opportunity to engage in a seven-week introductory CS course. In this lightning talk we will describe our recently established Research Team's efforts to understand the ways SIP is affecting girls, describe challenges and limitations of this work, and offer a glimpse at how we hope to assess the program's longer-term impact on CS persistence and longevity by leveraging our organization's growing alumni network."
Evaluating the Pedagogical Impact of Large Language Models on Programming Skills in Data Science Programs in Higher Education,"Crocetti, Giancarlo and Bak, Seonwoo and Vautor-Laplaceliere, Daena D. and Noory, Naqib A.",2025,"The integration of GenAI (GenAI), such as large language models (LLMs), in education has raised the question of how it will alter the students' training and learning outcomes. To better understand the phenomenon, this empirical study explores whether college students find GenAI tools helpful in advancing their skills, particularly Python programming proficiency."
Evaluation and Impact of a Required Computational Thinking Course for Architecture Students,"Senske, Nick",2017,"Non-major education continues to be a growing area of study in computer science education research. This paper focuses on architects as an audience and the teaching of computer science by architects, who successfully applied computer science education research. The author describes the structure and development of a required computational thinking course with an average yearly enrollment of 69 students and how it applied best practices from Media Computation to improve student outcomes and engagement. A four-year impact study found that a flipped classroom model combined with peer learning methods was superior to traditional lectures and labs for improving student performance and reducing attrition. Comparisons of pre- and post-class surveys revealed an improved perception of computing and an increased interest in the subject -- a positive outcome for a required introductory course. The author also studied the course's long-term effects. Three years after taking the course, a majority of students felt they retained what they learned and that learning computational thinking helped them to learn new software and perform better in advanced computing courses. By taking into account how architects learn and revising in response to assessments, we believe our course structure and teaching methodology demonstrates an effective case for applying computer science education research within an architectural curriculum."
Evaluation Model for Improving Ambient Learning Systems Towards Achieving Sustainable Development Goal Four,"Mwendia, Simon Nyaga",2018,Sin Valor
Evaluation of an Online Intervention to Teach Artificial Intelligence with LearningML to 10-16-Year-Old Students,"Rodr\'{\i}guez-Garc\'{\i}a, Juan David and Moreno-Le\'{o}n, Jes\'{u}s and Rom\'{a}n-Gonz\'{a}lez, Marcos and Robles, Gregorio",2021,"The inclusion of artificial intelligence (AI) in education is increasingly highlighted by international organizations and governments around the world as a cornerstone to enable the adoption of AI in society. That is why we have developed LearningML, aiming to provide a platform that supports educators and students in the creation of hands-on AI projects, specifically based on machine learning techniques. In this investigation we explore how a workshop on AI and the creation of programming projects with LearningML impacts the knowledge on AI of students between 10 and 16 years. 135 participants completed all phases of the learning experience, which due to the COVID-19 pandemic had to be performed online. In order to assess the AI knowledge we created a test that includes different kinds of questions based on previous investigations and publications - resulting in a reliable assessment instrument. Our findings show that the initiative had a positive impact on participants? AI knowledge, being the enhancement especially important for those learners who initially showed less familiarity with the topic. We observe, for instance, that while previous ideas on AI revolve around the term robot, after the experience they do around solve and problem. Based on these results we suggest that LearningML can be seen as a promising platform for the teaching and learning of AI in K-12 environments. In addition, researchers and educators can make use of the new instrument we provide to evaluate future educational interventions."
Evaluation of the ROOT Robot System and Curriculum to Improve Computational Thinking in Chinese Children,"Liu, Yanting and Rojas, Juan",2019,Sin Valor
Evaluation Rubric for Computational Thinking Concepts,"Otero Avila, Christiano and Foss, Luciana and Bordini, Adriana and Simone Debacco, Maria and da Costa Cavalheiro, Simone André",2019,Sin Valor
"Evolution of an Integrated, Elementary CSforAll Curriculum","Adrion, W. Richards and Pekta\c{s}, Emrah",2024,"A research-practice partnership (RPP) used a teacher co-design process, supported by equity-focused professional development, to create an elementary-level curriculum that integrates content, practices, and learning progressions from state computing standards with other standards-based curricula. Most district students are part of historically marginalized groups and the RPP chose to develop an equity and inclusion-focused curriculum that would be taught in all elementary classrooms to all students. Twelve teacher teams, supported by researchers and ELL and SPED specialists, designed, piloted, and documented 23 modules of 4-8, 45-minute lessons across K-5. Early adopter teachers followed the pilots and implemented the modules in their classrooms with the goal of facilitating adoption by all elementary classroom teachers. After being interrupted by the pandemic, the RPP developed a strategy where principals in cohorts of schools agreed to collaborate with RPP school-based lead teachers to establish professional learning communities (PLCs) to support classroom implementation of the modules. Eleven schools participated in a 2021-22 cohort and nine more schools joined in 2022-23. Centering equity, PLCs, and quality module documentation and materials are key to sustaining and evolving the CSforAll curriculum. The modules were revised based on feedback obtained from ELL and SPED specialists, early adopters, teacher coordinators, researchers, and district curriculum directors. Using a large data set of meeting and classroom observation records, interviews, field notes, focus groups, surveys, and module documentation, we track the evolution of the curriculum and provide a detailed analysis of one module as an example."
Examining Teacher Perspectives on Computational Thinking in K-12 Classrooms,"Burke, Quinn and Roschelle, Jeremy and Bailey, Cinamon and Angevine, Colin and Weisgrau, Josh and Mills, Kelly",2020,Sin Valor
Examining the Computational Thinking and Robotics Knowledge and Interest of Undergraduate Students in Two Teacher Education Courses,"Azhar, Mohammad Q. and Powers, Jillian and Musgrove, Ann",2023,This research examines the impact of online instructional modules that integrated computational thinking (CT) and robotics in two teacher education courses on students' knowledge and interest in CT and robotics. Ninety-three (93) students from a lower-division instructional technology course and Fifty-nine (59) students from an upper-division instructional technology course participated in the study. One-sample paired t-tests were conducted to determine whether significant differences existed in participants' self-reported CT and robotics knowledge and interest from before and after the instruction. The results of the analysis found some statistically significant differences in mean CT and robotics knowledge and interest from pre-test to post-test in both courses suggesting this form of instruction can increase students' knowledge and interest in these concepts.
"Examining the Impact of Computational Creativity Exercises on College Computer Science Students' Learning, Achievement, Self-Efficacy, and Creativity","Peteranetz, Markeya S. and Wang, Shiyuan and Shell, Duane F. and Flanigan, Abraham E. and Soh, Leen-Kiat",2018,"The purpose of the present study was to investigate how the inclusion of computational creativity exercises (CCEs) merging computational and creative thinking in undergraduate computer science (CS) courses affected students' course grades, learning of core CS knowledge, self-efficacy, and creative competency. CCEs were done in lower- and upper-division CS courses at a single university. Students in CCE implementation courses were compared to students in the same courses in different semesters. Propensity score matching was used to create comparable groups (control and implementation) based on students' GPA, motivation, and engagement. Results showed that implementing CCEs in undergraduate CS courses enhanced grades, learning of core CS knowledge, and self-efficacy for creatively applying CS knowledge. However, CCEs did not impact creative competency. The effect of the CCEs was consistent across upper- and lower-division courses for all outcomes. Unlike previous studies that only established the support for CCEs, such as positive dosage effects, the results of this study indicate that CCEs have a causal effect on students' achievement, learning, and self-efficacy, and this effect is independent of general academic achievement, motivation, and engagement. These findings establish the CCEs as a validated, evidence-based instructional method."
Examining the Use of Computational Thinking Skills When Solving Bebras Tasks,"De Jong, Imke and Sichterman, Bo and Jeuring, Johan",2022,"Computational thinking (CT) is considered an essential problem-solving skill in the 21st century, and is receiving attention on different educational levels. To promote and assess students’ CT skills, so-called ’Bebras tasks’ (i.e. small tasks for problem solving in informatics) are created by experts in the field of CT. There has not been empirical research to determine to what extent and how CT skills are used while solving these tasks, however. This qualitative study bridges this gap by using the think-aloud method to examine the use of CT skills when solving Bebras. The results of this study can serve as a validation for the use of CT skills in solving Bebras tasks. This poster abstract introduces the background and setup of the study."
"Examining the What, Why, and How of Multilingual Student Identity Development in Computer Science","Jacob, Sharin Rawhiya and Montoya, Jonathan and Nguyen, Ha and Richardson, Debra and Warschauer, Mark",2022,"Developing student interest is critical to supporting student learning in computer science. Research indicates that student interest is a key predictor of persistence and achievement. While there is a growing body of work on developing computing identities for diverse students, little research focuses on early exposure to develop multilingual students’ interest in computing. These students represent one of the fastest growing populations in the US, yet they are dramatically underrepresented in computer science education. This study examines identity development of upper elementary multilingual students as they engage in a year-long computational thinking curriculum, and follows their engagement across multiple settings (i.e., school, club, home, community). Findings from pre- and post-surveys of identity showed significant differences favoring students’ experiences with computer science, their perceptions of computer science, their perceptions of themselves as computer scientists, and their family support for computer science. Findings from follow-up interviews and prior research suggest that tailored instruction provides opportunities for connections to out-of-school learning environments with friends and family that may shift students’ perceptions of their abilities to pursue computer science and persist when encountering challenges."
Examining theoretical and pedagogical foundations of computational thinking in the context of higher education,"Agbo, Friday Joseph and Yigzaw, Samuel T. and Sanusi, Ismaila Temitayo and Oyelere, Solomon Sunday and Mare, Alem Habte",2021,Sin Valor
Examples of Culturally Responsive Teaching in Computational Thinking Curriculum,"Saito-Stehberger, Dana",2022,"Culturally Responsive Teaching (CRT) is a pedagogical strategy that aims to engage culturally and linguistically diverse students in the classroom, to validate and to empower them (Scott, Sheridan, &amp; Clark, 2014; Gay, 2010). Five commonly described aspects of culturally responsive instruction include: (1) helping students to value the perspectives of others, (2) affirming a sense of belonging, (3) validating students' cultural identities, (4) educating students about the diversity of the world around them,&nbsp; (5) supporting students to develop an awareness the impactful social structures.&nbsp; Research has shown repeatedly that CRT increases the academic success of ethnically diverse communities&nbsp; (Gay, 2018; Ladson-Billings, 1995). This talk will provide examples of how CRT has been incorporated into a Scratch-based, upper-elementary computational thinking curriculum that was developed specifically for English language learners. Learning activities include cultural content, diverse role models in the computer science field, and student reflection."
Exemplifying Computational Thinking Scenarios in the Age of COVID-19: Examining the Pandemic's Effects in a Project-Based MOOC,"Pinto, Juan D. and Quintana, Chris and Quintana, Rebecca M.",2020,Sin Valor
Expanding Elementary School Computer Science Education with an Introduction to Machine Learning Through Rhythmic Studies,"Hunter, Holly and Payton, Jamie and Julien, Christine",2023,"Introducing elementary students to computer science and computational thinking (CS/CT) can enhance their problem solving skills and enhance their confidence and sense of belonging in computing. Project moveSMART aims to introduce learning activities into elementary classrooms that address computer science concepts in a way that integrates with core curriculum requirements and promotes physical activity. In this paper, we explore an extension to an initial set of Project moveSMART computer science learning activities to introduce elementary students to machine learning concepts in a way that is integrated with required learning objectives covered in a Physical Education course. Specifically, students use the BBC micro:bit and its on board sensors to capture rhythmic movement data, explore and analyze patterns in the data, and use a learned ""dance move recognition"" application that uses their data in order to learn about machine learning in an age appropriate way. To demonstrate feasibility of supporting dance move recognition on the resource-constrained device, we developed a prototype, which is able to detect 5 different dance moves with a 96.6% accuracy."
Experimental Analysis of First-Grade Students' Block-Based Programming Problem Solving Processes,"Pozzan, Gabriele and Padova, Costanza and Montuori, Chiara and Arf\'{e}, Barbara and Vardanega, Tullio",2024,"This work presents an experimental analysis of first-grade students' block-based programming trajectories. These trajectories consist of edit-level program snapshots that capture learners' problem-solving processes in a navigational microworld. Our results highlight the potential of this fine-grained data capture. Snapshot frequencies in trajectories collected before and after a coding intervention showcase the collective progress of the learners. Graph visualizations, in which nodes represent snapshots and directed edges code edits, highlight strategies, pitfalls and debugging procedures. Individual programming trajectories shed light on details of learners' problem-solving processes that less granular analysis would conceal. Various works in the field of Learning Analytics research show the usefulness of collecting fine-grained process data that proceed from programming activities. However, how to analyze this data is still an open question and research on the subject is in an experimental phase. We contribute to this experimentation by analyzing and discussing results collected from 30 first-grade students in a pretest-posttest study."
Exploration and practice of online and offline mixed teaching mode based on PBL in basic computer courses,"Liu, Huanjun and Li, Siming and Xiao, Yangchun",2021,Sin Valor
Exploration of a Blended Teaching Mode for the Cultivation of High-Order Computing Ability,"Wang, Meijuan and Wang, Yibin and Li, Hui",2023,"The rapid development of information technology has a great influence on the future society. Future talents should have high-order thinking skills, such as adaptability, competence, and innovation, suitable for specific positions. Military universities undertake the important task of cultivating military talent. This work highlights the cultivation of students’ computing thinking ability in the course “The Fundamentals of Computer.” By carefully planning teaching time and content and using modern information technology and rich network teaching resources, the reform of online–offline blended teaching is practiced. The new teaching mode features high-order thinking skills training for students and realizes the transformation of the curriculum from knowledge output to high-order thinking ability orientation."
Exploration of ability development of engineering and computational thinking skills in software engineering majors,"Deng, Zhenrong and Huang, Wenming and Dong, Rongsheng and Wen, Peizhi",2009,Sin Valor
Exploration of Outcome-Based Computational Thinking Education Programs for Teachers,"Xu, Yiyi and Liu, Pengfei and Tang, Peihe",2018,"It is widely accepted that computer foundation course will benefit from the research and application of Computational Thinking in China. It is in fact that most research work in Computation Thinking have served for students but much less for teachers. College teachers in China took less systematic training in order to adequately prepare them for increasingly higher teaching requirements. To address this issue, this paper first proposes an outcomes-based teacher education program distinguished from CT principles under teaching and learning perspective, decomposed an abstract computational thinking idea into a definite coursework content. This paper then describe an outcomes-based evaluative frame which supports teachers to ensure a successful application of CT theories and concepts into practical skill development. Results from practice showed that the current research work is effective and widely accepted for which evidence is also provided."
Exploratory Study of the Influence of Immersion in Games on Computational Thinking among University Students,"Fukui, Masanori and Sano, Yudai and Xiang, Li and Ong, Eng Tek and Yanuarto, Wanda Nugroho and Anggoro, Subuh and Ng, Khar Thoe",2024,Sin Valor
Exploring and Materialising Bodily Experiences of Security through Lenses of Feminist HCI practices,"Beuthel, Janne Mascha and Schaper, Marie-Monique and Schu\ss{}, Martina and M\'{a}rquez Segura, Elena and N\'{u}\~{n}ez-Pacheco, Claudia and Riener, Andreas",2022,"In public spaces, such as urban areas and public transportation, people may experience feelings of insecurity, for example, regarding lack of security and fear of possible criminal intentions from others, which can lead to physical discomfort and (feelings of) unease. Starting from these challenges, we propose a one-day workshop aimed to explore bodily experiences of security. Together with the workshop participants, we will approach this research space from a feminist perspective, engaging with feminist issues, such as participation, advocacy, pluralism, and embodiment. Through innovative body-centered methods, we will foreground and explore individual and collective sensations of security, and materialize participants’ felt experiences and insights in the form of wearable prototypes. Through this workshop, we will reflect on individual and collective experiences of security through making, and elicit design implications for creating secure bodily experiences, which can be informative and inspirational for future research."
Exploring child-robot interaction ecology in the development of computational thinking,"Bakala, Ewelina and Hourcade, Juan Pablo and Tejera, Gonzalo",2020,"In recent decades, technological developments related to computing, informatics, and digitization have generated radical changes in our lives. This new reality brings with it the need for children and young people to develop new basic skills linked to what has been called computational thinking. Computational thinking taught from an early age may allow individuals and society to understand and use new conceptual structures and models that represent complex phenomena and processes in the world around us. However, stimulating the development of computational thinking at an early age (preschool) continues to be an academic challenge whose approach requires research, interdisciplinary work, and innovation. My doctoral thesis aims to contribute to the design, development and evaluation of child-robot interaction (including programming interface, interaction context and activities), aimed at promoting the development of computational thinking in preschool children."
Exploring Coding Attitudes of Chinese Elementary Students: A Preliminary Study,"Zhang, Shuhan and Wong, Gary K. W. and Sun, Xiaojing",2022,Sin Valor
Exploring Computational Music Thinking in a Workshop Setting with Primary and Secondary School Children,"Hug, Daniel and Petralito, Serge and Hauser, Sarah and Lamprou, Anna and Repenning, Alexander and Bertschinger, Didier and St\""{u}ber, Nadine and Cslovjecsek, Markus",2017,"Motivated by the essential role of music in children's lives, the potential of sound as sensory modality, and the importance of teaching Computational Thinking, there is great pedagogical potential in the integration of musical and computational thinking into ""Computational Music Thinking"". In this paper we report a pilot study exploring research and design approaches in creating learning environments and tools, which stimulate the interest of children and adolescents for both computer science and music in a sustainable way in the context of creative, self-guided activities. For the purposes of the study, two online tools, AgentCubes online, a 3D game design environment, and Ludosonica, an interactive music composition and performance system, were employed in a series of workshops designed for primary and secondary school children. Results from the study generally confirm the pedagogical potential of Computational Music Thinking and point toward promising future research directions."
Exploring Computational Thinking Across Disciplines Through Student-Generated Artifact Analysis,"Zhang, Yifan and Mohammad Mirzaei, Amanda and Pollock, Lori and Mouza, Chrystalla and Guidry, Kevin",2021,"To meet the demands of 21st century societies, it is essential that faculty across disciplines engage students with course activities and assignments that foster the development of computational thinking (CT). In this study, we address two pertinent questions: (1) What types of artifacts do students develop across different disciplines in response to CT-driven problem prompts' and (2) What types of CT skills do these artifacts demonstrate? To answer the questions, we examined 273 artifacts developed by undergraduate students across seven course assignments from four disciplines: mathematics, sociology, music, and English using a rubric developed to evaluate the following CT skills: abstraction, decomposition, data analysis, and algorithmic thinking. We found that a range of skills were reflected across student artifacts."
Exploring computational thinking assessment in introductory programming courses,"Araujo, Ana Liz Souto O. and Santos, Jucelio S. and Andrade, Wilkerson L. and Guerrero, Dalton D. Serey and Dagienė, Valentina",2017,Sin Valor
Exploring Computational Thinking Perspectives in Black Communities with Physiological Computing,"Lewis, Myles and Holloman, Amanda and Hernández Cuevas, Bryan Y. and Crawford, Chris",2024,Sin Valor
Exploring Computational Thinking Practices and Gestures in the Context of Matrix Math,"Zaman, Ulia",2023,Computational thinking (CT) is a unique skill set that can provide advantages not only in the field of computer science (CS) but also in other disciplines. There is potential benefit in incorporating CT practices in other subjects so students from interdisciplinary backgrounds can also gain CT skills and apply them in their respective disciplines. This study takes a look at how students from interdisciplinary backgrounds interact using gestures and use CT to understand matrix math concepts in a group setting. A mixed-methods analysis is used to gain insight into how students’ practice CT. Data collected from pre- and post- assessments measures students’ mastery level in matrix math concepts. Video data collected during the group activity shows students’ learning process. The results of this study provide a better perspective on how other disciplines are able to utilize CT and how CT learning can be implicitly taught in subjects other than CS.
Exploring Computational Thinking Skills in 3D Printing: A Data Analysis of an Online Makerspace,"Chytas, Christos and Tsilingiris, Alexandros and Diethelm, Ira",2019,Sin Valor
Exploring computational thinking through collaborative problem solving and audio puzzles,"Jordan-Douglass, Anna and Kumar, Vishesh and Woods, Peter J.",2018,"Although educators, researchers, and designers have increasingly advocated for developing computational thinking (CT) in young children, the vast majority of CT learning environments fail to support the development of positive attitudes towards problem solving, confidence in dealing with complexity, and communicating and working with others to achieve a goal. To address this issue, our design team developed a music-based puzzle game called SynthSync. The game challenges players to work collaboratively to ""debug"" jumbled musical compositions through close listening, tinkering, and communication. SynthSync players manipulate controls to adjust musical variables (pitch, note length, and the length of rests) in arhythmic and dissonant musical puzzles based on popular songs until they ""discover"" the original piece of music."
Exploring Computational Thinking with Physical Play through Design,"Yu, Junnan and Hayden, Ronni and Roque, Ricarose",2023,"Physical play has often been leveraged to provide children with active and engaging learning experiences. However, coding activities are predominantly sedentary in front of the screen, and the application of physical play in Computer Science education is less explored, e.g., how can we engage in computational thinking (CT) through physical play? In this design-based exploration, we conducted three design activities where young children, college students, and researchers were invited to create physical play projects using the BBC micro:bit and reflect on their experiences. By examining participants’ projects and creating processes, we provide empirical evidence that remixing physical play activities with coding can engage learners in various CT concepts and practices, reveal how CT concepts and practices can be represented in physical play, and highlight implications for designing physical play-mediated computational learning experiences. Ultimately, we encourage more learning experiences to incorporate physical play into computing education for children."
Exploring concurrency on computational thinking tools,"Slaviero, Cleyton and Haeusler, Edward Hermann",2015,"Computational thinking (CT) tools express their designers' perspective on how a selected set of Computer Science concepts should be introduced, typically hiding details to avoid unnecessary complexity. This paper focuses on how concurrency is dealt with by five well-known tools in this domain: Scratch, Alice, AgentSheets, NetLogo and Greenfoot. We present the results of a systematic analysis contrasting their model of concurrent behavior with the corresponding programming interface messages that trigger their users' interpretation and learning of concurrency-related concepts. We present and discuss the conceptualizations that potentially emerge from using these five tools and compare them with established concurrency concepts. Our findings indicate opportunities for an explicit exploration of how some concurrency aspects are implemented in games and simulations built with CT tools. We believe that this might facilitate future learning and comprehension of complex concurrency concepts, considering that the knowledge embedded in these tools can also influence students' understanding of concurrency."
Exploring Different Unplugged Game-like Activities for Teaching Computational Thinking,"Jagušt, Tomislav and Krzic, Ana Sovic and Gledec, Gordan and Grgić, Mislav and Bojic, Iva",2018,Sin Valor
"Exploring Gender, Computational Making and E-Textiles using the BBC Micro:bit","Rode, Jennifer Ann and Barkhuus, Louise and Ioannou, Andri",2024,"We present a qualitative study of a Cypriot summer school where we used the BBC micro:bit to examine gender inclusivity in e-textiles. We employed the Computational Making framework to analyze ethnographic data teaching 24 middle school students, aged 10-15. The study contrasts the challenges faced by students using the micro:bit with those from our team’s previous similar e-textile studies using the LilyPad Arduino. We pinpoint the BBC micro:bit’s limitations from an inclusive design perspective, underscoring the absence of gender-sensitive considerations in its hardware design. The paper presents a critique how upwards of £75 Million were spent deploying the micro:bit without proper user studies of gender equity and e-textiles. We propose design recommendations for future BBC micro:bit versions, advocating for integrating a gender-sensitive participatory design approach to enhance the usability and engagement of computational and creative making with e-textiles for children of all genders."
Exploring How Game Genre in Student-Designed Games Influences Computational Thinking Development,"Troiano, Giovanni Maria and Chen, Qinyu and Alba, \'{A}ngela Vargas and Robles, Gregorio and Smith, Gillian and Cassidy, Michael and Tucker-Raymond, Eli and Puttick, Gillian and Harteveld, Casper",2020,"Game design is increasingly used in modern education to foster Computational Thinking (CT). Yet, it is unclear how and if the game genre of student-designed games impact CT and programming. We explore how game genre impacts CT development and programming routines in Scratch games designed by 8th-grade students using a metrics-based approach (i.e., Dr. Scratch). Our findings show that designing particular games (e.g., action, storytelling) impact CT and programming development. We observe, for instance, that CT skills develop and consolidate fast, after which students can focus on aspects more specific to game design. Based on the results, we suggest that researchers and educators in constructionist learning consider the impact of game genre when designing game-based curricula for the learning of programming and CT."
Exploring Math + CS in a Secondary Education Methods Course,"Kalathas, Paris and Parham-Mocello, Jennifer and Elliot, Rebekah and Lockwood, Elise",2022,"There is wide-spread agreement that K-12 students need opportunities to explore computer science (CS) concepts and computational thinking within a wide array of disciplines for advancing, broadening, and diversifying the participation in CS. Programs such as ""Computer Science for All"" were created by the US government to motivate and help students of all ages to engage with CS, which was described as the ""new basic skill for economic opportunity and social mobility"". However, what is less understood is how to prepare teachers to engage with CS concepts and computational thinking, expanding their specialized and pedagogical content knowledge on these concepts. This study explores this gap in the context of a graduate-level secondary math education methods course in a university environment. To reduce the cognitive load for the teacher candidates as well as their students, we utilize the secondary mathematics curriculum to explore CS concepts infused into mathematics, avoiding at the same time an increase to the teaching hours to the extent that it is detrimental to the existing K-12 curriculum. Our study uses hybrid block-text programming-based teaching modules specifically designed to expose the similarities and the differences between mathematics and CS. We utilize the concept of variable and operations around it to explore how the teacher candidates' conceptions and misconceptions about CS make the understanding of those concepts easy or challenging, and how that affects their ability to incorporate them into their teaching."
Exploring Novices' Problem-Solving Strategies in Computing and Math Domains,"Marwan, Samiha and Choquette, Nicki and Catet\'{e}, Veronica and B. Morrison, Briana",2024,"The hardship students face when beginning to problem solve can lessen motivation and confidence in their programming ability. An initial mitigation step is to explore students’ mindsets when first approaching a programming task, and distinguish between correct/incorrect models of problem-solving. This will help researchers and instructors realize what methods and tools can scaffold students’ problem-solving skill development in programming classrooms. Our goal is to uncover this information by investigating successful problem-solving approaches across the computing and math domains, and exploring whether it is possible to transfer a successful approach from math to the computing domain. We also explore whether students can apply a successful problem-solving strategy, such as problem decomposition, after being reminded or taught that such a strategy exists. We conducted an exploratory qualitative study with high-school students solving math and programming problems. Our data analysis reveals a number of problem-solving strategies in both programming and math, highlights their differences, and demonstrates the transfer problem-solving benefits across domains. We also found that simply instructing students how to apply a problem-solving strategy does not ensure its application. Overall, this research highlights the need to design tools that teach students how to apply successful problem-solving strategies."
Exploring Student Behavior Using the TIPP&amp;SEE Learning Strategy,"Franklin, Diana and Salac, Jean and Crenshaw, Zachary and Turimella, Saranya and Klain, Zipporah and Anaya, Marco and Thomas, Cathy",2020,"With the rise of Computational Thinking (CT) instruction at the elementary level, it is imperative for elementary computing instruction to support a variety of learners. TIPP&amp;SEE is a meta-cognitive learning strategy that scaffolds student learning when learning from example code. Results from a previous study show statistically-significant performance differences favoring students using the TIPP&amp;SEE strategy on a written assessment. In this work, our goal is gain insight as to it why such dramatic learning differences may have occurred. We analyze the students' computational artifacts and TIPP&amp;SEE worksheets. Artifact analysis reveals that students in the TIPP&amp;SEE group are more thorough in their work, completing more elements of the required tasks. In addition, they build open-ended projects with longer scripts that utilize more learned blocks. Worksheet analysis shows that students were highly accurate on some types of questions but largely skipped others. Despite these positive behaviors, there was little statistical correlation between student worksheet correctness, project completion, and written assessment performance. Therefore, while students in the TIPP&amp;SEE group performed actions we believe lead to more success, no individual actions directly explain the results. Like other meta-cognitive strategies, the value of TIPP&amp;SEE may lie in cognitive processes not directly observable, and may vary based upon individual student differences."
Exploring Students' Computational Thinking Skills in Modeling and Simulation Projects: a Pilot Study,"Grgurina, Nata\v{s}a and Barendsen, Erik and van Veen, Klaas and Suhre, Cor and Zwaneveld, Bert",2015,"Computational Thinking (CT) is gaining a lot of attention in education. We explored how to discern the occurrences of CT in the projects of 12th grade high school students in the computer science (CS) course. Within the projects, they constructed models and ran simulations of phenomena from other (STEM) disciplines. We examined which CT aspects occurred in students' activities and how to assess students' CT accomplishments. For this purpose we employed a framework based on CT characterizations by Wing [14, 15], CSTA [4] and Comer et al. [3]. We analyzed students' project documentation, survey results and interviews with individual students. The findings indicate that this framework is suitable for detection of occurrences of CT aspects in students' data. Moreover, our preliminary results suggest that the framework is useful in assessment of the quality of the students' CT performance."
Exploring Students' Experiences of Computer Science in Upper Secondary Education: A Qualitative Study,"Borges, Joyce and McGarr, Oliver and Exton, Chris and Harkin, Brian and McInerney, Clare",2024,"Computer Science was introduced in the upper secondary curriculum in Ireland in 2018. Initially introduced in 40 pilot schools, it has since expanded and is currently offered in approximately one-third of all schools across the country. Given its recent introduction, it was important to understand the students’ experiences and perceptions of the subject. This study reports on students’ experiences of studying Computer Science in a sample of secondary schools. A qualitative approach was adopted to comprehensively capture students’ insights, including one-to-one semi-structured interviews and other data collection methods that collected student-generated data. The study found that students had positive experiences and perceptions of the subject. Students enjoyed the active and interactive way Computer Science was taught and appreciated the peer learning opportunities that it provided. Students reported developing skills such as creativity, problem-solving, critical thinking, communication, and collaboration through the active learning approach. The project-based learning, afforded by the Applied Learning Tasks, was welcomed by students, although it also presented a number of challenges. Students opposed the prevalent stereotypical views of Computer Science, claiming that the subject was suitable for all, regardless of gender, prior knowledge, or abilities. The subject was considered relevant not only for those pursuing a career in Computer Science but for all students, as it acted as a vehicle to developing an understanding of the technology-rich society and foster valuable 21st century skills."
Exploring Teachers’ PCK for Computational Thinking in Context,"Yeni, Sabiha and Grgurina, Natasa and Hermans, Felienne and Tolboom, Jos and Barendsen, Erik",2021,"There is growing attention for integrating Computational Thinking (CT) into various subjects across the K-12 curriculum with a concomitant increase of interest in investigating teachers’ pedagogical content knowledge (PCK) regarding CT. This study is part of a bigger project focusing on defining the learning trajectories for CT integration into the K-12 curriculum. In particular, the present study focused on eliciting the pedagogical content knowledge and attitude of teachers with respect to the integration of CT in various disciplines. To this end, we implemented six different case studies by integrating CT into six different subjects: science, traffic, language, biology, geography, and physics. Two primary and four secondary school teachers were involved in the study. After the lesson series was completed in schools, we conducted interviews with teachers to understand their PCK on CT integration, attitudes toward CT integrated lessons, and the barriers teachers faced during CT integrated lessons. Our results indicate that compared to standard instructional activities, students can go deeper and understand the subject content better in CT integrated lessons, also students can use the power of digital technologies to solve subject-related problems. On the other hand, teachers pointed out that students and teachers need to be more capable of technical knowledge and skills to accomplish tasks."
Exploring the Balance Between Computational Thinking and Learning Motivation in Elementary Programming Education: An Empirical Study With Game-Based Learning,"Liu, Huizhong and Wu, Zengqing and Lu, Yili and Zhu, Ling",2023,Sin Valor
Exploring the Concept of Computational Thinking in STEM Education,"Revana, Guruswamy and Kavita, K. and Madhavi, V.",2021,Sin Valor
Exploring the Definition of Computational Thinking in Research and the Classroom,"Lowe, Tony and Brophy, Sean and Cardella, Monica",2019,"Our research group has studied how Kindergarteners through second graders can be introduced to the ideas of Computational Thinking (CT) through engineer design, unplugged, and programming activities. We often found it difficult to explain the boundaries and clear definitions for CT in research, to students and their teachers. Literature provides a variety of definitions from various perspectives, but these definitions often seem like capturing smoke. We see evidence CT, indicating fire, but how hot or lasting it burns cannot be measured by smoke alone. CT is typically defined by siloed concepts and skills. Some silos describe concrete ideas, which tend to be tied to programming principles. Many describe essential ideas, but over generalized becoming hard to teach and measure and distinguish from other types of problem solving. Is there a middle ground where we can clearly observe the presence and growing maturing of CT yet not limit the ways it can manifest, particularly without requiring coding? We hope this poster inspires conversation on 1.) the intersection of CT and programming skills, 2.) the priority and order for learning those skills, and 3.) how we can promote CT in disciplines who interact with and help define computational solutions yet are never expected to learn to program. We hope to share our perspective as well as garner feedback and possibly collaboration on better refining curriculum within Computer Science as well as promoting CT in other disciplines."
Exploring the Effect of a Robotics Laboratory on Computational Thinking Skills in Primary School Children Using the Bebras Tasks,"Chiazzese, Giuseppe and Arrigo, Marco and Chifari, Antonella and Lonati, Violetta and Tosto, Crispino",2018,"This paper presents preliminary findings from a project-based learning laboratory of robotics aimed at stimulating computational thinking processes in primary school students. The laboratory was carried out within the context of an ongoing project funded by the Italian Ministry of Education, University and Research. The aim of the project is to activate a national network for the enhancement of students' technological and scientific skills in school and extra-school settings. A group of 51 students, engaged in the robotics laboratory, were compared to a comparison group of 32 students in order to evaluate the impact of programming WeDo robotics artefacts on the development of computational thinking skills. Overall, the results showed that programming robotics artefacts may exert positive effects on children's acquisition of computational thinking skills."
Exploring the Effectiveness of Learning Scratch Programming with Code.org,"Yang, Kai-Hsiang and Lin, Hui-Ying",2019,Sin Valor
Exploring the Impact of Quizzes Interleaved with Write-Code Tasks in Elementary-Level Visual Programming,"Ghosh, Ahana and Malva, Liina and Gotovos, Alkis and Hooshyar, Danial and Singla, Adish",2025,"We explore the role of quizzes in elementary visual programming domains popularly used for K-8 computing education. Prior work has studied various quiz types, such as fill-in-the-gap write-code questions. However, the overall impact of these quizzes is unclear: studies often show utility in the learning phase when enhanced with quizzes, though limited transfer of utility in the post-learning phase. In this paper, we aim to better understand the impact of different quiz types and whether quizzes focusing on diverse skills (e.g., code debugging and task design) would have higher utility. We design a study with Hour of Code: Maze Challenge by code.org as the base curriculum, interleaved with different quiz types. Specifically, we examine two learning groups: (i) HoC-ACE with diverse quizzes including solution tracing, code debugging, code equivalence, and task design; (ii) HoC-Fill with simple quizzes on solution finding. We conducted a large-scale study with 405 students in grades 6--7. Our results highlight that the curriculum enhanced with richer quizzes led to higher utility during the post-learning phase."
Exploring the Impact of the Learning Sequence of Computational Thinking and Programming on Learning Outcomes,"Lai, Chien-Hung and Hsieh, Cheng-Han",2023,Sin Valor
Exploring the Interplay of Computational Thinking and Mathematics in Early Childhood Education: A Systematic Review,"Zhang, Ying and Wong, Gary K.W.",2024,Sin Valor
Exploring the Intersection of Emotional Literacy and Computational Modeling Using Scratch,"Vacca, Ralph",2019,"Computational thinking learning tools such as Scratch support forms of expressive making that can aid in reflection and understanding complex scientific concepts and systems. However, little research has explored how such computational tools might support forms of emotional literacy such as developing an understanding of emotions. Through an exploratory design with 11 participants, Scratch was used to create models representing participants' emotion knowledge. The overarching research question focused on how might computational tools aid in supporting reflection on emotion knowledge. Analysis of artifacts generated through sketching and Scratch, as well as transcribed design discussions were used as points of data analysis. Drawing on theories of computational thinking and emotional literacy, we present an analysis that highlights the potential for such tools to support certain reflective practices around emotion knowledge."
Exploring the Potential of Modern Board Games to Support Computational Thinking,"Machuqueiro, Fábio and Piedade, João",2023,Sin Valor
Exploring the Progression of Early Programmers in a Set of Computational Thinking Challenges via Clickstream Analysis,"Eguíluz, Andoni and Guenaga, Mariluz and Garaizar, Pablo and Olivares-Rodríguez, Cristian",2020,Sin Valor
Exploring The Psychometric Properties of Computational Thinking Assessment in Introductory Programming,"Anistyasari, Yeni and Ekohariadi, Ekohariadi and Asto Buditjahjanto, I. G. P and Hidayati, Shintami C",2021,Sin Valor
"Exploring the Relationship Between Collaborative Discourse, Programming Actions, and Cybersecurity and Computational Thinking Knowledge","Yett, Bernard and Snyder, Caitlin and Hutchins, Nicole and Biswas, Gautam",2020,Sin Valor
Exploring the Relationship Between Computational Thinking and Personality Traits,"Zhang, Wei and Song, Lingling and Zeng, Xinyao and Li, Panpan",2023,Sin Valor
Exploring the Role of Visual Programming Activities in Computational Thinking,"Lin, Chia-Ching and Chao, Po-Yao and Lin, En-Ting and Tzeng, Huei-Lin",2018,Sin Valor
Exploring the Use of Finite-State Machines and Game Creation to Teach Computational Thinking in Middle Schools,"Castro, Francisco Enrique Vicente",2022,"One challenge in teaching computational thinking (CT) in K-12 is that teachers often lack resources to teach CT in their classrooms. In this work, we explore the use of game creation as an avenue for teaching CT. We describe WearableLearning, an online platform with a finite-state machine-based interface for creating games and discuss how students can use it to learn and practice CT skills such as algorithmic thinking, problem decomposition, and debugging. Our goal is to empower teachers to teach CT through engaging game creation activities that enable students to create games and play the games that their peers developed through wearable devices."
Exploring Threshold Concepts for Intermediate Students,"McSkimming, Brian M. and Decker, Adrienne",2022,"This lightning talk describes our current efforts to isolate and identify potential threshold concepts and threshold capabilities which are experienced by intermediate computer science undergraduate students. We are utilizing the theoretical framework as described by Meyer, Land, Bowden, and Baillie. Two of the key identifiable characteristics surrounding a threshold concept are (1) the transformation one undergoes as a result of incorporating the concept into their knowledge and (2) the state of uncertainty (liminality) experienced as the learner develops this understanding. As a result of this transformation and the resultant traversal of a liminal state, elements of an identity are often developed. For the computer science undergraduate, we hypothesize that advanced computational thinking skills are developed along with these transformations leading to the development of a computer scientist identity. Through identification of the threshold concepts/capabilities experienced by intermediate students the potential corollary concepts behind computational thinking may be uncovered as well. The overall project intends to integrate elements of threshold concepts, liminality, and transformative learning to produce a framework through which computational thinking can be probed and students' progression can be better assessed and supported. These efforts are only beginning - curious faculty and students are invited to attend our presentation and consider potential collaborative participation in our endeavors."
Exploring Threshold Concepts for Intermediate Students,"McSkimming, Brian M. and Decker, Adrienne",2022,"Each year, we graduate a fair number of students with college degrees in computing-related disciplines. Each year, we lose a fair number of students out of the discipline. We spend a good deal of time focusing on what is causing students to leave or fail. We do not spend a lot of time focusing on the learning journey and supporting students throughout their transformative experiences. Threshold concepts are those concepts or learning experiences which define the overall disciplinary learning journey, enabling the learner to see from a new perspective, participate in discourse previously unavailable to them, and engage with the world from a transformed frame of understanding. They are often those concepts difficult for students to understand within a discipline such as ""personhood' in Philosophy, 'gravity' in Physics, or 'limit' in Mathematics. As a result of this transformation and the resultant traversal of a liminal state, elements of an identity developed. In this poster, we present our current work identifying potential threshold concepts experienced by intermediate computer science students and consider the impact of these concepts on their development of an identity within computer science."
ExposAR: Bringing Augmented Reality to the Computational Thinking Agenda through a Collaborative Authoring Tool,"Lunding, Mille Skovhus and Gr\o{}nb\ae{}k, Jens Emil Sloth and Bilstrup, Karl-Emil Kj\ae{}r and S\o{}rensen, Marie-Louise Stisen Kjerstein and Petersen, Marianne Graves",2022,"There is a growing focus on computational thinking (CT) in terms of supporting children’s understanding of everyday technologies. But unlike other technologies, Augmented Reality (AR) has received limited attention. In this paper, we present ExposAR – a collaborative cross-device AR system enabling children to create, use, and reflect on AR technologies through the co-creation of a simple AR application. With ExposAR, we explore three core design principles: 1) reify computational concepts, 2) support collaborative cross-device authoring, and 3) incorporate the user’s own world. These principles were developed through a co-design process with teachers and evaluated with 46 primary school students. We found that the collaborative authoring process with ExposAR supported students in understanding AR concepts and challenged their perspectives on AR. With these results, we bring AR to the CT agenda and contribute novel design principles for exposing the underlying mechanisms and implications of AR."
Extending and Evaluating the Use-Modify-Create Progression for Engaging Youth in Computational Thinking,"Martin, Fred and Lee, Irene and Lytle, Nicholas and Sentance, Sue and Lao, Natalie",2020,"The Use-Modify-Create progression (UMC) was conceptualized in 2011 after comparing the productive integration of computational thinking across National Science Foundation-funded Innovative Technology Experiences for Students and Teachers (NSF ITEST) programs. Since that time, UMC has been widely promoted as a means to scaffold student learning of computational thinking (CT) while enabling personalization and allowing for creative adaptations of pre-existing computational artifacts. In addition to UMC's continued application, it has recently been utilized to scaffold student learning in topics as diverse as machine learning, e-textiles, and computer programming. UMC has also been applied to instructional goals other than ""supporting students in becoming creators of computational artifacts."" This panel will re-examine the UMC progression and refine our understanding of when its use is suitable, and when not, and share findings on evaluations and extensions to UMC that are productive in new and different contexts."
Extending Computational Thinking into Information and Communication Technology Literacy Measurement: Gender and Grade Issues,"Kim, Han Sung and Kim, Soohwan and Na, Wooyoul and Lee, Woon Jee",2021,"As Information and Communication Technology (ICT) literacy education has recently shifted to fostering computing thinking ability as well as ICT use, many countries are conducting research on national curriculum and evaluation. In this study, we measured Korean students’ ICT literacy levels by using the national measurement tool that assesses abilities of the IT (Information Technology) area and the CT (Computational Thinking) area. A research team revised an existing ICT literacy assessment tool for the IT test and developed a new CT test environment in which students could perform actual coding through a web-based programming tool such as Scratch. Additionally, after assessing ICT literacy levels, differences in ICT literacy levels by gender and grade were analyzed to provide evidence for national education policies. Approximately 23,000 elementary and middle school students participated in the 2018 national assessment of ICT literacy, accounting for 1% of the national population of students. The findings demonstrated that female students had higher literacy levels in most sub-factors of IT and CT areas. Additionally, in the areas of strengths and weaknesses, the ratio of below-basic achievement among male students was at least two times greater than that of female students. Nonetheless, male students scored higher on CT automation, a coding item that involved problem solving using Scratch. Looking at the difference according to grade level, the level improved as the school year increased in elementary school, but there was no difference in middle school. When analyzing the detailed elements of middle school students, the automation factor of seventh grade students was found to be higher than eighth and ninth grade students. Based on these results, this study discussed some implications for ICT and computing education in elementary and middle schools."
Eye Tracking to Evaluate Comprehension of Computational Thinking,"Arslanyilmaz, Abdurrahman and Corpier, Kendra",2019,"concepts (CTCs), specifically in block-based programming environments like Scratch, has been challenging, and assessment instruments developed and presented in prior studies either do not provide a complete picture about students' cognitive processes or they are not easy-to-administer, subjective, or requires lengthy analysis of qualitative data. Eye-tracking has become one of the most popular methods to study what individuals view, in what order, for how long, and how often, and it is a technology that could give us a window into students' cognitive processes and could be used as an assessment tool for comprehension of CTCs [1].This study presents eye-tracking technology as an objective, non-intrusive, and easy-to-administer assessment instrument to measure students' comprehension of core CTCs including sequences, loops, events, parallelism, conditionals, operators, data, motion, looks, sound, pen, and sensing. It explores gradual changes in students' comprehension of CTCs as reflected on three eye-gaze data as a proxy; FD (Fixation Duration), SA (Saccade Amplitudes), and RF (Regression Frequency)."
Facilitating Computational Thinking through Digital Fabrication,"Montero, Calkin Suero",2018,"Curricular changes towards fostering computational thinking through programming activities for students of all ages are spreading rapidly throughout Europe. However, students may be negatively biased or not interested or prepared to engage in such activities. This work proposes digital fabrication within a hands-on pedagogical frame as an approach to engage students in programming activities facilitating the use and understanding of computational thinking concepts. Within the proposed approach, students engage in programming applied to develop tasks from their school curriculum. This paper illustrates the approach through pilot trial experiences at a local junior high school."
Facilitating Students’ Abstract and Computational Thinking Skills Using Virtual Reality,"Wang, Xinze and Saito, Daisuke and Washizaki, Hironori and Fukazawa, Yoshiaki",2023,Sin Valor
Factors That Predict K-12 Teachers' Ability to Apply Computational Thinking Skills,"Tagare, Deepti",2024,"Background and Objective. Teacher assessment research suggests that teachers have good conceptual understanding of CT. However, to model CT-based problem-solving in their classrooms, teachers need to develop the ability to recognize when and how to apply CT skills. Does existing professional development (PD) equip teachers to know when and how to apply CT skills? What factors should PD providers consider while developing trainings for CT application skills?Method. This retrospective observational study used a binomial regression model to determine what factors predict teachers’ probability of performing well on a CT application skills test.Participants. Participants of this study were 129 in-service K-12 teachers from a community of practice in India.Findings. Results show that teachers who have received at least one CT training, who have a higher teaching experience, and are currently teaching CT will have a higher probability of applying CT skills correctly to problems irrespective of the subject they teach and their educational backgrounds. However, receiving a higher number of CT PD trainings was a negative predictor of teachers’ performance.Implications. Implications for school administrators, professional development providers, and researchers are discussed. Teachers need ample opportunity to teach CT in their teaching schedules. Continuous professional development does not necessarily result in improved CT application skills unless careful consideration is given to the pedagogies used and to the resolution of misconceptions that teachers may have developed in prior training. Mixing plugged and unplugged pedagogical approaches may be beneficial to encourage transfer of CT application skills across different types of problems. Last, there is a need to develop valid and reliable instruments that measure CT application skills of teachers."
"File references, trees, and computational thinking","Miller, Craig S. and Perkovi\'{c}, Ljubomir and Settle, Amber",2010,"We study student understanding of the use of a tree structure in the context of an introductory web development course. In particular, we analyze student answers as they use a tree structure to construct file references in web pages. More fundamentally, our study initiates a bottom-up study of computational thinking by identifying the computational thinking mistakes that students make when they are learning resource referencing for web development. Our preliminary results suggest that students do not necessarily learn abstract concepts (like trees) and abstract rules of reasoning (composing relative and absolute tree paths) by just working with folders and composing file references alone."
Filling an Educational Void with Spatial Thinking in the Online Age of Pandemics,"Sherwin, Kate and Winter, Victor",2020,COVID-19 has created challenges and opportunities for K-12 education. Advances in technology and changes to the delivery mode of educational content has provided opportunities to better integrate spatial thinking into curriculums. Such integration is of enormous value due to the centrality of spatial thinking within the STEM disciplines.
Findings from a Multi-year Study of CT in K-2 Students in Formal and Informal Settings,"Lowe, Tony and Brophy, Sean and Cardella, Monica",2019,"For the past four years, our research group has conducted a series of NSF funded studies on Computational Thinking (CT) involving elementary school students, parents, and teachers. We developed curriculum, trained teachers, observed classrooms, created museum exhibits, followed students and families, explored theory, and utilized the diverse skills of a large multi-disciplinary research group to understand the intersection of STEM, literacy, and CT. As we close out this grant, we are looking to disseminate our findings, share lessons learned about research methods and data collection, and build collaborations for future research."
First Steps Towards Automatically Defining the Difficulty of Maze-Based Programming Challenges,"Kanellopoulou, Ioanna and Garaizar, Pablo and Guenaga, Mariluz",2021,Sin Valor
First year student performance in a test for computational thinking,"Gouws, Lindsey and Bradshaw, Karen and Wentworth, Peter",2013,"Computational thinking, a form of thinking and problem solving within computer science, has become a popular focus of research on computer science education. In this paper, we attempt to investigate the role that computational thinking plays in the experience of introductory computer science students at a South African university. To this end, we have designed and administered a test for computational thinking ability, and contrasted the results of this test with the class marks for the students involved. The results of this test give us an initial view of the abilities that students possess when entering the computer science course. The results indicate that students who performed well in the assessment have a favourable pass rate for their class tests, and specific areas of weakness have been identified. Finally, we describe the plan for a follow-up test to take place at the end of the course to determine how students' abilities have changed over a semester of studies."
First year students' attitude to computer problem solving,"Csernoch, Mária and Biró, Piroska",2017,Sin Valor
Five Design Recommendations for Teaching Teenagers’ about Artificial Intelligence and Machine Learning,"Schaper, Marie-Monique and Tamashiro, Mariana Aki and Smith, Rachel Charlotte and Van Mechelen, Maarten and Iversen, Ole Sejer",2023,"Technologies based on AI/ML are playing an increasingly prominent role in teenagers’ everyday lives. Mirroring this trend is a concomitant interest in teaching young people about intelligent technologies. Whereas previous research in the field of Child–Computer Interaction has proposed curriculum and learning activities that describe what teenagers need to learn about AI/ML, there is still a shortage of studies which specifically address teenager-centered perspectives in the teaching of AI/ML. This paper presents a study of teenagers’ everyday understanding of AI/ML technologies. Using a thematic analysis of the teenagers’ own explanations during a series of workshops, we present a conceptual map of the teenagers’ understandings of these technologies. We go on to propose five general recommendations for the teaching of AI/ML to teenagers through the lens of Computational Empowerment. Taken together, these recommendations serve as a teenage-centered starting point for teaching young people about intelligent technologies, an approach that can be implemented in future research interventions with similar objectives."
FLAMES: A Socially Relevant Computing Experience for High School Students,"Isvik, Amy",2020,"In this poster, I examine a two-pronged, female-oriented, high school computing outreach program, FLAMES, incorporating 1) workshops throughout the school year and 2) an 8-week high school summer intern program run within the Game2Learn lab at North Carolina State University. I focus on examining the effects of the program on students' skills and affect towards computing. Literature has shown that socially relevant themes in computing are engaging for women and underrepresented minorities. Students understanding how these themes connect to computer science helps broaden their view of computing and increases their interest in pursuing a computing career. This initiative uses socially relevant themes, specifically around the context of developing educational tools and block-based programming activities for use in K-12 classrooms. High school students were trained to assist North and South Carolina teachers with the development of Computational Thinking-infused curricula for their science, math, English, and social studies classrooms. Additionally, summer students assisted in research labs alongside undergraduate researchers, aiding in field study observations, software testing, and data classification. This poster presents the design of the program, an overview of the curriculum, and results including both student and teacher feedback. Results show that the outreach program has benefited each of the parties involved, including its student participants, researchers, and the teachers assisted by the participants. I share lessons learned from this experience in order to help other CS departments develop similar broadening participation in computing programs."
FLAMES: A Socially Relevant Computing Summer Internship for High School Students,"Isvik, Amy and Cateté, Veronica and Barnes, Tiffany",2020,Sin Valor
Flipped Learning of Scratch Programming with code.org,"Kim, Jeong Ah and Kim, Hee Jin",2017,"In this paper, we describe the effect of code.org as pre-class resources for flipped learning of Scratch programming education. Pre-class resources are very important for increase the outcome of the flipped learning. These days, there are so many open courseware about coding available for pre-class. The objectives of programming might be to increase the computational thinking for problem solving. In this research, we suggest that flipped learning is very good way to increase the computational thinking for problem solving and code.org is good resource for pre-class."
Flipping coins: an activity for introducing computational thinking to non-computer science majors: demonstration,"Toth, David",2010,"In this demo, I will present an activity that I use to introduce computational thinking in my non-majors course and outreach talks at high schools. I do this by first talking about what modeling and simulation are and why they are useful. Following this explanation, I introduce a variant of a problem about Alice and Bob. In the original problem, Alice and Bob take turns flipping a coin until one of them gets heads and wins. If Alice goes first, what is the probability that she wins? In class, I introduce this variant of the problem: ""Bob suggests to Alice that they play a game. They will take turns flipping a coin until one of them wins by getting heads. The winner will then receive a dollar from the loser. If Bob says he will always let Alice go first, should Alice play the game?"" While this problem is trivial for those comfortable with basic probability and familiar with geometric sequences, most of my students who are not computer science majors are not comfortable with math. Thus, I explain that although the problem can be solved with some math, instead we should first model the problem. Once we have modeled the problem, I have my students get some intuition by pairing off and having each pair play the game 20 times. I collect the results and discuss how so few trials are not sufficient to draw conclusions. Finally, I run a simulation that runs the game one million times and demonstrates that Alice should win 2/3 of the time and thus should play the game."
FlowPilot: A Generative AI-Driven Visual Language for Computational Thinking Education,"Turchi, Tommaso",2024,Sin Valor
Food for Advanced Computational Thinking: Critical and Creative Approaches to Technology at Te Kura Taurua Manurewa,"Sosa, Ricardo and Gibbons, Andrew and O'Riordan, Emma and Iorangi, Keu and Crowe, Andy and Gibson, Leanne and Harris, Sam and Badenhorst, Daniel",2022,"This paper focuses on a participatory activity that is part of an ongoing partnership formed six years ago between teachers and academics to study creative technology approaches to youth participation. By focusing on a food-based activity in an after-school maker space, we reflect on the pedagogical and methodological innovations, and the ethical and aesthetic qualities of food-based activities for participatory design. The session brought together students and teachers to form a generative dialogue around computation and automation while preparing and sharing food. The results suggest opportunities to rethink current curricular, pedagogical, and education policy strategies. Recommendations for organizers to prepare generative activities where food is used as a design material close the paper."
Formalizing Problem Solving in Computational Thinking : an Ontology approach,"Mercier, Chloé and Roux, Lisa and Romero, Margarida and Alexandre, Frédéric and Viéville, Thierry",2021,Sin Valor
Fostering Computational Thinking and Systems Thinking through Aquaponics Capstone Projects,"Ng, Andrew Keong and Mahkeswaran, R",2021,Sin Valor
"Fostering computational thinking in engineering education: Challenges, examples, and best practices","Gross, Sebastian and Kim, Mischa and Schlosser, Joachim and Mohtadi, Coorous and Lluch, Dan and Schneider, Dorian",2014,Sin Valor
Fostering computational thinking skills with a tangible blocks programming environment,"Turchi, Tommaso and Malizia, Alessio",2016,Sin Valor
Fostering Computational Thinking through Problem-Solving at School,"Labusch, Amelie",2018,"Computational thinking has recently gained more and more relevance as problem-solving competence of the 21st century. Taking Wing's [1] grand vision into account, each student should have certain skills in computational thinking in order to be able to participate adequately in social life and in his/her future profession. Thus, the International Computer and Information Literacy Study (ICILS 2018) does in addition to other student competences also measure their achievement in computational thinking [2]. In this internationally comparative large-scale assessment with a representative sample, a sound body of information is gathered that is used, among others, to explain variation in students' achievement in computational thinking. One field that represents a national extension in Germany is problem-solving. This paper presents a PhD project that focuses on this field and provides an analysis model that examines the relationship between students' self-perceived problem-solving skills and their computational thinking skills, taking into account further variables of influence and aims to explain variation in students' achievement of computational thinking."
Fostering Critical and Computational Thinking in the Field of Primary and Secondary Education in non-STEM Subjects by Using Data Sets and Applications,"Vlahović, Ines and Biškupić, Ivana Ogrizek",2023,Sin Valor
Fractal Geometry: Enhancing Computational Thinking with MIT Scratch,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
Frame Shifting as a Challenge to Integrating Computational Thinking in Secondary Mathematics Education,"Huang, Wendy and Chan, Shiau Wei and Looi, Chee Kit",2021,"In this study, we adapted the notion of framing, a theoretical construct that refers to a person's expectations about social spaces (Goffman, 1974), to investigate whether teachers viewed computational thinking (CT) according to subject-specific frames. This case study aimed to understand how teachers make connections between CT and subjects targeted for integration. Epistemological framing contributed new insights on why teachers connected CT in different ways to different subjects: frame shifting focused teachers' attention on goals and activities specific to each subject. As teachers attended to a subject's particularities, they drew upon different epistemic resources to construct their descriptions of CT. Our participants (n=6) were teachers who taught both 7th-12th grade computing and mathematics as separate subjects. Qualitative coding of interview transcripts revealed that teachers' ideas about CT in computing were strongly influenced by computer programming while their ideas about CT in mathematics corresponded with familiar ways of teaching and learning mathematics. Instead of accepting fragmented notions of CT as the price of integration into individual subjects, we propose limiting the scope when defining CT. We explain how this non-intuitive strategy can preserve the coherence of CT and how it might be used in CT professional development (PD) for mathematics teachers."
Frogs to Think with: Improving Students' Computational Thinking and Understanding of Evolution in A Code-First Learning Environment,"Guo, Yu and Wagh, Aditi and Brady, Corey and Levy, Sharona T. and Horn, Michael S. and Wilensky, Uri",2016,"This paper presents Frog Pond, an interactive code-first learning environment about biological evolution. We deployed Frog Pond as part of a six-day curricular unit on natural selection implemented in six 7th grade science classes. Here we describe a case study of two students, Charlie and Aaron who participated in the unit. Comparing pre- and post- interviews in which they were asked to design a program for a hypothetical simulation of evolution, we found that both students shifted from an event-based programming approach to a rule-based approach. Both students also drew upon their experience with Frog Pond to explain an evolutionary phenomenon. However, the level of sophistication of the two students' explanations varied along with the aspects of Frog Pond they drew upon. These findings have implications for design improvement to better support students' understanding of evolution."
From Algorithmic to Computational Thinking: On the Way for Computing for all Students,"Sys\l{}o, Maciej M.",2015,"Computational thinking, as coined by Jeannette Wing, is a fundamental skill for all to be able to live in today's world, a mode of thought that goes well beyond computing and provides a framework for reasoning about problems and methods of their solution. It has a long tradition as algorithmic thinking which within computer science is a competence to formulate a solution of a problem in the form of an algorithm and then to implement the algorithm as a computer program. Computational thinking is not an adequate characterization of computer science as claimed by Peter Denning and he is right -- it is a collection of key mental tools and practices originated in computing but addressed to all areas far beyond computer science. As an extension of algorithmic thinking, it includes thinking with many levels of abstraction as a problem solving approach inherently connected to computer science and addressed to all students to use computers and computing skills in solving problems in various school subjects coming from various scientific and applied areas. Computational thinking involves concepts, skills and competences that lie at the heart of computing, such as abstraction, decomposition, generalization, approximation, heuristics, algorithm design, efficiency and complexity issues and therefore it is clear that basic computer science knowledge helps to systematically, correctly, and efficiently process information, perform tasks, and solve problems. Although coming from computer science, computational thinking is not only the study of computer science, though computers play an essential role in the design of problems' solutions. It is a very important and useful mode of thinking in almost all disciplines and school subjects as an insight into what can and cannot be computed.In this talk we shall discuss a new computing curriculum addressed to ALL students in K-12 in Poland which motivates them to use computational thinking in solving problems in various school subjects. Moreover its goal is to encourage and prepare students from early school years to consider computing and related fields as disciplines of their future study and professional career. To this end, the curriculum allows teachers and schools to personalize learning and teaching according to students' interests, abilities, and needs.The new computing curriculum benefits a lot from our experience in teaching informatics in our schools for almost 30 years -- the first curriculum was approved by the ministry of education in 1985, 20 years after the first regular classes on informatics were held in two high schools in Wroc\l{}aw and in Warsaw. Today, informatics is an obligatory subject in middle school (grades 7-9) and high school (grades 10-12) and it will replace computer lessons (mainly on ICT) in elementary schools (grades 1-6). The new curriculum is also addressed to vocational education."
From computational thinking to coding and back,"DePryck, Koen",2016,"Introducing coding in the curriculum at an early age is considered a long term investment in bridging the skills gap between the technology demands of the labour market and the availability of people to fill them. The keys to success include moving from mere literacy to active control - not only at the level of learners but also at the level of teachers. However, given the fast development of the field, one might wonder whether acquiring specific coding skills really is the essence of introducing coding early in the curriculum. We argue that the reach of ICT -including coding skills- is much broader than STEM alone and a background in STEM is no longer a requirement for successful coding. The complex link between coding and computational thinking is the real critical success factor. We refer to TACCLE3 (an EU Erasmus+ project) as a successful approach to the implementation and valorisation of computational thinking across the curriculum."
From computational thinking to computational action,"Tissenbaum, Mike and Sheldon, Josh and Abelson, Hal",2019,Envisioning computing education that both teaches and empowers.
From computational thinking to computational empowerment: a 21st century PD agenda,"Iversen, Ole Sejer and Smith, Rachel Charlotte and Dindler, Christian",2018,"We propose computational empowerment as an approach and a Participatory Design response to challenges related to digitalization of society and the emerging need for digital literacy in K12 education. Our approach extends the current focus on computational thinking to include contextual, human-centred and societal challenges and impacts involved in students' creative and critical engagement with digital technology. Our research is based on the FabLab@School project, in which a PD approach to computational empowerment provided opportunities as well as further challenges for the complex agenda of digital technology in education. We argue that PD has the potential to drive a computational empowerment agenda in education by connecting political PD with contemporary visions for addressing a future digitalized labour market and society."
From computational thinking to computational making,"Rode, Jennifer A. and Weibert, Anne and Marshall, Andrea and Aal, Konstantin and von Rekowski, Thomas and Elmimouni, Houda and Booker, Jennifer",2015,"Computational thinking is considered best practice for teaching computing and more broadly to solve problems and design systems, however as computing extends beyond the desktop (for instance increased integration of ubicomp technologies) so too must our educational methods. Exposure to ubicomp technologies is most accessible through the maker movement. With this in mind we argue we must move from computational thinking to computational making as an educational framework. Here we present a case study of children's making to support our vision for a broader conception of computational making."
From computational thinking to computational making,"Rode, Jennifer A. and Marshall, Andrea and Weibert, Anne and Aal, Konstantin and von Rekowski, Thomas and Elmimouni, Houda and Sharma, Akshay and Jobs, Jordan and Schleeter, Alexis and Booker, Jennifer",2015,"This demo focuses supplements our paper ""From Computational Thinking to Computation Making"" to allow visitors to interact with the various technologies the children in our club created, including an interactive monster. Additionally, to make the demo interactive and to encourage conference attendees to discuss their experience of ""making"" we will have a Monster Making contest."
From computational thinking to computational participation in K--12 education,"Kafai, Yasmin B.",2016,Seeking to reframe computational thinking as computational participation.
From computational thinking to computational values,"Abelson, Hal",2012,"SIGCSE members love the beauty of computational thinking. They know the joy of bringing those ideas to young people. That love for computational thinking entails respect for the computational values that empower people in the digital world. For academics, those values have been central to the flowering of computing as an intellectual endeavor. Today, those values are increasingly threatened by stresses from both within and outside academia: squabbles over who owns academic work, increasingly stringent and overreaching intellectual property laws, and the replacement of open computing platforms by closed applications and walled-garden application markets.In this talk I'll describe some things we've done at MIT to support computational values, like open publication of all our course materials, our faculty policy on open publication of academic research, and our recently announced initiative for open online instruction based on non-proprietary software platforms. I'll discuss Creative Commons licensing and Free Software, and the importance of tinkerability for empowering citizens in an information society. And I'll describe App Inventor for Android, a new programming tool motivated by the vision that all of us us can experience mobile computing as creators using tools that we can control and reshape, rather than only as consumers of packaged applications."
From Embodied Doing to Computational Thinking in Kindergarten: A Punctuated Motor Control Model,"Sinha, Ravi and Swanson, Hillary and Clarke-Midura, Jody and Shumway, Jessica F. and Lee, Victor R. and Chandrasekharan, Sanjay",2023,"We propose a motor control-based characterization of how computational thinking (CT) can emerge from embodied performance. The account is based on children's activity during a tangible coding task, and a mechanism proposed by cognitive and motor neuroscience studies. For the task, the child used navigational symbols (forward, backward, rotate right, rotate left) to program the movements of a tangible robot on a 2-D grid. We propose that the development of CT through this task can be understood in terms of “tool incorporation into the body schema.” To illustrate the proposed mechanism, we use video data from one of three teaching sessions, where a group of four kindergartners learned to code using Cubetto (a tactile screen-free grid-based robotic toy). We argue that learning the task (i.e. being able to control Cubetto to perform goal-oriented movements) is challenging because the CT task requires learners to bridge three distinct discontinuities (spatial, temporal, and representational), to achieve control over the robot. We hypothesize that learners and facilitators are likely to engage in moves (both epistemic and pedagogical) that help bridge these gaps, and thus support the incorporation of the robot and its controller into the body schema. We characterize two such moves and explicate how they might support the incorporation process. The study is part of a larger program of design-based research aimed at helping young children develop CT."
From Minecraft to Minds,"Booch, Grady",2013,Sin Valor
From Primary Education to Premium Workforce: Drawing on K-12 Approaches for Developing AI Literacy,"Kaspersen, Magnus H\o{}holt and Musaeus, Line Have and Bilstrup, Karl-Emil Kj\ae{}r and Petersen, Marianne Graves and Iversen, Ole Sejer and Dindler, Christian and Dalsgaard, Peter",2024,"Advances in artificial intelligence present a need for fostering AI literacy in workplaces. While there is a lack of research on how this can be achieved, there are documented successful approaches in child-computer interaction (CCI), albeit aimed at K-12 education. We present an in-vivo explorative case study of how CCI approaches can be adopted for adult professionals via a full-day workshop developed in collaboration with a trade union to upskill workers. Analyzing data from pre- and post-surveys, a follow-up survey, and materials produced by participants (n=53), we demonstrate how this increased participants’ knowledge of AI while their self-efficacy and empowerment did not improve. This is similar to findings from K-12 education, pointing to self-efficacy and empowerment as major challenges for AI literacy across sectors. We discuss the role of ambassadorships and professional organizations in addressing these issues, and indicate research directions for the CHI community."
"From Theory Bias to Theory Dialogue: Embracing Cognitive, Situated, and Critical Framings of Computational Thinking in K-12 CS Education","Kafai, Yasmin and Proctor, Chris and Lui, Debora",2019,"The increased interest in promoting CS education for all has been coalescing around the idea of ""computational thinking."" Several framings for promoting computational thinking in K-12 education have been proposed by practitioners and researchers that each place different emphases on either (1) skill and competence building, (2) creative expression and participation, or (3) social justice and ethics. We review each framing and how the framings structure the theory space of computational thinking. We then discuss how CS education can leverage the explanatory potential that each framing offers to the implementation and evaluation of learning, teaching, and tools in computing education. Our goal is to help CS education researchers, teachers, and designers unpack and leverage the complexities of this theory space (rather than ignoring it) while also addressing broader educational concerns regarding diversity, providing new directions for how students and teachers can actively participate in designing their digital futures, and directing current computing education efforts towards a more humanistic orientation."
"From theory bias to theory dialogue: embracing cognitive, situated, and critical framings of computational thinking in K-12 CS education","Kafai, Yasmin and Proctor, Chris and Lui, Debora",2020,Sin Valor
FruitSort: the educational computational thinking game with accessibility for hearing-impaired children,"Raia, Marcos Librelon and Martins, André Giacon and Kas, Gustavo Paulino Al and Eliseo, Maria Amelia",2023,Sin Valor
Future-Proofing Kiwi Kids Through the Use of Digital Technology,"Liesaputra, Veronica and Ramirez-Prado, Guillermo and Barmada, Bashar and Song, Lei",2020,"The common approach for introducing middle school and high school students to computational thinking and engineering is through programming or robotics activities that were designed without much social context. Therefore, one of the challenges such outreach programs pose is further stereotyping of students who are interested in computer science, by presenting them as people who ought to be hyper-intelligent and very much focused on computers with no social skills. Realizing the above, and wanting to attract a diverse audience to study computer science, we developed a one-day workshop which showcases the interdisciplinary nature of computer science and the various ways computing can help students discover and solve societal problems. We chose multiculturalism, cyber security and air pollution as the context of our computational thinking activities. This paper describes our experiences in developing and teaching the workshops that runs three to five times a year, hosted either in our institute or at local schools. Regardless of students' previous STEM experiences and socioeconomic statuses, both students and teachers reported that the knowledge gained enabled them to either create a computer program or a robot and also led to a better understanding of how computers can be used in daily life. In other words, the workshop successfully opened the minds and perspectives of the middle school and high school students on computer science. Additionally, over time, we also observed an increased number of students and schools participating in such workshops."
Game design workshop to develop computational thinking skills in teenagers with Autism Spectrum Disorders,"Munoz, Roberto and Barcelos, Thiago S. and Villarroel, Rodolfo and Silveira, Ismar Frango",2016,Sin Valor
Game modding for computational thinking: an integrated design approach,"Grizioti, Marianthi and Kynigos, Chronis",2018,"In this paper, we explore the possible contribution of game modification (or modding) process to the development of Computational Thinking skills by discussing the design of ChoiCo (Choices with Consequences), an online digital environment for game creation and modding. ChoiCo integrates three different affordances for designing its games: a map-based (GIS) game scene, a simplified database and block-based programming editors. We also present a pilot study in which Junior High School students used ChoiCo for creating mods of a given digital game, based on a three-step modding scenario."
Game-Based Learning for Young Children: A Case Study,"Pombo, Nuno and Lamas, Dorilene",2022,Sin Valor
Gamification and Engagement: Development of Computational Thinking and the Implications in Mathematical Learning,"Pires, Fernanda and Maquine Lima, Fabio Michel and Melo, Rafaela and Serique Bernardo, João Ricardo and de Freitas, Rosiane",2019,Sin Valor
Gamified forms: a proposal for teaching training based on Computational Thinking,"Rodrigues, Claudio Ferreira and Silveira, Ismar Frango",2021,Sin Valor
Gamified Virtual Reality for Computational Thinking,"Gerini, Lorenzo and Delzanno, Giorgio and Guerrini, Giovanna and Solari, Fabio and Chessa, Manuela",2023,"In Computer Science Education, coding activities are extremely important to teach younger students the basics of programming and computational thinking. To provide an immersive experience, in this paper, we propose VRCoding, a Virtual Reality (VR)-based block coding system. VRCoding can teach computational thinking in an immersive Virtual Reality environment, exploiting passive haptics to improve interaction and give tactile feedback to the users. Passive haptics is obtained using simple physics placeholders, i.e., textured parallelepipeds, that are tracked in real-time, and aligned with the coding blocks in VR.  
The system is tested on a group of secondary school users, performing simple coding exercises with a standard monitor-based block coding environment and with the proposed VRCoding block language. Results show positive feedback concerning the sense of presence and the user experience."
Gender and Computational Thinking: Review of the literature and applications,"Espino, Elisenda Eva Espino and Gonz\'{a}lez, Carina Gonz\'{a}lez",2016,"Technologies of Information and Communication Technologies (ICT) have contributed significantly to the emergence of the Knowledge Society. However, there is a strong gender gap in the field of science and technology due to the influence of the male-centered culture that persists today. Computational thinking is presented as a way to develop in children from an early age the ability to solve problems, designing systems and understanding human behavior while using the fundamental concepts of computing. This factor allows girls to be in touch with technology in a fun and meaningful way; so as to balance the male and female presence in science and technology, achieving a more egalitarian system. In this article is presented a systematic review of the literature which indicates that few studies about computational thinking are working from a gender perspective, although some countries have already opted for teaching computer in the classroom. In addition, the review shows some methodologies which are using languages and suitable tools in order to work the computational thinking. Notwithstanding, It can be the basis for a proposal to integrate the gender perspective. In turn, it is committed to the creation of a methodological guide that encourages this teaching in national and international schools."
Gender Characteristics and Computational Thinking in Scratch,"Niousha, Rose and Saito, Daisuke and Washizaki, Hironori and Fukazawa, Yoshiaki",2023,"This study investigates the Computational Thinking skill differences among novice programmers in relation to gender. Block-based visual programming languages such as Scratch particularly benefit K-12 programmers because they learn how to code intuitively. Our study analyzed 124 (62 males, 62 females) Scratch projects on the Scratch website, categorized projects on the basis of each user's gender and project type, and compared their Computational Thinking scores. The results of this study suggest that project types preferred by males require more programming construct reflected in the Computational Thinking score than that of females. Because gender differences appear by project type, project type presumably influences the gender gap in scores."
Gender Differences in Computational Thinking Skills among Malaysian’s Primary School Students using Visual Programming,"Abdullah, Osmanullrazi and Kamaludin, Adzhar and Rahman, Nur Shamsiah Abdul",2021,Sin Valor
Generative AI-Enabled Conversational Interaction to Support Self-Directed Learning Experiences in Transversal Computational Thinking,"Ouaazki, Abdessalam and Bergram, Kristoffer and Farah, Juan Carlos and Gillet, Denis and Holzer, Adrian",2024,"As computational thinking (CT) becomes increasingly acknowledged as an important skill in education, self-directed learning (SDL) emerges as a key strategy for developing this capability. The advent of generative AI (GenAI) conversational agents has disrupted the landscape of SDL. However, many questions still arise about several user experience aspects of these agents. This paper focuses on two of these questions: personalization and long-term support. As such, the first part of this study explores the effectiveness of personalizing GenAI through prompt-tuning using a CT-based prompt for solving programming challenges. The second part focuses on identifying the strengths and weaknesses of a GenAI model in a semester-long programming project. Our findings indicate that while prompt-tuning could hinder ease of use and perceived learning assistance, it might lead to higher learning outcomes. Results from a thematic analysis also indicate that GenAI is useful for programming and debugging, but it presents challenges such as over-reliance and diminishing utility over time."
Geo computation with open-source software under Linux: Hands-on training for computational thinking and skills,"Amatulli, Giuseppe and Sethi, Tushar",2019,Sin Valor
"Geo-Computational Thinking in the Third Grade: Making Computational Thinking Truly ""For Everyone, Everywhere""","Hammond, Thomas C. and Oltman, Julia and Manfra, Meghan M.",2019,"The concept of computational thinking originated in the computer science community and has therefore focused on concepts and terminology drawn from that discipline. However, to make computational thinking an integrated, accessible concept within other parts of the K-12 curriculum, the concepts and terminology must be adapted to fit the new curricular context. We focus on elementary social studies, specifically a third grade geography lesson on absolute location using a teaching strategy of a scaffolded geocache. We present a selection of computational thinking elements, adapt them to social studies, and then organize them into a four-part heuristic: Data, Patterns, Rules, and Questions. Through this selection, adaptation, and sequencing, computational thinking can become a relevant and accessible integrated concept within the elementary social studies curriculum."
GeoEd'19: Proceedings of the 1st ACM SIGSPATIAL International Workshop on Geo-computational Thinking in Education,Sin Valor,2019,Sin Valor
Getting Everyone the IT Education They Need,"Guzdial, Mark",2021,"The inventors of the term ""computer science"" meant for it to be something that was taught to everyone, to facilitate learning other subjects, and to help people understand the risks of technology in their lives. Alan Perlis (with Newell and Simon) published the first definition of ""computer science"" in Science in 1967 [6]. In 1961, he argued at MIT that everyone at the academia should learn to program, to give them a new way to understand their world [10]. At the same event, C.P. Snow (author of The Two Cultures [11]) argued that we should teach everyone about computing so that they would understand the dangers in our new computerized society [12]. He wrote: ""A handful of people, having no relation to the will of society, having no communication with the rest of society, will be taking decisions in secret which are going to affect our lives in the deepest sense.""The world today relies on information technology but, we mostly teach IT to people who will become professionals. This leaves us with only a privileged class that understands a critical part of our world. If we want to reach the original and more general goal, we will have to change how we teach about computing. With my students and collaborators, I have been identifying the barriers to giving everyone an understanding of the computing technology in their world.We have explored how socioeconomic status influences success in computing [9], and how increasing access to high school computing courses has not led to a commensurate increase in the number or diversity fo students taking those courses [7, 8]. We have been studying why students reject computer science [1], and how to invent new forms of computing education that meet the needs of students who have not succeeded in traditional computing courses [2]. In our most recent work, we ask questions like ""What are fundamental ideas of computing that everyone needs to reason about and use the computational technologies in their world?"" and ""How can we re-design computation to make it more approachable, accessible, and adoptable?"" [3-5]"
GK-12 DISSECT: Incorporating computational thinking with K-12 science without computer access,"Folk, R. and Lee, G. and Michalenko, A. and Peel, A. and Pontelli, E.",2015,Sin Valor
GLOSSARY,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Grammar Instruction with UML,"Rottenhofer, Marina and Rankin, Thomas and Sabitzer, Barbara",2020,Sin Valor
Graph Tasks in Bebras Contest: What does it have to do with gender?,"Budinsk\'{a}, Lucia and Mayerov\'{a}, Karol\'{\i}na",2017,"Bebras contest has been part of Slovak informatics in schools for 10 years, making contestants familiar with information technologies, computer science concepts and improving their digital skills and computational thinking. In this article we take a look at task group which connects computer science concepts with computational thinking - graph tasks (for example trees, graphs, square grids, graph algorithms...). We focused on the three lowest categories of the Slovak contest, which include pupils of the whole primary school (aged 8 to 15) and analysed the tasks of the last four years. We used both qualitative and quantitative data analysis research methods. Task were divided into subcategories which were further analysed, focusing on identification of the specifics of the tasks in which there were significant differences between boys and girls. Using comparative analysis, it was found that boys are better in tasks with simple (relatively abstract) representation of the structure which is described by a larger amount of text, but the main point of the task is to identify the problem and create or uncover a strategy for finding a solution. Girls' performance is better in tasks that have less text, relatively more complicated representation of the structure and are focused on simple operations at graphs or reading them."
Graphics programming in elm develops math knowledge &amp; social cohesion,"Zhang, John and Verma, Anirudh and Sheth, Chinmay and Schankula, Christopher W. and Koehl, Stephanie and Kelly, Andrew and Irfan, Yumna and Anand, Christopher K.",2018,"At McMaster University, we have developed a framework for teaching computer science, including curricula and tools (iPad apps: Image 2 Bits and ElmJr; an open-source library GraphicSVG; and a web-based development environment). ElmJr is a projectional editor for Elm, with knowledge of our graphics library. Using ElmJr, children transform programs through contextual menus. As a result, they never see syntax or type errors. Children as young as 10 years old, who have just started learning about syntax in English, can be productive programmers. We will explain how ElmJr is designed to make programming simple for beginners, and how strong typing in Elm and our graphics library is key to making the list of program transformations manageable. We will explain the design and findings of a study of children in 14 classes (grade 4 and 5) in the Hamilton-Wentworth District School Board, who received 12 hours of instruction over eight weeks in ElmJr with the aim of improving their mathematics knowledge. In parallel, another eight grade 6 to 8 classes received at least two hours of instruction in Elm using our web-IDE, culminating in a Wordathon. The Wordathon is designed to reconcile the power of social computing with the need to protect children's privacy. The intermediate classes were challenged to create animations in Elm of assigned words identified by teachers as K-4 core reading vocabulary. Joining the intermediate students in this activity, two high school classes were taught how to create interactive applications in Elm and were challenged to create a reading game using the word animations created by the intermediate children. In all, four games incorporating 408 animations were created, and some of the intermediate students presented the games to primary grades in their schools. Unlike typical network effects, we get a multiplier effect: more word animations make game development more attractive, and more games make animations more attractive. Having a critical mass then attracts the attention of other educators, including in this case the team implementing the board-wide reading strategy. All of this can be accomplished without any identifying information leaving the classroom."
Grasping algorithms: exploring toys that teach computational thinking,"Root, Erika and Steinkamp, Maren and Coldewey, Beatrice and Poloczek, Christin and Scharnowski, Frederik and Kettner, Mark and Koelle, Marion and Ananthanarayan, Swamy and Willms, Marlon",2017,"Computational thinking has received increased attention over the past several years and is considered by many to be a fundamental and necessary literacy for children. One approach to teaching this skill has been through tangible programming since it facilitates intuitive interaction with children. In this paper, we introduce CodeTrain and CodeBox, two motorized toys whose behavior can be programmed through wooden building blocks without the use of a computer, tablet, or screen-based interface. The goal with both these designs is to foster playful exploration of computational thinking in pre-adolescent children through tangible objects. We describe the design process from the conceptual design to the functional prototype. Furthermore, we present first impressions of the prototypes from a pilot study and highlight some lessons learned from our first iteration."
Grounding Computational Thinking Skill Acquisition Through Contextualized Instruction,"Nickerson, Hilarie and Brand, Catharine and Repenning, Alexander",2015,"Computational thinking (CT) involves a broadly applicable and complex set of processes that are often explained by way of the knowledge, attitudes, and general practices that they entail. However, to become facile with CT, learners require instruction that is grounded in concrete, relevant experiences. This paper examines teacher practices that are intended to promote CT skill acquisition through instruction that takes place in two framing contexts. The phenomenological context, which is based on observable patterns of object interaction that recur in games and simulations, is particularly valuable for developing the capacity to think abstractly. Abstraction is the key to recognizing analogous conditions, an ability that is the basis for transferring learning to new situations. The disciplinary context describes areas of application within and across subject areas, including computer science, that can foster proficiency with data representation, problem decomposition, and other CT skills. Using the Scalable Game Design curriculum as a lens to examine classroom practices, we find that teachers both plan and enact CT instruction in these contexts."
Growth Mindset in Computational Thinking Teaching and Teacher Training,"Lodi, Michael",2017,"Teacher training in computational thinking is becoming more and more important, as many countries are introducing it at all K-12 school levels. Introductory programming courses are known to be difficult and some studies suggest they foster a fixed-mindset views of intelligence, reinforcing the idea that only some people have the so called ""geek gene"". This is particularly dangerous if thought by future school teachers. Interventions to stimulate ""CS growth mindset"" in students and their teachers are fundamental and worth CS education research."
Guiding Students to Discover CS Concepts and Develop Process Skills Using POGIL --- Conference Workshop,"Glebova, Olga and Al-Faris, Ali and Vielleux, Nanette",2024,"There has been growing interest across CS education for evidence-based instructional strategies that improve learning and retention. Process Oriented Guided Inquiry Learning (POGIL) is one such strategy with a proven history across STEM disciplines. The CS POGIL community has grown rapidly over the past decade thanks to NSF support of multiple grants of educational research in Computer Science using this strategy; hundreds of CS teachers and professors have attended POGIL workshops to learn more about using and developing POGIL materials. A survey of CS POGIL practitioners found that instructors believe their students learn more, are more engaged and active, and develop better communication skills in POGIL classrooms [1]. The survey also found that obstacles include limited time, a lack of relevant materials, pressure to cover content, difficulty adapting teaching style, and resistance from students. Workshops like this one can help practitioners to answer these questions and to adopt POGIL more effectively and efficiently. This workshop is based on materials developed and used extensively by The POGIL Project (http://pogil.org)."
HCAI Block Model: A competence model for Human Centred Artificial Intelligence at K-12,"Conway, Brian and Nolan, Keith and Quille, Keith",2024,"Artificial Intelligence (AI) is becoming a common topic within the computing K-12 curricula worldwide. While much of the focus of research is on the use of Generative AI in and for education, AI as a core subject area is still gaining popularity, with much of this research focusing on content and tools that effectively support the teaching of AI. However, as we grow as a field, there is a need currently unmet to provide foundations (in the form of a block model as there exists for programming) to allow researchers to build strong pedagogies and methodologies from, and even a base to design activities and content. Compounding this, as ethics and its relationship to AI in the K-12 classroom grows stronger, there is a further need to provide scaffolding to educators and researchers not only on traditional AI concepts, but also on how they link with ethical knowledge, skills and dispositions. In this paper, the Human Centered Artificial Intelligence (HCAI) Block Model is developed and introduced. This is a competence-based model to guide effective teaching and learning of Human Centered Artificial Intelligence, as well as research in the K-12 space. The HCAI Block model’s foundation is developed/adapted from the programming Block model and has been adapted and developed using two lenses. The first was through the data science lens through interaction with Computational Thinking 2.0 and competency-based learning. The second lens was through a human-centred lens. The outcome was a ground-up K-12 model where traditional and technical AI concepts have been developed from the start, integrating ethical considerations and human-centred approaches."
HCDA: from computational thinking to a generalized thinking paradigm,"Liu, Yuhang and Sun, Xian-He and Wang, Yang and Bao, Yungang",2021,"As a new era in computing emerges, so too must our fundamental thinking patterns."
Helping Novice Programmers to Bootstrap in the Cloud: Incorporating Support for Computational Thinking into the Game Design Process,"Ahmadi, Navid and Jazayeri, Mehdi and Landoni, Monica",2012,Sin Valor
Historical High School Computer Science Curriculum and Current K-12 Initiatives,"Floyd, Steven Paul",2019,"It's an exciting time in computer science education on the K-12 landscape. Educational jurisdictions around the world are incorporating computer science concepts, as well as related computational thinking components, into their mandatory, K-12 curriculum. As we develop and implement curriculum initiatives with an eye on the future and the 21st century learner and citizen, what wisdom can we gleam from the past? In Ontario, Canada computer science education dates back to 1966 with the release of the Ministry of Education's Data Processing course that included a number of computer science and computer programming concepts and ideas. The document also frames computer education within the context of an emerging field and highlights the importance of students developing appropriate computer skills in order to thrive in the labor market and society. While we often consider computer science curriculum initiatives in K-12 education nascent, are important historical policy and initiatives being overlooked? This lightning talk shares preliminary findings from an analysis of five historical computer science curriculum documents. Grounded theory was used to discover emergent themes and concepts apparent in historical documents including ethical computing, the role of technology in society, and the cross-curricular nature of computer science skills. These preliminary findings inform the discussion surrounding the use of historical curriculum to establish best practice in existing curriculum and policy development."
Holistic Assessment of Computational Thinking for Undergraduate: Reliability and Convergent Validity,"Sondakh, Debby E. and Osman, Kamisah and Zainudin, Suhaila",2020,"This paper reports a pilot test to a scale called 'Holistic Assessment of Computational Thinking (Hi-ACT. Hi-ACT is seven-point Likert type scale comprises 155 items, resulting form a consensus study completed earlier, which aimed at measure undergraduate students computational thinking skill. The questionnaire was piloted among fourth-year undergraduate students recruited from five faculties in two universities (N=548) in Indonesia. Structural equation modeling with partial least squares technique was followed to establish the factor structure of the scale. The internal consistency reliability was assessed using composite reliability. The convergent validity was evaluated based on two criteria, the outer loadings and the average variance extracted. Accordingly, 44 items that did not load properly on a particular construct were excluded, and the refined scale has confirmed its reliability and validity to the acceptable requirements."
Hot Spots and Trends of Computational Thinking Research in China CiteSpace visualization and analysis based on CNKI data,"Wang, Yiwei and Xu, Liancheng",2023,Sin Valor
How a Research-Practice Partnership Refined its Strategy for Integrating CS/CT into K-5 Curricula: An Experience Report,"Adrion, W. Richards and Bevan, Katie and Foster, Paul and Matuszczak, Denise and Miller, Rachel and Rita, Laura and Sullivan, Florence R. and Veeragoudar, Sneha and Wohlers, Scott and Zeitz, Melissa",2022,"Massachusetts defined K-12 Digital Literacy/Computer Science (DLCS) standards in 2016 and developed a 5-12 teacher licensure process, expecting K-4 teachers to be capable of teaching to the standards under their elementary license. An NSF CSforAll planning grant led to the establishment of an NSF 4-year Research-Practice Partnership (RPP) of district and school administrators, teachers, university researchers, and external evaluators in 2018. The RPP focused on the 33 K-5 serving schools to engage all students in integrated CS/CT teaching and learning and to create a cadre of skilled and confident elementary classroom teachers ready to support their students in learning CS/CT concepts and practices. The pandemic exacerbated barriers and inequities across the district, which serves over 25,000 diverse students (9.7% white/non-Hispanic, 83.7% high needs). Having observed a lack of awareness and expertise among many K-5 teachers for implementing CS/CT content and practices and seeing barriers to equitable CS/CT teaching and learning, the RPP designed an iterative, teacher-led, co-design of curriculum supported by equity-focused and embedded professional learning. This experience report describes how we refined our strategies for curriculum development and diffusion, professional learning, and importantly, our commitment to addressing diversity, equity, and inclusion beyond just reaching all students. The RPP broadened its focus on understanding race and equity to empower students to understand how technology affects their identities and to equip them to critically participate in the creation and use of technology."
How are Elementary Students Demonstrating Understanding of Decomposition within Elementary Mathematics?,"Israel, Maya and Li, Jiehan and Yan, Wei and Elagha, Noor A. and Huggins-Manley, Corinne A. and Luo, Feiya and Franklin, Diana",2023,"Decomposition is a foundational computational thinking construct that is often introduced early as students are learning computer science in the elementary grades. Although decomposition is often described in early computational activities, little research exists about how to teach and assess students’ understanding of decomposition. In this mixed-methods research study, 173 third-grade students from eight elementary school classrooms in the Midwest were taught eight lessons that integrated decomposition as well as other computational thinking practices into their mathematics instruction. They completed a computational thinking assessment after the first four lessons and again after the second four lessons. Analyses included the distribution of correct decomposition item responses, confirmatory factor analysis, and item-level error analysis. Results indicate wide variability in students’ performance on the decomposition assessment items as well as in performance on items contextualized within mathematics. This study highlights the need for additional considerations about assessing computational understanding, implications for assessment within integrated contexts, and the use of paper-and-pencil tests compared to embedded assessments."
How Can We Teach Computational Literacy to All Levels of Students?,"Kim, SooHwan and Han, SeonKwan and Kim, HyeonCheol",2009,Sin Valor
How character customization affects learning in computational thinking,"Lin, Lorraine and Parmar, Dhaval and Babu, Sabarish V. and Leonard, Alison E. and Daily, Shaundra B. and J\""{o}rg, Sophie",2017,"The ability to select or customize characters in educational applications and games has been shown to influence factors related to learning effects such as transfer, self-efficacy, and motivation. Most previous conclusions on the perception of virtual characters and the effect of character assignment in interactive applications have been reached through short, one-task experiments. To investigate more long-term effects of assigning versus customizing characters as well as explore perceptions of personal character appearance, we conduct a study in which sixth and seventh grade students are introduced to programming concepts with the software VEnvI (Virtual Environment Interactions) in seven one-hour sessions over two weeks. In VEnvI, students create performances for virtual characters by assembling blocks. With a between-subjects design, in which some of the students can alter their character and others are not given that possibility, we examine the influence of the presence or absence of character choice options on learning.We hypothesize that students have higher learning outcomes when they can choose and customize how their character looks compared to when they are assigned a character. We confirm this hypothesis for a category of learning (Remember and Understand) and give insights on students' relationships with their character."
How do Bebras Tasks Explore Algorithmic Thinking Skill in a Computational Thinking Contest?,"Oliveira, Ana Liz Souto and Andrade, Wilkerson L. and Guerrero, Dalton D. Serey and Melo, Monilly Ramos Araujo",2021,Sin Valor
How Do We Do CS on Top of Everything Else? A Coaching Cycle Approach in Elementary School,"Pozos, Rose K. and Denner, Jill and Asamoto, Erin and Green, Emily and Severance, Samuel",2021,Sin Valor
How is Computational Thinking Defined in Elementary Science?,"Pietros, Jennifer and Sweetman, Sara and Shim, Minsuk",2022,"Computational thinking (CT) is a foundational skill of computer science that all elementary students should have equitable access to for learning and engaging in throughout their day. For the integration of CT into science instruction to be successful, teachers need to be able to communicate clearly what CT is and how it is defined through precise language. The intention of this poster is to explore the meaning of CT at the elementary level through a critical review of literature, analysis of standards, value-mapping across multiple stakeholders, analysis of written responses from elementary teachers on a CT survey, and deep discussions of a Design-Based Implementation Research Team (DBIR). The data collected and analyzed from these sources was combined to develop a definition of CT that would support implementation of CT for elementary teachers."
How Many Abilities Can We Measure in Computational Thinking? A Study on Bebras Challenge,"Araujo, Ana Liz Souto O. and Andrade, Wilkerson L. and Guerrero, Dalton D. Serey and Melo, Monilly Ramos Araujo",2019,"While several approaches have been proposed to assess computational thinking (CT) abilities, it is still unclear how many and which these abilities are. Despite the undisputed importance of assessment, the fact is that there is not enough evidence on which abilities are merely theoretical and which can be empirically observed in the context of CT. This paper is part of a larger investigation in which we try to answer a simple question: can CT abilities be quantitatively defined and measured? In this particular study, we try to answer a simple question: How many CT abilities can be empirically observed using factor analysis? We approach this question, using a dataset containing answers of 1564 students from Lithuania in the Bebras Challenge from 2015. Firstly, we used confirmatory factor analysis to verify a theory that claims that five CT abilities are assessed by the contest. Our analysis shows the theory is not statistically supported. Secondly, we used principal component analysis as an exploratory analysis to try to derive an appropriate number of factors from the data. Surprisingly, the analysis suggests there are only two main recognizable factors. Finally, we briefly discuss these factors and hypothesize that the first is called evaluation ability, which would include abstraction, generalization, and decomposition, while factor 2 is algorithmic thinking and logical reasoning."
How presentation affects the difficulty of computational thinking tasks: an IRT analysis,"Lonati, Violetta and Monga, Mattia and Malchiodi, Dario and Morpurgo, Anna",2017,"This paper discusses how a few changes in some computational thinking tasks proposed during the Bebras challenge affected the solvers' performance. After the 2016 challenge held in November in our country (Italy), we interviewed some participants on the difficulties they had faced and we modified some of the tasks accordingly. We then proposed the whole set of tasks, with some of them modified, to pupils who had not participated to the challenge in November and compared performances in the two sessions. Using Item Response Theory, we measured the change in the distribution of difficulty and discrimination of the modified tasks. On the basis of the obtained results, we tried to better understand the many factors which influenced the difference in performances, both in the conceptual and cognitive task content and in its presentation (text, images, layout)."
How software works: Computational thinking and ethics before CS1,"Scott, Andrew and Barlowe, Scott",2016,Sin Valor
How Student Background and Topic Impact the Doer Effect in Computational Thinking MOOCs,"Maiyuran, Jitesh and Bajwa, Ayesha and Bell, Ana and Hemberg, Erik and O’Reilly, Una-May",2019,Sin Valor
HyperCubes: A Playful Introduction to Computational Thinking in Augmented Reality,"Fuste, Anna and Schmandt, Chris",2019,"We present HyperCubes, an Augmented Reality (AR) platform to foster computational literacy. Using paper cubes as AR markers and spatial tracking, the user becomes familiar with sequences of instructions as coding blocks. We leverage spatial cognition as a means to improve understanding of procedural and sequential models. We have performed two pilot studies for an iterative and user centered design of the platform. With a final qualitative user study we address engagement levels and the educational potential of the platform. We argue that by using spatial cognition and the flexibility of the AR medium, a playful introduction to basic computational thinking concepts can be presented in late elementary school and middle school children."
I Felt Like We Were Actually Going Somewhere: Adapting Summer Professional Development for Elementary Teachers to a Virtual Experience During COVID-19,"Skuratowicz, Eva and Vanderberg, Maggie and Hung, Eping E. and Krause, Gladys and Bradley, Dominique and Wilson, Joseph P.",2021,"In fall 2019, the National Science Foundation awarded Southern Oregon University a two-year Computer Science for All Researcher Practitioner Partnership grant focused on integrating computational thinking (CT) into the K'5 instruction of general elementary and elementary bilingual teachers. This experience report highlights the process of transitioning one essential component of the project an elementary teacher summer institute (SI) from in-person to online due to COVID-19. This report covers the approach the team took to designing the SI to work virtually, the challenges encountered, the experiences of the 15 teachers involved through observations and surveys, and the opportunities for refinement. This report will be of potential interest for other computer science (CS) education researchers who also may be working with elementary teachers to incorporate CS and CT activities into their instruction."
I'm Drowning in Squirrels! How Children Embody and Debug Computational Algorithms Through Designing Mixed Reality Games,"Litts, Breanne K. and Chauhan, Apoorva and Mortensen, Chase K. and Matthias, Kamaehu",2019,"As mobile technologies become more ubiquitous, design work at the intersection of mixed reality and embodied learning is growing. While much of this work focuses on designing technologies and environments for children, we contribute a unique perspective of children as designers of these technologies. In this paper, we explore how children embody and debug computational algorithms through designing their own mixed reality games. We conducted two afterschool workshops with 19 middle school aged children (3 girls, 16 boys, ages 10-13) during which participants designed mobile, location-based games with mixed reality technologies about local plants and animals. Findings reveal how participants across workshops embody a key game mechanic (digitally spawning characters in the real world) by engaging in an iterative digital-to-physical-to-digital debugging process that led to their understanding of the underlying computational algorithm. We further present design considerations for authoring platforms that allow children to design with mixed reality, place-based technologies."
Identifying Learning Trajectories in Self-Directed Programming,"Milgram, Aaron and Jain, Shruti and Ichinco, Michelle",2019,"Many children begin to learn to code in a self-directed context, such as by creating an animation, game or phone app. Recent research has begun to investigate and evaluate the results of this process: children's projects. However, little is known about the different trajectories novices have during the long-term process of self-directed programming learning. Our aim is to identify the existing types of trajectories and be able to determine a specific child's trajectory. If that trajectory does not lead to significant progress or continued motivation, we might be able to nudge them toward a different trajectory.We hypothesized that there may be several main types of trajectories. To explore this, we clustered children's programming progression in order to identify trends. We used a data set of Scratch programs for its large sample size and diverse population [1,3]. We used Dr. Scratch's scoring of computational thinking skills as our initial feature set [2]. Our clustering analysis identified two main groups of users. The first group, 55.8% of users, generally progressed upward over time in their computational thinking skill score. The second group, 44.2% of users, showed little to no improvement over time.These preliminary results raise many questions about these two high-level groupings of trajectories of computational thinking skill demonstration in Scratch projects. In the future we want to further explore the trajectory clusters and what they could mean for supporting self-directed learning of programming."
Identifying Preliminary Design Principles for a Robotics-based Learning Environment,"Tengler, Karin and Kastner-Hauler, Oliver and Sabitzer, Barbara",2021,Sin Valor
Identifying Secondary School Students' Misconceptions about Machine Learning: An Interview Study,"Marx, Erik and Witt, Clemens and Leonhardt, Thiemo",2024,"Since students are familiar with machine learning (ML)-based applications in their everyday lives, they already construct mental models of how these systems work. This can result in misconceptions that influence the learning of correct ML concepts. Therefore, this study investigates the misconceptions students hold about the functionality of ML-based applications. To this end, we conducted semi-structured interviews with five students, focusing on their understanding of facial recognition and ChatGPT. The interviews were analyzed using an inductively developed code system and qualitative content analysis. This process identified six key misconceptions held by students: “Programmed Behavior,” “Exactness,” “Data Storage,” “Continuous Learning,” “User-trained Model,” and “Autonomous Data Acquisition”. These misconceptions include the notion that AI learns continuously during application, or that training data is saved and reused later. This paper presents the identified misconceptions and discusses their implication for the design and evaluation of effective learning activities in the context of ML."
Identifying the Computing Education Needs of Liberal Arts and Sciences Students (Discussion Paper),"Guzdial, Mark and Evrard, August",2024,"As a field, computing’s deepest roots lie in liberal arts domains such as philosophy and linguistics. As new technologies rapidly expanded the field, the computer science curricula emerged. The current undergraduate areas of study, including computer science and software engineering, focus on preparing students for careers in the computing industry or academia. The “born digital” students of a modern liberal arts institution need a different, less technology-heavy, form of computing education to support their careers as future scientists, artists, or humanists. At our large, research-focused, US university, the College of Literature, Science, and the Arts (LSA) charged a task force with defining the computing education needs for their students, chaired by the authors. We describe our process, findings and outcomes here with the aim of offering a reference template to faculty at universities that have experienced a similar growth to prominence of computer science in the undergraduate curriculum. The task force identified emergent themes of discovery, expression, and justice that we using to establish a new program, the Program for Computing in the Arts and Sciences (PCAS). Our themes and process may help other liberal arts and sciences programs organize the computing education needs in support of all their undergraduate students."
Impact and Achievements of School Workshops as a University Outreach Activity in Computer Science,"Landman, Martina",2023,"With an ever increasing number of computing initiatives trying to engage and motivate children of all ages, we need to ask ourselves what these initiatives achieve and deliver. We therefore intend to investigate whether participation in a workshop setting changes students' approaches to solving selected computational thinking problems and extends their repertoire of problem-solving strategies. Methods used will include video analysis to collect data on the solutions and strategies, and a design-based research approach to create an effective task design for the workshop activities given to the students."
Impact of Computational Thinking in Engineering and K12 Education,"Rana, Deepak Singh and Dimri, Sushil Chandra and Malik, Preeti and Dhondiyal, Shiv Ashish",2022,Sin Valor
Impact of Hint Content on Performance and Learning: A Study with Primary School Children in a Scratch Course,"Greifenstein, Luisa and Brune, Markus and Fuchs, Tobias and Heuer, Ute and Fraser, Gordon",2023,"The implementation of computational thinking concepts in primary school curricula usually includes programming activities. As primary school teachers often lack subject knowledge, they may struggle to help students during these programming activities. Additional support can be provided by automated program analysis, for example in terms of hints on conceptual knowledge related to bad coding patterns observed, or procedural hints on how to solve the task at hand. However, care has to be taken since these hints need to balance (1) helping students to perform a specific task successfully, while nevertheless (2) ensuring a learning effect beyond the specific task. To understand the effects of different types of hints we therefore conducted a study with 36 children aged 7–12 in 10 programming courses. After being introduced to basic programming structures in three units, the children were tasked to debug six Scratch programs using different types of hints, where we observed that procedural hints have the strongest impact on performance. In order to examine an impact on the transfer of learned knowledge, we observed the children’s difficulties during the successive fifth unit, in which they created their own projects. The results of the fifth unit show that having received a procedural hint on a specific pattern during the fourth unit leads to slightly fewer bad related code patterns but also to slightly fewer good code patterns. Considering these results together with the subjective perceptions of the children, we can derive insights into how to best support performance and learning using (automated) feedback."
Impact of Programming Exposure on the Development of Computational Thinking Capabilities: An Empirical Study,"Cachero, Cristina and Barra, Pilar and Meliá, Santiago and López, Otoniel",2020,Sin Valor
Impact of Teaching Approaches to Computational Thinking on High School Students: A Systematic Mapping,"Ribeiro Silva, Laíza and Pedro da Silva, Alan and Toda, Armando and Isotani, Seiji",2018,Sin Valor
Implementation and Outcomes of a Three-Pronged Approach to Professional Development for CS Principles,"Mouza, Chrystalla and Pollock, Lori and Pusecker, Kathleen and Guidry, Kevin and Yeh, Ching-Yi and Atlas, James and Harvey, Terry",2016,"One of the greatest challenges in broadening participation in computer science is teacher preparation, as few middle and high school teachers have a formal background in computing. Further, without a credentialing program, there are limited ways to learn content and pedagogical strategies for effective computer science instruction. As a result, professional development is key to successful reform in the teaching of computer science. In this paper, we describe our three-pronged approach to the design of a professional development model for middle and high school teachers interested in implementing the Computer Science Principles (CSP) curriculum in their classrooms or infusing CSP modules into STEM curricula. We describe our model focusing on content, pedagogical strategies and follow-up classroom support during the academic year. We subsequently report on participating teacher outcomes, in terms of self-rated understandings, attitudes and implementation practices. We share lessons learned and offer recommendations for professional development designers."
Implementation of Unplugged Teaching Activities to Foster Computational Thinking Skills in Primary School from a Gender Perspective,"Torres-Torres, Yucnary-Daitiana and Rom\'{a}n-Gonz\'{a}lez, Marcos and P\'{e}rez-Gonz\'{a}lez, Juan-Carlos",2019,"The participation of girls and women is fundamental in solving problems that the society demands. Currently, the figures indicate a deficit of female presence in the STEM context, which implies the loss of the talent of the female collective. The school, as the transforming axis of society, must generate actions that motivate, involve and generate commitment in girls and women, enhancing their engagement in the STEM context. This paper shows two unplugged activities taken from a serial of activities implemented with elementary students and families in a digital cultural center in Madrid-Spain. The implementation is based on general objectives such as 1. To introduce and motivate interest since an early age in computer programming, 2. To develop gender dynamics that educate on gender equity to strengthen female empowerment in the STEM area. Performing the example in the roles of female gender in science, as well as transforming stereotypes with the purpose of motivate girls and adult women, without excluding the male group. The activities also seek to train Computational Thinking skills, to introduce basic computer programming concepts as well as showing that unplugged activities are important in teaching computer programming, and integrate women into the STEM area, as an important tool to reduce gender gaps. Based on our informal observations, some results were: involvement of the female collective in the construction of codes, improvement in the dynamics of gender equity in each activity and that the girls created more complex codes than males."
Implementing a new Computer Science Curriculum for middle school in Israel,"Bargury, Iris Zur and Haberman, Bruria and Cohen, Avi and Muller, Orna and Zohar, Doron and Levy, Dalit and Hotoveli, Reuven",2012,Sin Valor
Improvement of Computational Thinking skills through unplugged activities in Upper Secondary Education,"Benavides-Escola, Christian Andr\'{e}s and Mart\'{\i}n-Barroso, Estefan\'{\i}a and Zapata-C\'{a}ceres, Mar\'{\i}a and Rom\'{a}n-Gonz\'{a}lez, Marcos",2024,"The adoption of Computational Thinking (CT) in the educational worldwide curricula is progressively gaining importance from various perspectives. One particular approach, known as unplugged, does not require electronic devices and offers notable benefits as it is replicable and adaptable. Moreover, it serves to dismantle the misconception that computer science is exclusively confined to the digital realm. While both plugged and unplugged methodologies are recognized, further exploration of the unplugged approach is required, especially in Upper Secondary Education, where there is less evidence of its effectiveness. This paper presents a summary of a quasi-experimental study conducted with 11th grade students (approximately 16 years old) in a Spanish public high school. 57 students participated: 28 in the control group and 29 in the experimental group. The conducted research, based on a quantitative and experimental design, aimed to investigate the effectiveness of unplugged activities to improve CT abilities in Upper Secondary Education. The results indicated improved skills in the experimental group, suggesting the potential efficacy of unplugged methods in fostering CT abilities."
Improving Assessment of Computational Thinking Through a Comprehensive Framework,"Basso, Demis and Fronza, Ilenia and Colombi, Alessandro and Pahl, Claus",2018,"In recent years, Computational Thinking (CT) made its way into K-12 as a key set of 21st-century skills. However, the issue of assessing student's learning of CT remains a challenging one: it is indeed not clear how to achieve a comprehensive evaluation that is able to assess not only the technical and domain-specific skills, but also the domain-independent meta-skills of CT. Finding a solution to this issue is crucial, because assessment not only determines whether or not educational goals are being met, but also supports the design of a curriculum. Multiple forms of assessments have been proposed within the main perspective of programming skills, neglecting the possible generalization of CT training on other skills. In this work, we first review the existing approaches to CT assessment. Then, we discuss what non-technical skills (relational skills and cognitive life-skills) should be included in a comprehensive CT assessment framework. Moreover, we provide an indication of possible solutions to capitalize on the existing experiences in order to achieve a feasible integration of different types of assessment."
Improving Coding Workshops: A Pattern Collection,"Bertels, Anja and Deimel, Dominik",2024,"Coding Workshops present a valuable educational tool in programming education, but often struggle with sustaining participant engagement over time. Without proper structure and practical application, these workshops can result in shallow learning, making it difficult for participants to apply their skills in real-world situations. To fill the existing gap in academic research, this paper presents a structured set of patterns aimed at enhancing the effectiveness of coding workshops. The presented patterns, derived from hands-on experiences within the ”Coding Culture in Oberberg” research project, address various stages of a workshop. Though initially designed for young learners aged 11-13, the patterns are adaptable across different age groups. This collection serves as a guide for educators and workshop facilitators looking to create more interactive, practical, and engaging coding experiences."
Improving Computational Thinking Competencies in STEM Higher Education,"Dehbozorgi, Nasrin and Roopaei, Mehdi",2024,Sin Valor
Improving Computational Thinking Using Follow and Give Instructions,"Figueiredo, Jos\'{e} and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2017,"Computational Thinking can be defined as a set of skills for problem solving based on Computer Science. Computational Thinking skills are not only limited to the field of computing but also extensible to all areas of knowledge. Young people grow up surrounded by technology but many of them go for university without any prior knowledge in computer science. Several initiatives have been created to promote Computational Thinking abilities in students all over the world. Teaching computational thinking must necessarily involve problem-solving, and can be applied to various types of problems that do not directly involve coding tasks. However, it is recognized to everyone that programming is a good way to improve Computational Thinking. In this article, we have done a survey on the existing tools that use the codification as main means of development of the abilities of computational thinking or not. It was also a concern to mention those that provide a wide variety of resources for teachers. This paper is an attempt to demonstrate the importance of computational thinking in the first beginning of learning programming, and what activities best contribute to increase the abilities of each computer engineering student in computational thinking according to the characteristics of those who attend the Polytechnic of Guarda, Portugal. Most of our students have never had the opportunity to learn computational thinking."
Improving Computational Thinking with Spatial Skills Development in Primary School,"Parkinson, Jack",2023,"Spatial skills frequently correlate with many measures of computing success, and indeed with wider STEM achievement. Spatial skills training has also been shown to improve computing outcomes at multiple institutions of higher education with first-year university students. However, there is a good chance that even though we can improve the spatial skills of undergraduate students to help them succeed at computing, many students will have already opted-out of computing learning pathways in school due to poor spatial skills. Using a spatialised maths curriculum, we intend to improve the spatial skills of primary school children aged 8–9 and investigate the effect on their computational thinking. With this poster, we would like to share our work so that others can consider deploying similar programmes, and to hear feedback from the CS education community on what other aspects and factors we should consider."
Improving Computer Science Instruction and Computer Use for African American Secondary School Students: A Focus Group Exploration of Computer Science Identity of African American Teachers,"Hampton, Lelia and Cummings, Robert and Gosha, Kinnis",2019,"As the demand for computing careers increases, it is important to implement strategies to broaden the participation in computer science for African Americans. Computer science courses and academic pathways are not always offered in secondary schools. Many teachers are not trained in computer science, yet are pushed to incorporate more computing, computational thinking, and computer usage. A qualitative focus group study was implemented to assess the computer science identities of African American teachers and of their respective urban secondary schools serving African American students. Three major codes were identified: district administration of computer and computing implementation, teacher attitudes towards computer science instruction, and teachers' recommendations to improve computer science and computational thinking instruction and outreach for African American secondary school students. Findings can be used to improve computer science and technology rollout programs from county and district administrations, teacher instruction with digital tools, and computer science outreach for African American secondary school students."
Improving CS Performance by Developing Spatial Skills,"Parkinson, Jack and Margulieux, Lauren",2024,A dive into the research linking development of spatial skills with improved outcomes at all levels of CS education.
Improving learning of computational thinking using computational creativity exercises in a college CSI computer science course for engineers,"Shell, Duane F. and Hazley, Melissa Patterson and Soh, Leen-Kiat and Dee Miller, L. and Chiriacescu, Vlad and Ingraham, Elizabeth",2014,Sin Valor
Improving learning of computational thinking using creative thinking exercises in CS-1 computer science courses,"Miller, L. Dee and Soh, Leen-Kiat and Chiriacescu, Vlad and Ingraham, Elizabeth and Shell, Duane F. and Ramsay, Stephen and Hazley, Melissa Patterson",2013,Sin Valor
Improving Long Term Performance Using Visualized Scope Tracing: A 10-Year Study,"Gupta, Ankur and Rybarczyk, Ryan",2023,"Code tracing (or program sketching) is a useful technique for both students and professionals to understand syntactic and semantic details of code. Emphasizing and exploring this skill leads students to a deep understanding of their code in the short term and ultimately, their evolution into competent programmers in the future. In this paper, we provide evidence that a careful incorporation of the concept of scoping into code tracing techniques is fundamental to achieving this successful student transition. To this end, we present a formalized pencil-and-paper code tracing strategy for CS1 called Visualized Scope Tracing (VST), with scoping as a key underlying theme that elegantly addresses code blocks, function stacks, recursive structures, pass-by-reference, arrays, pointers, and parallel code.Furthermore, we study the impact of our code tracing approach on CS1 students at a small liberal arts institution over a 10-year period. The goals of this work are twofold: describe how to easily (and naturally) integrate VST into any CS1 curricula; second, show demonstrable improvements on student learning using our technique. Our findings suggest that VST has a positive, long-lasting impact on their academic performance in CS2."
Improving Students' Learning and Achievement in CS Classrooms through Computational Creativity Exercises that Integrate Computational and Creative Thinking,"Shell, Duane F. and Soh, Leen-Kiat and Flanigan, Abraham E. and Peteranetz, Markeya S. and Ingraham, Elizabeth",2017,"Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear ""dosage effect"" of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed."
Improving Students' Mathematical Computational Thinking Using Scratch Program through Project Based Learning: A Development Research during Pandemic Covid-19,"Hadi, Mega Ekka and Nur Atiqoh, Khamida Siti and Kadir",2021,Sin Valor
Improving teacher use of educational robotics to teach computer science in K-5 mathematics,"Kopcha, Theodore J. and Wilson, Cheryl Y. and Yang, Dayae",2022,"This paper reports on a professional development (PD) effort in which 12 elementary teachers (K-5) in a rural, under-resourced school were equipped with the skills needed to integrate computer science activity into the regular math curriculum. Over the course of a year, the teachers engaged in a week-long summer workshop and monthly follow-up training with in-classroom support as they integrated educational robots into their math curriculum. Surveys, tests, and teacher lesson plans were analyzed to better understand how the PD contributed to teacher's knowledge and skills. Wilcoxon Signed-Rank tests indicated that teacher rankings on their attitudes towards and planning practices with educational robots were statistically significantly higher at the end of the PD. The improvement was further reflected in the quality of their lesson plans. Implications for preparing teachers to use educational robots to teach computer science in elementary mathematics are discussed."
Improving the Students Computational Thinking Skills With Collaborative Learning Techniques,"Echeverría, Leovy and Cobos, Ruth and Morales, Mario",2019,Sin Valor
In Pursuit of CS-based Educational Content Suitable for Broader Audiences,"Winter, Victor and Diaz-Kelsey, Judith Monarrez",2020,"The important role that technology will play in the future requires that IT literacy, IT fluency, and interest in IT careers, in particular, increase significantly in the near future. This study investigates relationships between a variety of student attributes (e.g., general educational interests, classroom behavior, and gender) and engagement with a set of introductory CS-based educational activities. The goal of the study is to gain a better understanding of how to design CS-based educational content that appeals to broader student populations. Among other findings, the study revealed (unsurprisingly) that interest in math played a significant role in the level of engagement for males having STEM-related interests, while interest in reading played a significant role in the level of engagement for females having non-STEM related interests. The most significant finding of the study was that females having non-STEM related interests engaged more extensively than all other student populations."
In the Black Mirror: Youth Investigations into Artificial Intelligence,"Lee, Clifford H. and Gobir, Nimah and Gurn, Alex and Soep, Elisabeth",2022,"Over the past two decades, innovations powered by artificial intelligence (AI) have extended into nearly all facets of human experience. Our ethnographic research suggests that while young people sense they can't “trust” AI, many are not sure how it works or how much control they have over its growing role in their lives. In this study, we attempt to answer the following questions: (1) What can we learn about young people's understanding of AI when they produce media with and about it? and (2) What are the design features of an ethics-centered pedagogy that promotes STEM engagement via AI? To answer these questions, we co-developed and documented three projects at YR Media, a national network of youth journalists and artists who create multimedia for public distribution. Participants are predominantly youth of color and those contending with economic and other barriers to full participation in STEM fields. Findings showed that by creating a learning ecology that centered the cultures and experiences of its learners while leveraging familiar tools for critical analysis, youth deepened their understanding of AI. Our study also showed that providing opportunities for youth to produce ethics-centered interactive stories interrogating invisibilized AI functionalities, and to release those stories to the public, empowered them to creatively express their understandings and apprehensions about AI."
Including Neurodiversity in Foundational and Applied Computational Thinking (INFACT),"Asbell-Clarke, Jodi and Robillard, Tara and Edwards, Teon and Bardar, Erin and Weintrop, David and Grover, Shuchi and Israel, Maya",2022,"INFACT aims to provide differentiable teaching and learning activities in Computational Thinking (CT) that are inclusive for neurodiverse learners in grades 3-8. Neurodiversity refers to learners with autism, ADHD, dyslexia, and other related cognitive differences. Underlying many neurodiverse conditions is differences with executive function (EF). In previous research on game-based learning, neurodiverse students became class leaders in CT activities [1]. Special education teachers noted that CT practices align with strategies they use to support problem-solving practices. Leveraging these affordances of CT, INFACT activities are designed with embedded EF scaffolds to support neurodiverse learners."
Inclusive Computational Thinking in Public Schools: A Case Study from Lisbon,"Pires, Ana Cristina and Rocha, Filipa and Guerreiro, Tiago and Nicolau, Hugo",2024,Sin Valor
Incorporating Computational Thinking in the Classrooms of Puerto Rico: How a MOOC Served as an Outreach and Recruitment Tool for Computer Science Education,"Ord\'{o}\~{n}ez Franco, Patricia and Carroll-Miranda, Joseph and L\'{o}pez Delgado, Mar\'{\i}a and Gerena L\'{o}pez, Eliud and Rodr\'{\i}guez G\'{o}mez, Grace",2018,"This paper intends to share both the experience of teachers and document the research of the design, implementation, and evaluation of a massive open online course (MOOC). The primary purpose of the MOOC was to do outreach and build community to interest teachers from any discipline in Puerto Rico to incorporate Computational Thinking (CT) into their curriculum and peak their interest in Computer Science Education (CSE). Additional objectives were to use CT as a way to build self-efficacy in high school teachers as integrators of this newly gained knowledge while investigators learned the state of CSE and technology integration in schools of Puerto Rico. The MOOC titled Integrating Computational Thinking into the Curriculum was the first free online Professional Development offered to educators in Puerto Rico and has served as the launching board for the Computer Science Teachers' Association (CSTA) in Puerto Rico. This paper will describe the course's development, content and pertinent activities as they relate to the established goals of the project. Finally, it will share some vignettes of the educators' experiences as well as the results of a survey that was administered to 164 participants of the MOOC in its second rendition and had a 32% response rate."
Increase of confidence for the solution of problems in preuniversity students through Computational Thinking,"Rojas-L\'{o}pez, Arturo and Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e}",2018,"The paper describes the initial research on the integration of Computational Thinking, through the dissemination of skills and practice of exercises in a context of Gamification, within the framework of a pilot program called Apadrinamiento, aimed to students of high school who visit the facilities of the Universidad Tecnol\'{o}gica de Puebla, and that are considering studying in the Division of Information and Communication Technologies. The main objective is to increase the confidence of students in the solution of problems through the skills that exercise Computational Thinking. This report details the planning of the activities, the indicators to be measured and the scenarios where the interventions will be carried out that allow, in a second stage, the creation of strategies to avoid desertion. The main conclusion of the paper is to have created an academic strategy to benefit the understanding of pre-university students in the current computer world through the exercise of Computational Thinking."
Increasing Student Self-Efficacy in Computational Thinking via STEM Outreach Programs,"Feldhausen, Russell and Weese, Joshua Levi and Bean, Nathan H.",2018,"This paper describes our experiences developing and teaching two different interventions focused on computational thinking and computer science at a yearly STEM outreach program hosted by a local school district. We describe the creation of our lesson plans, how we worked with experienced and pre-service teachers alike to deliver the lessons, and how we assessed the effectiveness of each intervention. We will discuss our successes and failures, and provide information on our future plans to incorporate more formalized education theory, pedagogy, and research methodology in future years to further this project. Based on our assessment results, we observed statistically significant gains in student self-efficacy with creating computer programs that perform a variety of operations. In addition, students reported a significantly higher understanding of how computer programming can be used in daily life. Our survey also highlighted differences in student self-efficacy between the two interventions, and we discuss possible sources for that result. We discuss observed results based on student groups with various backgrounds, previous STEM experiences, and socioeconomic status."
Increasing Understanding of Students' Programming Process through Scratch Programming Event Data Analysis,"Kong, Minji",2020,"Computational thinking (CT) is a problem solving approach that is becoming prominent in educational settings. To help ease students into the world of programming, visual programming tools such as Scratch are used. Researchers are also developing various tools in an attempt to assess students' proficiency in thought processes that make up CT. However, current existing tools mainly utilize students' final code products when evaluating their demonstration of CT, losing their opportunity to understand students' actual learning and programming procedures. This work presents a logging methodology that records programming actions of students in the Scratch block coding environment to enable an in-depth analysis of students' programming process. With this logging methodology, we conducted a case study with introductory programmers to study how the logs of students' programming processes can provide insight into how they practice CT during programming."
Index,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Inequalities in Computational Thinking Among Incoming Students in an STEM Chilean University,"González-Pizarro, Felipe and López, Claudia and Vásquez, Andrea and Castro, Carlos",2024,Sin Valor
Influence of Gender on Computational Thinking,"Espino, Elisenda Eva Espino and Gonz\'{a}lez, Carina Soledad Gonz\'{a}lez",2015,"This study aims to analyze the influence of computational thinking in relation to gender, as it is important to know the reasons why today the presence of women in careers in computer engineering is becoming increasingly scarce. This article presents an analysis of the skills and strategies that are related to computational thinking that took place in the national competition of educational robotics FLL (First Lego League). It was made a qualitative, selective and correlational study stratified random probability sampling. The results confirmed that there is a bigger presence of men than women and a clear gender differentiation. However, according to the information processing and learning, prevails the equality."
Influence of Programming Robot Learning Mode Based on Conceptual Mapping on College Students' Computational Thinking,"Chen, Bing-Hong and Chen, Ling-Hsiu and Chen, Chih-Cheng and Chen, Chih-Hung",2021,Sin Valor
Informal Technology Education for Women Transitioning from Incarceration,"Seo, Hyunjin and Altschwager, Darcey and Choi, Baek-young and Song, Sejun and Britton, Hannah and Ramaswamy, Megha and Schuster, Bernard and Ault, Marilyn and Ayinala, Kaushik and Zaman, Rafida and Tihen, Ben and Yenugu, Lohitha",2021,"As society increasingly relies on digital technologies in many different aspects, those who lack relevant access and skills are lagging increasingly behind. Among the underserved groups disproportionately affected by the digital divide are women who are transitioning from incarceration and seeking to reenter the workforce outside the carceral system (women-in-transition). Women-in-transition rarely have been exposed to sound technology education, as they have generally been isolated from the digital environment while in incarceration. Furthermore, while women have become the fastest-growing segment of the incarcerated population in the United States in recent decades, prison education and reentry programs are still not well adjusted for them. Most programs are mainly designed for the dominant male population. Consequently, women-in-transition face significant post-incarceration challenges in accessing and using relevant digital technologies and thus have added difficulties in entering or reentering the workforce. Against this backdrop, our multi-disciplinary research team has conducted empirical research as part of technology education offered to women-in-transition in the Midwest. In this article, we report results from our interviews with 75 women-in-transition in the Midwest that were conducted to develop a tailored technology education program for the women. More than half of the participants in our study are women of color and face precarious housing and financial situations. Then, we discuss principles that we adopted in developing our education program for the marginalized women and participants’ feedback on the program. Our team launched in-person sessions with women-in-reentry at public libraries in February 2020 and had to move the sessions online in March due to COVID-19. Our research-informed educational program is designed primarily to support the women in enhancing their knowledge and comfort with technology and nurturing computational thinking. Our study shows that low self-efficacy and mental health challenges, as well as lack of resources for technology access and use, are some of the major issues that need to be addressed in supporting technology learning among women-in-transition. This research offers scholarly and practical implications for computing education for women-in-transition and other marginalized populations."
Informatics concepts for primary education: preparing children for computational thinking,"Sabitzer, Barbara and Antonitsch, Peter K. and Pasterk, Stefan",2014,"In Austria Informatics is not taught in primary schools, but the curriculum includes some issues in several subjects that are related to computational thinking. Teachers are not aware that they already teach and use informatics concepts in their daily lessons. Informatics didactics experts and teacher trainers have to inform them and reveal connections between their primary school contents and different informatics concepts. Furthermore, one general educational aim of the curriculum is the acquisition of elementary cultural techniques including a child-friendly approach to modern information and communication technologies (ICT). The aim of this paper is to show how this is possible in practice and lists informatics concepts already ""hidden"" in the primary school curriculum. It reports on different initiatives that aim at introducing informatics in primary schools as well as a sample project on computational thinking funded by the regional teacher support program Teaching Informatics creatively. The qualitative results of this and other primary school projects show that it is possible and worth integrating informatics already at this early stage."
Information Encoding in Computer Science Education Using the Cup Song,"Buttke, Heike and Krugel, Johannes",2024,Sin Valor
Information Encoding Modeling in Computer Science Education,"Buttke, Heike and Krugel, Johannes",2024,"Modeling is a major component of Computer Science (CS) education implemented in K-12. We propose Information Encoding Modeling (IEM) to facilitate the development of modeling competencies, emphasizing semiotic competence and the creative representation of complex information. This research situates IEM within the context of existing modeling techniques, evaluates its application through various examples, and proposes an Encoding Diagram as a key representational tool. We present the potential integration of IEM into CS education to enhance students’ understanding of information encoding and Computational Thinking principles."
Infusing Computational Thinking Across Disciplines: Reflections &amp; Lessons Learned,"Pollock, Lori and Mouza, Chrystalla and Guidry, Kevin R. and Pusecker, Kathleen",2019,"In this work, we describe our effort to develop, pilot, and evaluate a model for infusing computational thinking into undergraduate curricula across a variety of disciplines using multiple methods that previously have been individually tried and tested, including: (1) multiple pathways of computational thinking, (2) faculty professional development, (3) undergraduate peer mentors, and (4) formative assessment. We present pilot instantiations of computational thinking integration in three different disciplines including sociology, mathematics and music. We also present our professional development approach, which is based on faculty support rather than a co-teaching model. Further, we discuss formative assessment during the pilot implementation, including data focusing on undergraduate students' understanding and dispositions towards computational thinking. Finally, we reflect on what worked, what did not work and why, and identify lessons learned. Our work is relevant to higher education institutions across the nation interested in preparing students who can utilize computational principles to address discipline-specific problems."
Infusing Computational Thinking into a Computer Science Gateway Course,"Benkarroum, Younes and Azhar, Mohammad Q.",2024,"Computational thinking (CT) stands as a universal problem-solving approach applicable across diverse disciplines, transcending the domain of computer science. It embodies the mental process of structuring a problem to enable a computational solution feasible for both humans and machines. This methodology involves dissecting problems into smaller parts that are easier to understand and solve. This study delineates a meticulously designed series of CT activities within an introductory computer science course and explores their profound impact on student engagement and problem-solving proficiency. Our findings underscore the pivotal role of hands-on CT practice in augmenting students' ability to decompose problems, recognize patterns, and abstract complexities, and employ algorithms effectively. Notably, this infusion of CT not only cultivates theoretical understanding but also bridges the gap between conceptual knowledge and real-world application through the use of computational tools like Python programming. As CT continues to emerge as a cornerstone skill in diverse domains, this research presents compelling evidence advocating for its integration into introductory courses, laying a robust foundation for students to navigate the evolving technological landscape with enhanced problem-solving capabilities."
Infusing computational thinking into middle grade science classrooms: lessons learned,"Catet\'{e}, Veronica and Lytle, Nicholas and Dong, Yihuan and Boulden, Danielle and Akram, Bita and Houchins, Jennifer and Barnes, Tiffany and Wiebe, Eric and Lester, James and Mott, Bradford and Boyer, Kristy",2018,"There is a growing need to present all students with an opportunity to learn computer science and computational thinking (CT) skills during their primary and secondary education. Traditionally, these opportunities are available outside of the core curriculum as stand-alone courses often taken by those with preparatory privilege. Researchers have identified the need to integrate CT into core classes to provide equitable access to these critical skills. We have worked in a research-practice partnership with two magnet middle schools focused on digital sciences to develop and implement computational thinking into life sciences classes. In this report, we present initial lessons learned while conducting our design-based implementation research on integrating computational thinking into middle school science classes. These case studies suggest that several factors including teacher engagement, teacher attitudes, student prior experience with CS/CT, and curriculum design can all impact student engagement in integrated science-CT lessons."
Infusing Computational Thinking into the Accounting Curriculum - Framework and Perspectives,"Wu, Tao and Chang, Maiga",2021,Sin Valor
Infusing computational thinking into the middle- and high-school curriculum,"Settle, Amber and Franke, Baker and Hansen, Ruth and Spaltro, Frances and Jurisson, Cynthia and Rennert-May, Colin and Wildeman, Brian",2012,"In recent years there have been significant efforts to revamp undergraduate and K-12 curricula to emphasize computational thinking, a term popularized by Jeannette Wing in 2006. We describe work introducing and enhancing computational thinking activities and assessments in the middle- and high-school curriculum at the University of Chicago Lab Schools. In total six courses were altered as a part of the Computational Thinking across the Curriculum Project: middle-school and high-school computer science, and high-school Latin, graphic arts, English, and history. We detail the modifications to the curriculum and discuss the successes and challenges of the project."
Infusing Computing: Analyzing Teacher Programming Products in K-12 Computational Thinking Professional Development,"Dong, Yihuan and Catet\'{e}, Veronica and Lytle, Nicholas and Isvik, Amy and Barnes, Tiffany and Jocius, Robin and Albert, Jennifer and Joshi, Deepti and Robinson, Richard and Andrews, Ashley",2019,"In summer 2018, we conducted two week-long professional development workshops for 116 middle and high school teachers interested in infusing computational thinking (CT) into their classrooms. Teachers learned to program in Snap!, connect CT to their disciplines, and create infused CT learning segments for their classes. This paper investigates the extent to which teachers were able to successfully infuse CT skills of pattern recognition, abstraction, decomposition, and algorithms into their learning products.In this work, we analyzed 58 teacher-designed programming products to look for common characteristics, such as project type, intended coding requirements for their students, and code features/functionality. Teacher-created products were classified into five types: animation, interactive story, quiz, intended game, and simulation/exploration tools. Coding requirements varied from using and/or explaining provided code, modifying existing code, programming with starter code, to building entire programs. Products were classified according to the extent to which they involved sprite manipulation, questions/answers, event handling, drawing, and control blocks. We found that teachers from different disciplines created products that vary in type, coding requirements, and features to suit their specific needs. Moreover, we found relationships between discipline, project type, and the required coding teachers expected students to do.Our results inform future Infusing Computing Professional Development (PD) to provide more targeted training to support different teacher needs."
Initial experience with a computational thinking course for computer science students,"Kafura, Dennis and Tatar, Deborah",2011,"Experience with the first offering of a computational thinking course for computer science (CT4CS) students is reported. The course is grounded in student interaction with fundamental, recurring concepts suggested by comparison with two sets of computer science principles. By using specialized, freely available tools and physical simulations it is possible to provide concrete, tangible learning experiences that neither require knowledge of nor the overhead of programming. Student end-of-term reflections indicate that the course deepened and broadened their understanding of computer science even when they had previously encountered a topic, and improved their computer science vocabulary."
Initial learning scenarios based on the computational thinking evaluation for the course Programming fundamentals at INACAP,"Rojas-L\'{o}pez, Arturo and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2019,"The paper's objective is present the design and the planning of initial learning scenarios for the course Programming Fundamentals, from the evaluation of computational thinking to new students of the careers Computer engineering and Programmer analyst of the Technological University of Chile and Training Center Technical respectively at INACAP, to favor the motivation and autonomy of study through the recognition of skills and the use of the instructional design of the face-to-face course. The proposal is based on correspondence with three of five change trends that integrated the educational model. Regarding the Knowledge society, promote recognition of the individuality of the student as a person who will do university studies, that is, the scenarios respond to the fact that each person learns differently. In the Training of competences, contribute with preventive actions that the teacher communicates when there is a lack of specific skills. Finally, in the Flexibility and articulation, provide a diagnostic tool that favors the recognition of previous competences to have an articulated beginning of studies based on the needs of the student. Consequently, contribute to the INACAP's educational model."
Initial Learning Trajectories for K-12 Quantum Computing,"Franklin, Diana and Palmer, Jennifer and Landsberg, Randall and Marckwordt, Jasmine and Muller, Alexandria and Singhal, Kartik and Salac, Jean and Harlow, Danielle",2020,"As quantum computation (QC) comes closer to reality, questions arise as to what elements to teach, how to teach it, and to what depth. QC instruction typically depends heavily on advanced math and/or physics. Our interdisciplinary science / computer science / education team co-created quantum computing (QC) learning trajectories (LT), zines, and activities, for young learners. We present the LT's (Superposition, Quantum State, Entanglement, Measurement, and Reversibility) and the iterative process that created them."
Initial performance analysis in the evaluation of computational thinking from a gender perspective in higher education,"Rojas L\'{o}pez, Arturo and Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e}",2021,"The computational thinking evaluation in last five years (2016-2020) has allowed to stablish a diagnosis for new students of Information Technologies division at the Universidad Tecnol\'{o}gica de Puebla – Mexico. The immediate benefit has been the offer of learning scenarios for the programming methodology course that impacts the retention indicator. Women and men have benefited from this strategy, but no review of the results had been conducted to determine whether there is any difference in evaluation performance from a gender perspective. As in other countries, in Mexico there is an accentuated percentage difference in terms of men´s election for higher education studies in areas of science, technology, engineering and mathematics. This article sets out the data analysis when evaluating five skills associated with the concept of computational thinking, this means, decomposition, abstraction, generalization, algorithmic design and evaluation. The conclusion of the analysis states that there is no significant gender difference in the results of evaluation. Women and men who enter to study the first semester have similar conditions and opportunities for learning the contents and consequently acquire the respective competencies."
Injecting computational thinking into career explorations for middle school girls,"Webb, Heidi C.",2011,Sin Valor
Innovative Approach to Enhancing STEM Skills through Educational Games: Work in Progress,"Dlab, Martina Holenko and Crnković, Bojan and Traunkar, Ivona and Crnković, Vedrana Mikulić",2024,Sin Valor
Inquiry-Based Python Programming at Secondary Schools,"Guniš, J. and Šnajder, L. and Tkáčová, Z. and Gunišová, V.",2020,Sin Valor
Inspiring Computational Thinking: A Science Fair Activity,"Daniels, Mats and Pears, Arnold and Nylén, Aletta",2021,Sin Valor
Instilling Computational Thinking in Undergraduate Students Across Multiple Disciplines through an Adaptive Gamified e-Learning Platform,"Ng, Andrew Keong and Atmosukarto, Indriyati and Lee Teo, Julia Kwok and Amran, Ashraaf Bin",2023,Sin Valor
Instructional Procedure and Strategy of Primary School Programming Education Focusing on Cultivating Computational Thinking,"Lin, Zeshan and Ke, Meimei",2020,Sin Valor
Integrate social simulation content with game designing curriculum to foster computational thinking,"Chang, Chih-Kai",2011,Sin Valor
Integrated STEM+C learning for K-2 aged children: CT competencies as a precursor to K-2 computer science education,"Dandridge, Tikyna M. and Ehsan, Hoda and Gajdzik, Elizabeth and Lowe, Tony and Ohland, Carson and Yeter, Ibrahim H. and Brophy, Sean and Cardella, Monica E.",2019,"As computer science education is incorporated into the United States educational system, it is imperative that children, educators, and caregivers understand the requisite competencies called ""computational thinking"" (CT). CT has advanced since first described by Wing in 2006 as an algorithmic problem-solving approach. For three years, the INSPIRE Research Institute for Pre-College Engineering (INSPIRE) has studied integrated science, technology, engineering, mathematics, and computational thinking (STEM+C) learning for K-2 aged children, in both formal and informal settings. At the project's origin, the team focused on characterizing and operationalizing the CT competencies. Our studies then followed how children, instructors, and families engaged in the CT competencies within school and out-of-school. As the project evolved, our team created curricula to be used in K-2 classrooms, activities for out-of-school settings, a summer training for educators, a CT exhibit at a small Midwestern science center, and facilitated a field trip for elementary students. Our poster presents findings from all stages of our NSF-funded STEM+C project. For classroom settings, we report discoveries from integrated STEM+C curricula development and children's CT capabilities and engagement within the classroom and during homeschooling. For informal settings, we report children's abilities to engage in CT when engaging with a specially designed CT exhibit and an open-ended problem-solving task. We also discuss our data management for our project. Finally, we report the lessons and implications of CT for K-2 ask a viable skill for computer science education. For additional info ideas, handouts will be given during poster presentation."
Integrating &amp; Implementing K-12 Computing Pathways across Six School Districts-Challenges &amp; Opportunities,"Burke, Quinn and Coenraad, Merijke and Rangel, Alessandra and Dunbar, Kyle and Mills, Kelly",2024,"This SIGCSE poster presents a landscape study of six school districts across six different states in terms of their individual teachers' and administrators' capacity to integrate and implement computational thinking (CT) into their own schools and classrooms. This landscape evaluation represents the baseline start of a wider, four-year national study around district capacity to collaboratively develop consistent and comprehensive K-12 computing pathways for their students and schools. The early landscape work we present here not only represents a starting point for comparing district educators' comprehension of CT (and computer science [CS]), but also acts as an early indicator as to what extent K-12 computing is a school and district-based priority, and to what degree teachers feel they have the capacity to meaningfully implement it. This poster relies on two data sources in a mixed-methods design: Districtwide surveys of teachers and administrators on their familiarity and prioritization of CT, coupled with subsequent hour-long focus group discussions with educators to expand upon their respective district landscape survey responses. Results point to all districts perceiving the broad applicability of CT as a skill set and its integrative potential in a range of subjects. Yet in terms of classroom implementation, teachers find such CT integration decidedly less clear, recognizing it to be a priority but also reporting as less confident about creating their own curricular materials, where CT situates with their district's ongoing initiatives, and where they can find curricular resources and tools specific to their own areas of curricular integration."
Integrating Agent-based Modeling in STEM Classes: From Blocks to Text and Back?,"Bain, Connor and Anton, Gabriella",2019,"Agent-based modeling (ABM) is a form of computational modeling whereby a phenomenon is modeled in terms of agents and their interactions. By looking at scientific phenomenon using ABMs, students can learn to understand the micro interactions that are responsible for so many of the seemingly complex systems in the world around them. In addition, by integrating CT skills into science classrooms, we can simultaneously broaden participation in computing, provide a more authentic scientific experience for learners, and encourage deeper scientific content learning. In this hands-on workshop, we introduce participants to two parallel agent-based modeling environments: NetTango (Olson &amp; Horn, 2011), a blocks-based language, and NetLogo (Wilensky, 1999), a text-based language. The workshop will focus on contextualizing agent-based modeling activities within high school STEM classrooms, allowing participants to explore how computer science can be integrated into existing high school STEM curricula. Over the course of the workshop, participants will gain first-hand experience with ABM and how to design ABM activities in classrooms using NetTango and NetLogo. In addition, the workshop will feature open discussions in which participants will discuss the learning trajectories and affordances of the different programming modalities, brainstorm models that could be built for student exploration, and design activities that incorporate both scientific and computer science content for existing curricula."
Integrating computational and creative thinking to improve learning and performance in CS1,"Miller, L. D. and Soh, Leen-Kiat and Chiriacescu, Vlad and Ingraham, Elizabeth and Shell, Duane F. and Hazley, Melissa Patterson",2014,"Our research is based on an innovative approach that integrates computational thinking and creative thinking in CS1 to improve student learning performance. Referencing Epstein's Generativity Theory, we designed and deployed a suite of creative thinking exercises with linkages to concepts in computer science and computational thinking, with the premise that students can leverage their creative thinking skills to ""unlock"" their understanding of computational thinking. In this paper, we focus on our study on differential impacts of the exercises on different student populations. For all students there was a linear ""dosage effect"" where completion of each additional exercise increased retention of course content. The impacts on course grades, however, were more nuanced. CS majors had a consistent increase for each exercise, while non-majors benefited more from completing at least three exercises. It was also important for freshmen to complete all four exercises. We did find differences between women and men but cannot draw conclusions."
Integrating Computational Modeling in K-12 STEM Classrooms,"Biswas, Gautam and Hutchins, Nicole and L\'{e}deczi, \'{A}kos and Grover, Shuchi and Basu, Satabdi",2019,"C2STEM is a web-based learning environment founded on a novel paradigm that combines block-structured, visual programming with the concept of domain specific modeling languages (DSMLs) to promote the synergistic learning of discipline-specific and computational thinking (CT) concepts and practices. Our design-based, collaborative learning environment aims to provide students in K-12 classrooms with immersive experiences in CT through computational modeling in realistic scenarios (e.g., building models of scientific phenomena). The goal is to increase student engagement and include inclusive opportunities for developing key computational skills needed for the 21st century workforce. Research implementations that include a semester-long high school physics classroom study have demonstrated the effectiveness of our approach in supporting synergistic learning of STEM and CS/CT concepts and practices, especially when compared to a traditional classroom approach. This technology demonstration will showcase our CS+X (X = physics, marine biology, or earth science) learning environment and associated curricula. Participants can engage in our design process and learn how to develop curricular modules that cover STEM and CS/CT concepts and practices. Our work is supported by an NSF STEM+C grant and involves a multi-institutional team comprising Vanderbilt University, SRI International, Looking Glass Ventures, Stanford University, Salem State University, and ETR. More information, including example computational modeling tasks, can be found at C2STEM.org."
Integrating computational thinking across the K--8 curriculum,"Lee, Irene and Martin, Fred and Apone, Katie",2014,Sin Valor
Integrating Computational Thinking in Informal and Formal Science and Math Activities for Preschool Learners,"Grover, Shuchi and Dominguez, Ximena and Kamdar, Danae and Vahey, Phil and Moorthy, Savitha and Rafanan, Ken and Gracely, Sara",2019,"How do we integrate requisite thinking skills into children's earliest informal and formal learning experiences in order to prepare the next generation of problem solvers? This project examines how Computational Thinking (CT) skills align to the abilities and interests of young children and can be integrated with other STEM learning activities in order to promote school readiness. The goals of the project are to (1) build a knowledge base on how CT can be promoted in early childhood through integration with mathematics and science, (2) develop learning blueprints to guide the development of integrated classroom and family resources, and (3) develop and evaluate prototype activities to identify design principles useful to future development efforts integrating CT and STEM in early childhood. In this work, a multidisciplinary research team with expertise in CT, early science and mathematics, technology and media, and home and school learning partners with preschool educators and parents to co-design and pilot test prototype activities. Emerging prototypes presented integrate fundamental science and mathematics concepts and practices with CT skills such as problem decomposition, logical and algorithmic thinking, abstraction and debugging. They include hands-on activities with manipulatives familiar to young children and developmentally appropriate technology with unique affordances for complementing and reinforcing the learning that occurs during hands-on experiences. With a goal of addressing CS For All, the co-design, development and pilot testing of prototype activities aim to take into account the needs and strengths of preschool programs and families from low-income and culturally diverse communities."
Integrating Computational Thinking in math courses for 3rd and 4th Grade students with Learning disabilities via Scratch,"Liao, Chen-Huei and Hsu, Hui-Ju and Wu, Pei-Chen",2020,"This study investigates primarily the use of Computational Thinking in teaching mathematical concepts of Perimeter and Area. For those 3rd and 4th Grade students with learning disabilities, specifically, the extent to which their construction and understanding of mathematical concepts and their development of computational thinking are explored. For these reasons, the experimental research method is the one-group pretest-posttest design that we adopted which was conducted with 26 students, identified as learning disabilities by the committee for Identification and Placement of Gifted and Disabled Student. Data collected are analyzed with the Paired Sample t-test to comparison of these students in their learning outcomes and difference in aspects of construction of mathematical concepts and development of computational thinking after teaching. We find this teaching method enhances the learning outcomes and performance in the Math unit of Perimeter and Area and the performance of the development of computational thinking of these students after the intervention (160 minutes)."
Integrating computational thinking into english dialogue learning through graphical programming tool,"Weng, Xiaojing and Wong, Gary K. W.",2017,Sin Valor
Integrating computational thinking into K-12 teacher preparation: a collaborative partnership between the department of computer science and the college of education: panel discussion,"Flinn, Michael B. and McGee, Kristine and Barnes, Katelyn and Morton, Haylee",2021,"Computer science education is more important than ever. The COVID-19 pandemic has highlighted our society's reliance on computing and its power to help businesses innovate and adapt, yet at the same time has surfaced greater disparities for students studying computer science. Computing is the number one source of all new wages in our economy, and there are currently 400,000 open computing jobs across the United States. However, unequal access to computer science instruction and opportunities to engage in computational thinking and practices remain prevalent (Google &amp; Gallup, 2015). In the 2018-19 school year, only 15 percent of Maryland graduates took at least one computing related course, and there were significant gaps in the course taking patterns by gender and race (Maryland Center for Computing Education, 2021). To grow students' competencies with computational thinking and computer science, it is essential to build the capacity of teachers to integrate computational thinking competencies and standards into their practice. The Frostburg State University College of Education's Maryland Accelerates (MA) Program provides aspiring teachers the opportunity to earn an accelerated Master of Arts in Teaching (Elementary or Secondary track) degree along with an innovative yearlong teacher residency in partnership with Frederick and Garrett County Public Schools. One of the primary goals of the program is to integrate mathematical problem solving and computational thinking to promote scientific inquiry in partnering elementary and secondary schools. To this end, Frostburg State University has developed an exciting opportunity for Master of Arts in Teaching (MAT) students to earn a microcredential in Computational Thinking that is aligned to the ISTE Educator Standards, the High Leverage Practice Standards from TeachingWorks, and the Interstate Teacher Assessment and Support Consortium InTASC Model as part of their teacher preparation program. In this panel, faculty from the Computer Science Department and the College of Education at Frostburg State University will discuss their partnership to develop a microcredential for Computational Thinking for pre-service teachers, how and why the credential was developed, and what competencies aspiring teachers develop. Two recent graduates of the Maryland Accelerates MAT Teacher Residency program will discuss their experience using these skills and knowledge during their residency and how they plan to apply and integrate computational thinking into their practice as new teachers."
Integrating Computational Thinking Into the Curricula to Bridge the Skill Gap in Engineering Education,"Dehbozorgi, Nasrin and Nezafati, Maysam and Roopaei, Mehdi",2024,Sin Valor
Integrating Computational Thinking into the Process of Learning Artificial Intelligence,"Shih, Wen-Chung",2019,"In recent years, computational thinking has once again received attention widely. Computational thinking is generally considered to be the ability to be acquired. However, this study is to use computational thinking as part of the learning method. In order to explore the application of computational thinking in teaching, this study first collected the main review papers, as well as the literature on the assessment of computational thinking, and examined their views. Then, this study proposes a learning method that integrates computational thinking into experiential learning theory and applies it to learning artificial intelligence techniques."
Integrating Computational Thinking Skills in Secondary Education: a Feasibility Study,"Ghazali, Khadijah Wan Mohd and Osman, Mashanum and Othman, Zuraini and Omar, Masitah Seikh",2024,Sin Valor
Integrating Computational Thinking With the Curriculum of Future Professional Musicians,"Mandanici, Marcella and Spagnol, Simone",2024,Sin Valor
"Integrating Computational Thinking, Project-Based Learning, and Cultural Heritage for Rural Middle School Students","Dunbar, Kyle M. and Coenraad, Merijke and Iwatani, Emi",2025,"Based on work in an ongoing research-practice partnership, we share teacher-designed project-based learning (PBL) units that sought to integrate Appalachian heritage and CT. We offer reflections on the lessons learned in the design and implementation of PBL units in addition to making recommendations for future PBL units that integrate CT and cultural heritage. This work has implications for improving computing education in rural contexts and in PBL settings."
Integrating Computing and Computational Thinking into K-12 STEM Learning,"Grover, Shuchi and Fisler, Kathryn and Lee, Irene and Yadav, Aman",2020,"Policymakers believe that preparing all students from the earliest grades to high school for a new future of STEM+Computing (STEM+C) integration involves teaching them not only the science and math central to these areas, but also how computational thinking is integral to STEM disciplines. This panel brings together four researchers who focus on research and development of interdisciplinary approaches to the integration of computing within STEM teaching and learning for preK-12 students. They will share the most impactful, practical, and promising approaches to STEM+C integration, their pros and cons, challenges, and key insights to successful STEM+C integration at all grade levels."
Integrating Computing into K-16 Education: Scaffolding Teacher and Student Learning in STEM Disciplines,"Odden, Tor Ole and Yadav, Aman and Tellefsen, Cathrine Wahlstr\o{}m and Caeli, Elisa Nadire",2020,"The increasing role of computation in today's society requires us to go beyond computer science courses to integrating computational tools and practices within disciplinary contexts. However, we know little about what integration looks like in primary, secondary, and university classrooms. In this panel, we share perspectives on the importance of developing knowledge of computation in a digitized world and how it could be integrated within disciplinary context. In particular, we will discuss what embedding computation looks like at the elementary, secondary, and university level and how it can support disciplinary learning."
Integrating CT into economics: Simulating monetary policy through computer models in spreadsheets by using a Use-Modify-Create strategy,"De Bruin, Lucas and Nijenhuis-Voogt, Jacqueline and Yeni, Sabiha",2023,"Integrating computational thinking (CT) into the learning of school subjects is receiving increased attention. Developing students’ CT skills may not only advance their digital literacy but it may deepen subject specific learning as well. It is therefore interesting to investigate the learning of CT from a multidisciplinary perspective. This study describes the design of a CT integrated lesson for economics in which computer models in spreadsheets are used to simulate monetary policy. The lesson is structured according to the Use-Modify-Create strategy. The aim of this exploratory study is to evaluate the learning outcomes of this CT integrated lesson and students’ attitudes towards such a lesson. For this purpose, students’ exit tickets, feedback forms, supervisor observations and interviews with students have been analyzed. This qualitative analysis revealed that students perceived the lesson as difficult, especially during the Modify and Create phases. In addition, the results suggest that all phases are dependent on taking enough time to finish the Use phase to get familiar with the computational steps. Several suggestions have been given to improve the lesson, for instance, to use a simpler topic of economics. Furthermore, the analysis of students’ attitudes revealed that connections to CT could be made more explicit rather than implicitly embedded in the instructional strategy."
Integrating Making and Computational Thinking in Early Childhood Education: Preliminary Outcomes from a Teacher Trainer Workshop on Designing an Intervention,"Bahr, Tobias",2024,"In the context of educational equity and social participation in the modern technological world, future skills, including problem-solving, are increasingly important for children. Consequently, various projects have developed learning opportunities in Making and Computational Thinking to foster these skills in early childhood education (ECE). However, several literature reviews highlight a research gap concerning students' process-related competencies and the actual implementation of these learning opportunities by educators in kindergarten. In this context, an intervention that will be taught by kindergarten teachers was designed. This article reports on the design of an intervention incorporating Making and Computational Thinking for students aged 5 and 6, developed during a workshop with 12 experts in ECE, Making, and Computing Education."
Integration of computational thinking into English language arts,"Jacob, Sharin Rawhiya and Parker, Miranda C. and Warschauer, Mark",2022,"This paper describes the development and implementation of a yearlong integrated English Language Arts (ELA) and computational thinking (CT) curriculum that has been adapted to meet the needs of multilingual students. The integration of computational thinking into K-12 literacy instruction has only been examined in a handful of studies, and little is known about how such integration supports the development of CT for multilingual students. We conducted a qualitative case study on curricular implementation in a general education classroom with large numbers of students designated as English learners. Results from detailed field notes revealed that the strategic application of instructional practices was implemented in the service of building on students' existing literacy skills to teach CT concepts and dispositions. The CT and literacy framework put forth in this study can be used as an analytic framework to highlight how instructional strategies mobilize the existing literacy and CT resources of linguistically diverse students. Based on our findings, we discuss recommendations for future integrated ELA-CT curricula."
Integration of computational thinking skills in STEM-driven computer science education,"Burbaitė, Renata and Drąsutė, Vida and Štuikys, Vytautas",2018,Sin Valor
Intent and Extent: Computer Science Concepts and Practices in Integrated Computing,"Margulieux, Lauren E. and Liao, Yin-Chan and Anderson, Erin and Parker, Miranda C. and Calandra, Brendan D.",2024,"Integrated computing curricula combine learning objectives in computing with those in another discipline, like literacy, math, or science, to give all students experience with computing, typically before they must decide whether to take standalone CS courses. One goal of integrated computing curricula is to provide an accessible path to an introductory computing course by introducing computing concepts and practices in required courses. This study analyzed integrated computing curricula to determine which CS practices and concepts are taught, how extensively the curricula are taught, and, by extension, how they might prepare students for later computing courses. The authors conducted a content analysis to examine primary and lower secondary (i.e., K-8) curricula that are taught in non-CS classrooms, have explicit CS learning objectives (i.e., CS+X), and that took 5+ hours to complete. Lesson plans, descriptions, and resources were scored based on frameworks developed from the K-12 CS Framework, including programming concepts, non-programming CS concepts, and CS practices. The results found that curricula most extensively taught introductory concepts and practices, such as sequences, and rarely taught more advanced content, such as conditionals. Students who engage with most of these curricula would have no experience working with fundamental concepts, like variables, operators, data collection or storage, or abstraction in the context of a program. While this focus might be appropriate for integrated curricula, it has implications for the prior knowledge that students should be expected to have when starting standalone computing courses."
Interdisciplinary experiments in and perspectives on computational thinking,Sin Valor,2012,"This panel consists of faculty who jointly worked on a collaborative project connected to an NSF-sponsored interdisciplinary initiative called ""Piloting Pathways for Computational Thinking in the Curriculum."" Faculty at Towson University from Computer Science, English, Kinesiology, Music, and Sociology jointly formulated courses that involved applying and connecting ideas for analytic and creative purposes across fields. We respectively experimented with identifying concepts and with using these tools in our respective areas or fields; we also worked towards identifying what aspects or features of computational thinking might be generalized for broader educational purposes. The courses included ""Everyday Computational Thinking"" (Computer Science), ""Revolutionary Networks"" (Sociology), ""Creative Work with Audio and Visual"" (Music), ""Computational Thinking in the Humanities"" (English), and ""Developing Life Skills for Weight Management"" (Kinesiology). From the perspective of the humanities and music, much was learned by way of the limits of computation as an explanatory model for the expressive dimensions of our fields; that said, much was also learned about how the constraints it presented could enhance and generate new possibilities for analysis and creativity. The more quantitative-based disciplines likewise explored some applications of computational thinking for more dynamic approaches to problem-solving in everyday contexts and lives. The panel will include several faculty involved in the project who will share their experiences and learning outcomes in brief (approximately 10-minute ""flash"" presentations with lots of handouts), and we will invite audience inquiries about the challenges experienced in collaborating for such an interdisciplinary project and how what we learned will inform future goals and initiatives."
International Perspectives on CS Teacher Formation and Professional Development,"Maiorana, Francesco and Berry, Miles and Nelson, Mark and Lucarelli, Chery and Phillipps, Margot and Mishra, Shitanshu and Benassi, Andrea",2017,"Drawing on Mishra and Koehler's ""TPACK"" model [1], we recognize that great Computer Science (CS) teaching demands great pedagogy, great technology skills and great subject knowledge. The main challenge facing any jurisdiction in implementing a CS curriculum within schools is the shortage of new teachers being trained in CS and to meet the demand many countries have focused on professional development (PD) for existing teachers across a diverse range of subjects. Some initial PD efforts in CS were often brief, with little follow-on support, and supported through external grant funding. This created challenges and opportunities for teacher PD in CS. As the need for CS at the K-12 level continues to grow, approaches should be sustainable and scalable. This includes preparing teachers at all levels, pre k-12, while they are still learning to be teachers and some funding initiatives have included preservice teacher support as part of this [2]. Inside the European Union (EU) the Scientix project [3] represents a focus European Commission (EC) funded projects and is a repository for PD with resources for pedagogy, technology and subject knowledge. Besides this effort, spreading CS knowledge has been supported by volunteers led movements like CoderDojo. The panelists will discuss the following main topics: 1) Pre-service vs in-service, where do teachers come from? 2) Interdisciplinary ways of infusing CS. 3) Ways of replicating across countries CS teacher training initiatives aimed at sustaining and growing the number and quality of both in-service and pre-service teachers able to teach CS effectively. 4) Effective approaches to help teachers to build confidence in their ability to teach Computer Science (CS)"
Interpretation of computational thinking evaluation results for enrollment prediction,"Rojas-L\'{o}pez, Arturo and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2019,"During two generations (2016 and 2017) the computational thinking evaluation has been carried out in order to establish learning scenarios for new students, such interventions have been made in the Programming methodology course, it belonging to the career of Information Technology at the Technological University of Puebla in M\'{e}xico. The results have led a personalized education for students, recognizing previous skills as well as trying to correct those missing, so that it acquires the competences respective, credit the course and improve the retention percentage of the first quarter. In this sense, when detecting possible skill gaps, is it possible to predict what will be the impact to maintain or decrease enrollment during and the end of quarter? The present work aims to answer the question by the results interpretation obtained from the computational thinking evaluation to 242 new students, generation 2018. Initially, it was stablished which would be the student's situation during and the end of four months from September to December based on the correct assessment reagents; three categories were determined: 1. Sure desertion, 2. Safe permanence, 3. Variable permanence. Later, 50 students who enrolled the next quarter (January-April 2019) were revised if they had been predicted properly; using a survey, the familiarity of key concepts of the subject Programming methodology was obtained with the aim of determining a correspondence with the evaluation of computational thinking skills, as well as the established situation, consequently, establishing the validity of predicting the enrollment."
Intersectional Factors that Influence K-2 Students' Computer Science Learning,"Jacob, Sharin and Gillen, Benjamin and Ojeda-Ramirez, Santiago and Baek, Clare and Barrera, Carlos and Franklin, Diana and Warschauer, Mark",2024,"Understanding issues of intersectionality in education is vital for creating equitable learning environments. Intersectionality emphasizes the complexity of students' identities, including race, gender, and socioeconomic status, and how they interact to characterize their diverse group membership. Examining data intersectionality underscores students' heterogeneous needs, circumstances, and outcomes, advancing researchers' and policymakers' understanding of the types of interventions that ameliorate disparities for marginalized students. This study examines the intersectional factors influencing K-2 students' coding skills. We employ a hierarchical linear model on a validated pre-and-post coding assessment to examine a year-long Coding as Another Language curriculum for Latine, multilingual, and low-socioeconomic students. Findings indicated initial performance gaps for students with historically marginalized and intersecting backgrounds. After receiving the curriculum, these students demonstrated significant improvement, closing the coding skills gap with their more privileged peers. These findings underscore the importance of investigating and mitigating disparities in coding education for students with intersecting identities."
Interweaving Digital Literacy with Computational Thinking,"George-Reyes, Carlos Enrique and Rocha Estrada, Francisco Javier and Glasserman-Morales, Leonardo David",2021,"In the educational setting, consolidating computational thinking (CT) and digital literacy (DL) as two important skills for 21st- century professionals have become more important than ever. Nonetheless, scientific literature on both topics has rarely focused on developing frames of reference that offer incorporation of the interweaving of these skills. The objective of this document is to analyze and discuss the relationship between CT and DL in a framework where technology is used for education, with the end goal of designing a conceptual proposal that shows its common elements. The result is an initial proposal of interweaving that addresses skills such as abstraction (critical/cognitive-informational-communication), algorithm design (critical/cognitive-informational), and communication as common components, among others. We concluded that this proposal must be discussed, broadened, and considered as an initial reference framework for further analyses and delving into the topic."
Introducing Artificial Intelligence Fundamentals with LearningML: Artificial Intelligence made easy,"Rodr\'{\i}guez-Garc\'{\i}a, Juan David and Moreno-Le\'{o}n, Jes\'{u}s and Rom\'{a}n-Gonz\'{a}lez, Marcos and Robles, Gregorio",2021,"This paper is a summary of the webinar hold on October 22nd at the “Computational thinking and robotics in education” track in which the LearningML project was presented. The LearningML project aims to bring the fundamentals of Artificial Intelligence (AI) to children and people interested in acquiring knowledge on this subject in an easy way. AI has heavily irrupted in society and everyone is using, more or less consciously, application based on AI. Therefore, some kind of AI literacy is needed if we are to educate critically thinking citizens able to understand technologies that have a relevant impact on their lives. In this presentation we show how LearningML can help us to reach this goal trough programming applications based on Machine Learning (ML), the most prevalent subfield of AI today."
Introducing Coding through Tabletop Board Games and Their Digital Instantiations across Elementary Classrooms and School Libraries,"Lee, Victor R. and Poole, Frederick and Clarke-Midura, Jody and Recker, Mimi and Rasmussen, Melissa",2020,"This experience report describes an approach for helping elementary schools integrate computational thinking and coding by leveraging existing resources and infrastructure that do not rely on 1-1 computing. A particular focus is using the school library and media center as a site to complement and enhance classroom instruction on coding. Further, our approach builds upon ""unplugged"" knowledge and practices that are already familiar to and motivating for students, in this case tabletop board games. Through these games, students can use their prior knowledge and ease with tabletop gaming mechanics to cue relevant ideas for core computational concepts. We describe a model and an instructional unit spanning across classroom and school library settings that builds upon board game play as a source domain for computing knowledge. Building on expansive framing, the model emphasizes instructional linkages being made between one domain (the tabletop board game) and another (specially designed Scratch project shells with partially complete code blocks) such that the reasoning activities and different contexts are seen as instantiations of the same encompassing context. We present the experiences of three elementary school teachers as they implemented the unit in their classrooms and with their school librarian. We also show initial findings on the impact of the unit on student interest (N=87), as measured by pre- and post- surveys. We conclude with lessons learned about ways to improve the unit and future classroom implementations."
Introducing Computational Thinking and Computer Science Instruction to Preservice Science and Math Teachers,"Guo, Meize and Yun, Minji and Israel, Maya",2025,"Despite widespread recognition of the importance of computer science (CS) education and an increased focus on computational thinking (CT) instruction in the U.S., there remains a significant shortage of qualified K-12 CS teachers. Preparing preservice teachers to teach CS is essential for ensuring a sustainable future for CS education. This experience report presents a CT/CS module initiative designed to prepare secondary preservice science and math teachers to teach CT/CS through an instructional methods course that integrates instructional practice within an elementary after-school program. This initiative employs the preservice teacher preparation framework that includes the observe-practice-reflect cycle. Within this framework, the preservice teachers began with incorporating unplugged lessons and then transitioned to robotics to teach CT/CS concepts. In this experience report, we detail the design and implementation of this CT/CS module initiative and share findings that revealed the preservice teachers' increased confidence, adaptations in lesson planning, and the challenges faced in teaching CT/CS. These takeaways aim to inspire and inform other teacher educators and practitioners working to prepare the next generation of CS teachers."
Introducing Computational Thinking at Vocational High Schools,"Simmonds, Jocelyn and Diaz, Constanza and Estay, Carlos",2023,"The Technovation Girls program (TG) is an after-school program, where teams of female school students follow a software ideation process to address one of the UN's Sustainable Development goals. Concretely, they prototype a mobile application which they later pitch to judges. The TG curriculum gives students the tools they need to carry out this challenge, with activities focusing on entrepreneurship, product ideation and pitching, as well as coding. Previous evaluations of this program have focused on student and mentor perceptions and attitudes, collected through surveys, observation, focus groups and interviews. In this paper, we evaluate the effect that the coding part of the TG curriculum has on students' computational thinking skills, specifically in Chile, where the TG curriculum was expanded to a year to account for differences in the school curriculum. Also, in this experience, the TG program was carried out during class hours, and at both single- and mixed-gender vocational high schools. We applied an existing computational thinking test to the 2020 cohort (approx. 1000 students), before and after participating in the program, analyzing the results by school, gender and age. We found a slight improvement in test scores, with a more positive effect in male students."
Introducing Computational Thinking Concept Learning in Building Cognitive Capacity and Character for Elementary Student,"Yuliana, Irma and Octavia, Langga Putra and Sudarmilah, Endah and Matahari, Matahari",2019,Sin Valor
Introducing computational thinking in education courses,"Yadav, Aman and Zhou, Ninger and Mayfield, Chris and Hambrusch, Susanne and Korb, John T.",2011,"As computational thinking becomes a fundamental skill for the 21st century, K-12 teachers should be exposed to computing principles. This paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors. We summarize the results from open-ended and multiple-choice questionnaires given both before and after the module to assess the students' attitudes toward and understanding of computational thinking. The results suggest that given relevant information about computational thinking, education students' attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching."
Introducing Computational Thinking into Archival Science Education,"Underwood, William and Weintrop, David and Kurtz, Michael and Marciano, Richard",2018,Sin Valor
Introducing Computational Thinking through Non-Programming Science Activities,"Ouyang, Youwen and Hayden, Katherine L. and Remold, Julie",2018,"Many programs offer informal experiences in programming for select students who may qualify or whose parents pay fees for attending. Integrating computational thinking (CT) in the formal classroom setting provides equal opportunities to develop valuable problem-solving skills for all students. However, such integration poses challenges since teachers may have limited experiences in computing and may be pressured by time constraints due to the need to cover Common Core and Next Generation Science Standards (NGSS) as well as district specific initiatives. A 2-year intervention has been designed to target upper elementary level self-contained classrooms to increase teachers' knowledge and ability for integrating CT into science lessons. Twenty teachers from four school districts in Southern California participated in the first year of the project's professional development activities. These schools have varying levels of diversity and socioeconomic status of student populations. Instead of using popular drag-and-drop programming tools such as Scratch or Tynker, the first year of the project focused on key CT concepts and helped teachers connect these concepts with skills important for student success in science activities. This paper reports on the study of the project's impact on student learning of key CT concepts among students from project classrooms. The main elements of the professional development are also described."
Introducing computational thinking through stealth teaching,"Towhidnejad, M. and Kestler, C. and Jafer, S. and Nicholas, V.",2014,Sin Valor
Introducing computational thinking to 5 and 6 year old students in dutch primary schools: an educational design research study,"Koning, Josina I. and Faber, Hylke H. and Wierdsma, Menno D. M.",2017,"Computational thinking is taking an ever increasing role in education. According to the Netherlands institute for curriculum development there currently is little to no education on this topic in Dutch primary schools. Since teachers are the key to high quality education, it is important to know which knowledge primary school teachers should have on this topic. This exploratory research is part of a larger design-based study on how 5--6 year old students can develop CT skills at a basic level and what teachers in primary education need to know about computational thinking to teach it. This poster describes the educational design research consisting of a total of three rounds and the results after the first two rounds."
Introducing Computational Thinking to K-5 in a French Context,"Chiprianov, Vanea and Gallon, Laurent",2016,"Computational Thinking (CT) is beginning to be accepted as one of the fundamental 21st century skills for everyone. Curricula and environments are being developed for different group ages, from kindergarten to university, in several countries. As part of this global tendency, France has recently taken political decisions to integrate CT Education (CTE) in the mandatory national curriculum. However, many challenges remain until a full implementation is achieved. In this paper we report on a partnership between a university, local elementary schools and the county Ministry of Education (MoE), and on an exploratory project of introducing CT to K-5 students. This project has provided us with valuable feedback on the specifics of integrating CT in a national curriculum and the creation of a partnership and a community. These lessons will be used in the following stage of scaling up to more elementary schools in the entire county, but also addressing other school levels such as kindergarten, middle school and high school."
Introducing computational thinking to pre-service teachers,"Li, Jiang and Shockey, Paulette and Cuddapah, Jennifer and Graybeal, Christy and Torres-Crespo, Marisel and Williams, Anthony",2021,"This paper describes a collaborative project that was conducted to promote K-8 Computer Science Education among in-service and pre-service teachers. More than 40 pre-service and in-service teachers participated in a learning experience designed to address the K-12 Computer Science Framework [2] and Maryland's K-12 Computer Science Standards. The collaboration was designed to facilitate participants' learning about and application of foundational principles of computer science and computational thinking into K-8 STEM curriculum and teaching. Participants explored hard/software platforms and used open-source sites such as Scratch, Code.org and Code Academy. Participants envisioned how activities apply to K-8 classrooms and worked in pairs or groups to design a problem-based project for students. Project evaluation included formative and summative assessments to examine changes in content and pedagogical knowledge."
Introducing computational thinking to pre-service teachers,"Li, Jiang and Shockey, Paulette and Cuddapah, Jennifer and Graybeal, Christy and Williams, Anthony",2020,"Computational, logic thinking and problem-solving skills are extremely important for students' success in the future. This poster describes a collaborative project that was conducted to promote K-8 Computer Science Education among in-service and pre-service teachers. More than 40 pre-service and in-service teachers participated in a learning experience designed to address the K-12 Computer Science Framework and Maryland's K-12 Computer Science Standards. The collaboration was designed to facilitate participants' learning about and application of foundational principles of computer science and computational thinking into K-8 STEM curriculum and teaching. Participants explored hard/software platforms and used open source sites such as Scratch, Code.org and Code Academy. Participants envisioned how activities apply to K-8 classrooms and worked in pairs or groups to design a problem-based project for students. Project evaluation included formative and summative assessments to examine changes in content and pedagogical knowledge."
Introducing Computing and Technology through Problem-Solving in Discrete Mathematics,"S. Sinkovits, Robert and D. Soto, Osvaldo",2020,"Mathematics is usually taught using a traditional pencil-and-paper approach and frequently lacks real-world contextual referents, leading to a sense of alienation among secondary students and missed opportunities to advance students’ mathematical and computational thinking. In contrast, many real-world problems require mathematical solutions that are often of such a scale that they can only be solved using computational techniques, but require powerful ways of thinking that span the Common Core State Standards (CCSS) for Mathematical Practices (MP) and Computer Science Principles (CSP). We describe here our program that aims at advancing both MPs and CSPs through the introduction of technology and computing into the high school discrete mathematics curriculum. Our goal in the first two years of this new program is to reach a cohort of 40 teachers and 72 students. Using lessons learned from this pilot, we will consider how our program can be scaled up to reach a much larger audience."
Introducing Computing to Underserved Tribal Communities Through the Bebras Challenge,"Shah, Vipul and Agarwal, Smita",2023,"Tata Consultancy Services (TCS) in partnership with ACM India has been organizing the Bebras Challenge in India since 2018. To date, over 500,000 students have participated in the challenge. Tata Steel Foundation (TSF) initiated ""The Thousand Schools Program"" in 2015, in remote regions of Odisha and Jharkhand to improve children's learning levels and expose them to new knowledge areas and skills. These regions are tribally dense, forested, and have hilly terrain. They are highly underserved in terms of schools and teachers. The majority of the students are first-generation learners with no home support. A large number of them fall out of schooling and get engaged in child labor.TCS and TCF started an experiment to assess if computing can be introduced to students from such underserved communities through Bebras tasks. For a period of 6-8 weeks in September-October 2022, around 10,000 students solved a total of 15 Bebras tasks of varying difficulty levels."
Introducing Data Science to School Kids,"Srikant, Shashank and Aggarwal, Varun",2017,"Data-driven decision making is fast becoming a necessary skill in jobs across the board. The industry today uses analytics and machine learning to get useful insights from a wealth of digital information in order to make decisions. With data science becoming an important skill needed in varying degrees of complexity by the workforce of the near future, we felt the need to expose school-goers to its power through a hands-on exercise. We organized a half-day long data science tutorial for kids in grades 5 through 9 (10-15 years old). Our aim was to expose them to the full cycle of a typical supervised learning approach - data collection, data entry, data visualization, feature engineering, model building, model testing and data permissions. We discuss herein the design choices made while developing the dataset, the method and the pedagogy for the tutorial. These choices aimed to maximize student engagement while ensuring minimal pre-requisite knowledge. This was a challenging task given that we limited the pre-requisites for the kids to the knowledge of counting, addition, percentages, comparisons and a basic exposure to operating computers. By designing an exercise with the stated principles, we were able to provide to kids an exciting, hands-on introduction to data science, as confirmed by their experiences. To the best of the authors' knowledge, the tutorial was the first of its kind. Considering the positive reception of such a tutorial, we hope that educators across the world are encouraged to introduce data science in their respective curricula for high-schoolers and are able to use the principles laid out in this work to build full-fledged courses."
Introducing K-12 Teachers to Computer Science Education through an Online Micro-credential: An Experience Report,"Zhang, Shan and Hutchins, Nicole M. and Barrett, Joanne R. and Botelho, Anthony F. and Israel, Maya",2025,"As efforts to incorporate Computer Science (CS) and Computational Thinking (CT) into K-12 classrooms continue to expand, there is a growing need for programs that prepare teachers for the effective teaching and integration of CS and CT into their instruction. An ongoing challenge is preparing current and future teachers to develop the skills and confidence needed to teach and integrate CS and CT. Micro-credentials, designed as a short, focused course, offer opportunities for teachers to build skills and confidence through targeted study. This experience report examines a self-paced online micro-credential developed and implemented within a university-based college of education. The micro-credential was designed to equip both pre-service and in-service teachers with the skills and knowledge necessary to teach and integrate CS and CT into K-12 teaching and learning. We describe the micro-credential, including its structure, sequencing, and content. We then present an exploration of teachers' experiences in the micro-credential. Findings from surveys and CS autobiographies show increases in participants' attitudes, beliefs, and perceptions toward the conceptual and technical aspects of teaching CS, with a particular focus on designing clear and actionable plans for integration. The results from this study provide valuable insights for the development of future CS- and CT-focused micro-credentials."
Introducing Middle School Students to Computational Thinking with the CS First Curriculum,"Beason, Kara and Fenwick, James B. and Norris, Cindy",2020,"Computational thinking (CT) is a set of concepts and problem-solving skills that are not only imperative for computer scientists, but important and applicable to nearly every discipline. CT skills are essential in a world where technology is ubiquitous. In the past decade, many efforts have been made to develop and evaluate computational thinking in primary and secondary students. Promoting CT skills in these young students can help reduce the underrepresentation of women and minorities in STEM careers since students who are exposed to CT at an early age are more likely to pursue a STEM discipline in college [18].This paper describes the COSMIC program, funded by Google's Tides Foundation, that introduces middle school students to CS and CT using the CS First curriculum and Scratch. The COSMIC activities spanned three years directly serving 700 students through 175 distinct events. Females comprised 51.1% of the individuals served, and 10.2% of those served were part of a minority group. The COSMIC activities allowed the researchers to investigate the effectiveness of the CS First curriculum. Using the Hairball-powered Dr. Scratch analysis tool on the curricular projects, the paper reports on the efficacy of the CS First curriculum in terms of its coverage of vital CT concepts and its success in transferring those concepts to middle school students."
Introducing Middle School Students to Programmable Sensor Technologies Through an Immersive Experience,"Gendreau Chakarov, Alexandra",2020,"Integrating computational thinking into middle school science classes through the use of programmable sensor technologies requires that students are familiar with the sensors and how the sensors can help them figure out the answers to their scientific questions. However current best practice in science education integrates science content and scientific practices (i.e. planning an investigation using the sensors) instead of teaching the practices first. In addition, the goal is to have the students recognize that the sensors would be useful for answering their current questions. To address this issue, I collaboratively designed a week long sensor immersion experience with middle school science teachers as part of a larger design based implementation research project that creates middle school science units that integrate computational thinking using these sensors. Through our observations and reflections with teachers, the necessity of a unit that introduces the students to the sensors became apparent. Working with the teachers, we developed a sensor immersion experience centered around the investigation of a classroom data display that illustrates information about the classroom environment using lights and sound. The data display was constructed using the programmable sensor technologies available to the students and the unit involved them creating and refining a model of how the classroom data display worked. This unit was implemented during the first three months of the 2019/2020 school year and preliminary results suggest that students have a better sense of the capabilities of the sensors and how they can help them in their scientific inquiry."
Introducing Modelling and Code Comprehension from the First Days of an Introductory Programming Class,"Cutts, Quintin and Kallia, Maria",2023,"An approach to code comprehension in an introductory programming class is presented, drawing on the Text Surface, Functional and Machine aspects of Schulte’s Block Model, and emphasising programming as a modelling activity involving problem and machine domains. To visually connect the domains and a program, a key diagram conceptualising the three aspects lies at the approach’s heart, alongside instructional exposition and exercises, which are all presented. Students find the approach challenging initially, but most recognise its value later, and identify, unexpectedly, the value of the approach for problem decomposition, planning and coding."
Introducing teachers to computational thinking using unplugged storytelling,"Curzon, Paul and McOwan, Peter W. and Plant, Nicola and Meagher, Laura R.",2014,"Many countries are introducing new school computing syllabuses that make programming and computational thinking core components. However, many of the teachers involved have major knowledge, skill and pedagogy gaps. We have explored the effectiveness of using 'unplugged' methods (constructivist, often kinaesthetic, activities away from computers) with contextually rich storytelling to introduce teachers to these topics in a non-threatening way. We describe the approach we have used in workshops for teachers and its survey based evaluation. Teachers were highly positive that the approach was inspiring, confidence building and gave them a greater understanding of the concepts involved, as well as giving practical teaching techniques that they would use."
Introducing Teenagers to Machine Learning through Design Fiction: An Exploratory Case Study,"Aki Tamashiro, Mariana and Van Mechelen, Maarten and Schaper, Marie-Monique and Sejer Iversen, Ole",2021,"In this paper, we describe an exploratory study of how design fiction can be used to introduce machine learning (ML) to 14-15 year old students in an engaging way. The study describes three sessions conducted online that combined hands-on and design fiction activities related to supervised ML, focusing on facial analysis. Based on semi-structured interviews and field notes, we discuss how the design fiction approach seemed to be engaging and supportive for students' reflection on their relationship with technology. In future work, we will expand the study to include a larger number of students, assess their learning, and further explore connections between ML and its societal implications."
Introduction to Computational Thinking for K-12 Educators through Distance Learning,"Oliveira, Eduardo C. and Bittencourt, Roberto A. and Trindade, Rosaria P.",2019,Sin Valor
Introduction to Computational Thinking: A New High School Curriculum using CodeWorld,"Alegre, Fernando and Underwoood, John and Moreno, Juana and Alegre, Mario",2020,"The Louisiana Department of Education partnered with the Gordon A. Cain Center at LSU to pilot a Computing High School Graduation Pathway. The first course in the pathway, Introduction to Computational Thinking (ICT), is designed to teach programming and reinforce mathematical practice skills of nine-grade students, with an emphasis on promoting higher order thinking. In 2017-18, about 200 students and five teachers participated in the pilot, in 2018-2019 the participation increased to 400 students, and in the current 2019-2020 year about 800 students in 11 schools are involved. After describing the course content and the teacher training, we briefly discuss the data we have collected in the last two years. The overall student reception of the course has been positive, but the course was categorized by most students as hard. The pre-post test content assessments show that students have learned not only the language, but also general principles of programming. Lessons learned during the pilot phase have motivated changes, such as emphasizing during Professional Development the need to provide timely feedback to students, provide detailed rubrics for the projects and reorganize the lessons to increase the initial engagement with the material. After two years of running pilots, the course is becoming student-centered, where most of the code and image samples provided in the lessons are based on code created by previous students."
Introduction to Data Science as a Pathway to Further Study in Computing,"Guerzhoy, Michael",2019,"Several institutions have recently introduced Introduction to Data Science courses that involve a substantial programming component and do not require CS1 as a prerequisite. Programming and computational thinking are central to the emerging discipline of data science, and so there is overlap between traditional CS1 courses and Introduction to DS.Partly because of the evident societal significance of data science and because data science does not have the problematic reputation of computer science, Intro to DS can attract new and diverse audiences that may not have been interested in taking CS1.We explore Intro to DS as a possible alternative path into computing: what are the learning goals in Intro to DS that involve programming and/or computational thinking? How generalizable are the problems students solve in Intro to DS to what students would encounter in future studies? Is it feasible for students to pursue a data science sequence rather than CS1-CS2 and be prepared for a career that uses data science? To what extent can a pathway through a data science sequence diversify the population of students who graduate from degree programs in computer science and data science?We survey the Introduction to Data Science courses offered in North American post-secondary education, and focus on a data science sequence that uses the R programming language and does not require CS1 at an R1 institution as a case study."
Introduction: Computational thinking in preK-5: empirical evidence for integration and future directions,"Ottenbreit-Leftwich, Anne and Yadav, Aman",2022,Sin Valor
Introductory Engineering Courses With Computational Thinking: The Impact of Educational Privilege and Engineering Major Entry Policy on Student Pathways,"Mendoza Diaz, Noemi V. and Trytten, Deborah A. and Meier, Russ",2022,Sin Valor
Introductory Programming Course for Data Science in Non-STEM Disciplines,"Gutierrez-Cardenas, Juan",2023,Sin Valor
Introductory Programming Using Non-Textual Modalities - An Empirical Study on Skill Assessment Using Rainfall Problem,"Thangavelu, S. and Rao, Vibha and Shyamala, C. K. and Velayutham, C. Shunmuga",2019,Sin Valor
"Investigating Elementary Teachers' Understanding, Beliefs, and Intentions toward STEM and Computational Thinking in Education","Surahman, Ence and Hua Wang, Tzu and Turner Lam, Kee-Fui and Sulthoni and Nendra Pratama, Ujang and Nur Aisyah, Eny",2022,Sin Valor
Investigating Participation Mechanisms in EU Code Week,"Sirocchi, Christel and Ostergren, Annika Pofantis and Bogliolo, Alessandro",2024,"Digital competence (DC) is a broad set of skills, attitudes, and knowledge for confident, critical, and responsible use of digital technologies in every aspect of life. DC proves essential in the contemporary digital landscape, yet its diffusion is hindered by biases, misunderstandings, and limited awareness. Teaching Informatics in the educational curriculum is increasingly supported by the institutions but faces serious challenges, such as teacher upskilling and support. In response, grassroots movements promoting computing literacy in an informal setting have grown, including EU Code Week, whose vision is to develop computing skills while promoting diversity and raising awareness of the importance of digital skills. This study extensively analyses EU Code Week editions spanning 2014 to 2021 across European Union member states, pursuing three primary objectives: firstly, to evaluate teacher engagement in the campaign in terms of penetration, retention, and spatial distribution; secondly, to characterise the multifaceted audience and themes embraced by these initiatives; and, lastly, to investigate the influence of socio-economic factors on engagement. The investigation uncovers the underlying mechanisms fostering Code Week’s engagement, providing insights to campaign organisers for strategic planning and resource allocation in future editions. Moreover, the analysis reveals that the most engaged areas are characterised by lower income as well as lower digital literacy, restricted access to technology, and a less established computer education, suggesting that Code Week thrives precisely where its impact is most needed."
Investigating pre-service teachers' computational thinking through lesson design using digital technologies,"Sheridan, Scott and Alkhateeb, Bataul and Mouza, Chrystalla and Yang, Hui",2022,"In this chapter, we describe a pedagogical approach aimed at preparing pre-service teachers to integrate (CT) into K-8 contexts. Specifically, we present a standalone educational technology course with explicit attention on connecting CT to disciplinary content and pedagogy while introducing a range of digital tools. Data were collected from 34 pre-service teachers over the period of one semester. Specifically, a total of 68 lesson plans developed by pre-service teachers through two distinct lesson planning tasks using concept mapping and programming tools were collected and analyzed using both quantitative and qualitative techniques. The analysis utilized a coding scheme that focused on identifying specific CT practices illustrated in each lesson. It also examined differences in the CT practices exhibited in each lesson planning task. Findings indicated that the CT practice of data was most prevalent in pre-service teachers' lesson plans. Outside of data, however, there was greater variation in the CT practices represented in programming lesson plans compared to the concept mapping lesson plans. Implications for teacher educators are discussed based on the findings."
Investigating Students’ Preexisting Debugging Traits: A Real World Escape Room Study,"Michaeli, Tilman and Romeike, Ralf",2020,"Being able to find and fix errors is an essential skill in computer programming. Nevertheless, debugging poses a major hurdle in the K12 classroom, as students are often rather helpless and rely on the teacher hurrying from one student-PC to the other. Overall, there is a lack of respective concepts and materials for the classroom as well as research on how to teach debugging. According to the constructivist learning theory, teaching and developing concepts and materials for the classroom must take learners’ preexisting experience into account to be effective. In their daily lives, students are confronted with errors long before they build programming experience: Whether there is a problem with “the internet” or with their bicycle, they are troubleshooting and locating and fixing errors. Debugging is a special case of general troubleshooting and shares common characteristics, such as the overall process or particular strategies. Thus, the aim of this study is to investigate students’ preexisting debugging traits. To this end, we developed a real-world escape room consisting of debugging-related troubleshooting exercises. This allows us to observe students’ troubleshooting behavior in a natural environment. Building upon this, we employed the escape room approach with around 150 high school students and analyzed the resulting video data. Based on the data we identify preexisting debugging traits such as students struggling to generate hypotheses or to undo changes. Furthermore, they are not able to effectively test a system and struggle with cognitive load in topographic search. Therefore, our study firstly contributes to understanding and explaining the behavior of novice debuggers. The second contribution is an innovative methodology to analyze preexisting debugging traits."
"Investigating the Capabilities of Generative AI in Solving Data Structures, Algorithms, and Computability Problems","Li, Nero and Broner, Shahar and Kim, Yubin and Mizuo, Katrina and Sauder, Elijah and To, Claire and Wang, Albert and Gila, Ofek and Shindler, Michael",2025,"There is both great hope and concern about the future of Computer Science practice and education concerning the recent advent of large language models (LLMs).We present the first study to extensively evaluate the ability of such a model to solve problems in Computer Science Theory. Specifically, we tested 165 exam-level problems across 16 specific topics related to computer science theory, ranging from preliminary data structures to algorithm design paradigms to theory of computation (automata and complexity). Our results use the recent popular models (GPT-4 and GPT-4o). This is a rapidly evolving field, with model performance continuously improving. We present our results primarily as an indication of what they can already achieve-equivalently how they can already be useful-today, fully expecting them to improve even further in the near future. Our results show that what was very recently a state-of-the-art model (GPT-4) can solve 77% of free-response problems in data structures and algorithms with little to no guidance. The latest model, GPT-4o, can solve around 46% of the Theory of Computation problems we posed, with predictable categories for which problems it could not solve. When broken down by topic, the model can solve 80% of problems in 4 out of the 15 topics and at least half in 8 other topics. Other problems, namely more visual problems, either require more substantial coaching or seem to still be beyond the capabilities of the language model--for now. By understanding the strengths and limitations of these models for solving theory problems, we can open the door to future work, ranging from human educational assessment on the topic to automated tutors for learners of the subject."
Investigating the Flipped-classroom Approach on College Students’ Computational Thinking Skills,"Gong, Di and Yang, Harrison Hao and Cai, Jin",2021,Sin Valor
Investigating the Impact of Design Thinking-Based STEAM PBL on Students’ Creativity and Computational Thinking,"Chang, Chu-Yang and Du, Zhengyi and Kuo, Hsu-Chan and Chang, Chih-Ching",2023,Sin Valor
Investigating the Impact of Programming Activities on Computational Thinking and AI Literacy in Spanish Schools,"Moreno-Le\'{o}n, Jesus and Vasco-Gonz\'{a}lez, Margarita and Rom\'{a}n-Gonz\'{a}lez, Marcos and Robles, Gregorio",2024,"This article presents research conducted within the School of Computational Thinking and Artificial Intelligence (EPCIA in its original form in Spanish) project, an initiative developed by the Spanish Ministry of Education and Vocational Training during the 2020-21 academic year. The study investigated whether it is possible to contribute to the development of students’ computational thinking skills and artificial intelligence (AI) literacy through programming activities using the Scratch language and the Machine Learning for Kids platform. The study involved 133 teachers and more than 2,000 students, from 4th to 8th grade, with representation from 17 of the 19 Spanish regions. Students took a quantitative test on computational thinking and another on AI before and after the intervention, and teachers and students also took a questionnaire at the end of it. The results showed that: i) quantitative tests can be used to reliably measure, in terms of internal consistency, the level of development of computational thinking and AI literacy in the Spanish school population of these ages; ii) it is possible to develop students’ computational thinking skills and raise their level of AI literacy through programming activities; iii) the intervention contributed to demystifying the main prejudices regarding AI; iv) a gender gap was found in relation to previous knowledge and experiences with these topics. Overall, the study concluded that introducing the foundations of AI in primary and secondary education in Spain is appropriate, feasible, and relevant."
Investigating the Psychometric Structure of Bebras Contest: Towards Mesuring Computational Thinking Skills,"Hubwieser, Peter and Mühling, Andreas",2015,Sin Valor
Investigating the Role of Cognitive Abilities in Computational Thinking for Young Learners,"Salac, Jean and Thomas, Cathy and Butler, Chloe and Franklin, Diana",2021,"With the global movement to incorporate computer science instruction into elementary education, learners are being introduced to computer science and computational thinking (CS/CT) ideas at increasingly younger ages. At these early ages, young learners are developing cognitive abilities foundational to their education. While other discipline-based education fields, such as math, science, and reading, have long studied the role of cognitive abilities, such as short-term working memory and long-term retrieval, in their respective fields, similar research in computer science education is relatively sparse. In this exploratory study, we examined the relationship between cognitive abilities and CS/CT performance of fourth-grade students (ages 9-10) who underwent either an introductory CT curriculum based on Use–&gt;Modify–&gt;Create or the same curriculum with additional scaffolding from the TIPP&amp;SEE metacognitive learning strategy. Our analysis revealed performance on CT assessments to be weakly correlated with working memory and long-term retrieval, with correlations increasing as the CT concepts grew more complex. This suggests that scaffolding beyond TIPP&amp;SEE may be needed with more complex CT concepts. We also found that when using TIPP&amp;SEE, students scoring below average on cognitive ability tests performed as well as students in the control condition with average cognitive ability scores. These results indicate TIPP&amp;SEE’s potential in creating more equitable computing instruction. We hope that results from this initial exploration can help encourage further study into the role of cognitive abilities in CS/CT education for young learners."
Investigation on Computational Thinking of Normal Students Based on Technology Acceptance Model,"Tian, Xinyu and Li, Chaoqian and Zhao, Yaru",2021,"Based on the technology acceptance model, this paper constructs a computational thinking acceptance model for normal students. Taking normal students from H Normal University as a research sample, the structural equation model is used to quantitatively analyze that model. The research results show that subjective norms, the usefulness and ease of use of computational thinking have a positive and significant impact on the attitude and behavioral intentions of normal students to use computational thinking."
Is My Game OK Dr. Scratch? Exploring Programming and Computational Thinking Development via Metrics in Student-Designed Serious Games for STEM,"Troiano, Giovanni Maria and Snodgrass, Sam and Arg\i{}mak, Erin\c{c} and Robles, Gregorio and Smith, Gillian and Cassidy, Michael and Tucker-Raymond, Eli and Puttick, Gillian and Harteveld, Casper",2019,"Computational thinking (CT) is key to digital literacy and helps develop problem-solving skills, which are fundamental in modern school. As game design shows potential for teaching CT, metrics like Dr. Scratch emerge that help scholars systematically assess the CT of student-designed games, particularly with Scratch. Compared to other CT metrics, Dr. Scratch scores the CT of Scratch projects automatically and can be used to describe CT development. However, previous research using Dr. Scratch summatively assessed CT, but did not look at CT development. We use Dr. Scratch to assess the CT development of Scratch games designed by 8th-grade students in STEM curricula. We show how CT proficiency in student-designed games develops differently in each CT dimension, where parallelism, synchronization, and logic develop proficiently, while developing abstraction seems hard. We discuss insights into game-based CT development for STEM, and suggest improvements for metric-based CT assessment."
IT problem solving: an implementation of computational thinking in information technology,"L'Heureux, Jaime and Boisvert, Deborah and Cohen, Robert and Sanghera, Kamaljeet",2012,"This paper describes the implementation of information technology problem-solving constructs and scenarios designed to cultivate computational thinking in information technology education at the college level via a course entitled ""IT Problem Solving."" A project of Broadening Advanced Technological Connections (BATEC), these scenarios were developed by a team of researchers under the auspices of an NSF CPATH grant focusing on adapting Computational Thinking as defined by Jeanette Wing into a more applied framework in partnership with and validated by a broad set of Information Technology (IT) professionals. The methodologies used within this highly successful course at Bunker Hill Community College may be of interest to other departments with existing IT programs that would like to take advantage of the strengths of the problem solving approach."
Iteration with Intention: Project-Based Learning of Computational Thinking,"Ulzii-Orshikh, Nasanbayar and Dougherty, John",2020,"Globally, there is a growing interest in preparing students to develop fluency with computing. The K-12 Computer Science Framework states that by the end of 12th grade, students should be able to create computational artifacts through continuous testing and refining of their products considering unique perspectives of peers. It has been suggested that creative project experiences with iteration based on feedback encourage the development of these computational skills. However, traditional classrooms are more focused on getting the correct answer to standardized questions. Countries such as Mongolia may have particular challenges in offering students opportunities to develop projects, due to pressure from standardized exams for college entry and lack of teachers prepared to lead computational project-based learning (Uyanga, 2006). This is an exploratory study of an 8-session/16-hour intervention course that provided 13 high-school students in Mongolia an opportunity to create, share, and iterate on computational projects. Measurements included assessment of student attitudes and evaluated how they viewed their participation and learning in the course through pre- and post-surveys, analyzing their responses with qualitative coding. Results suggest that the opportunity to create projects was novel for these students; attitudes regarding feedback changed, and iteration was viewed as key in creating computational artifacts. The analysis also highlights the urgency of further research on localizing the K-12 Computer Science Framework throughout different countries to foster these skills and developing structures that allow students to embrace the freedom of project-based learning."
iThinkSmart: Immersive Virtual Reality Mini Games to Facilitate Students’ Computational Thinking Skills,"Joseph Agbo, Friday and Sunday Oyelere, Solomon and Suhonen, Jarkko and Tukiainen, Markku",2021,"This paper presents iThinkSmart, an immersive virtual reality-based application to facilitate the learning of computational thinking (CT) concepts. The tool was developed to supplement the traditional teaching and learning of CT by integrating three virtual mini games, namely, River Crossing, Tower of Hanoi, and Mount Patti treasure hunt, to foster immersion, interaction, engagement, and personalization for an enhanced learning experience. iThinkSmart mini games can be played on a smartphone with a Goggle Cardboard and hand controller. This first prototype of the game accesses players' competency of CT and renders feedback based on learning progress."
Jupyter for Teaching Data Science,"Van Dusen, Eric",2021,"A recent evolution of cloud-based tools creates an easy and powerful way for students to access the industry standard data science tools from within a browser window. Jupyter notebooks were originally developed for sharing of scientific results and reproducible open science. However, when delivered through a cloud-based server, they have huge benefits for teaching, including removing the need to install any software locally or require any specific machine to be used by students. UC Berkeley has extensive experience teaching via Jupyter, including the popular introductory Data 8 course, small Data Science Modules in non- Data Science classes, and advanced work in the Data 100 and Data 102 ( Machine Learning) classes. There is a library of OER curricular materials to share between institutions. In addition, Multiple languages and interfaces can be served, from Jupyter in multiple languages, Rstudio, and even a Linux desktop, as well as auto-grading approaches. We are interested to share experiences across institutions utilizing this approach.The use of teaching Jupyterhubs to date, both for introductory to Data Science courses, as well as more advanced topics is growing rapidly. We would like to have a conversation about how to use Jupyterhubs and teaching Jupyter notebooks from a variety of instructors and institutions. We are also interested in how to provide these types of resources to additional educational settings who may be more resource constrained."
K-12 Computing Teachers' Topics for Inquiry,"Sentance, Sue and Sheppard, Bonnie and Humphreys, Simon",2024,"While teacher inquiry has been known for decades to be an effective way of improving practice, teachers often do not have the time or confidence to undertake their own research. This paper describes the research questions that computing teachers chose to investigate when participating in a teacher inquiry project. Results show that teachers are most focused on cognitive outcomes, are concerned with students’ lack of understanding, and are mostly focused on either programming or computing topics in general. While some teachers planned to change their pedagogy, others introduced cross-curricular opportunities to increase interest and understanding. Teachers’ choice of questions can support researchers in developing a research agenda for K-12 computing education."
"K-8 Learning Trajectories Derived from Research Literature: Sequence, Repetition, Conditionals","Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Moran, Cheryl and Franklin, Diana",2017,"Computing curricula are being developed for elementary school classrooms, yet research evidence is scant for learning trajectories that drive curricular decisions about what topics should be addressed at each grade level, at what depth, and in what order. This study presents learning trajectories based on an in-depth review of over 100 scholarly articles in computer science education research. We present three levels of results. First, we present the characteristics of the 600+ learning goals and their research context that affected the learning trajectory creation process. Second, we describe our first three learning trajectories (Sequence, Repetition, and Conditionals), and the relationship between the learning goals and the resulting trajectories. Finally, we discuss the ways in which assumptions about the context (mathematics) and language (e.g., Scratch) directly influenced the trajectories."
KELP CS and LaPlaya: A Computational Thinking Curriculum and Development Environment for 4th - 6th Grade (Abstract Only),"Franklin, Diana and Dwyer, Hilary A.",2015,"This workshop introduces our elementary school programming curriculum, KELP-CS, and the corresponding programming environment LaPlaya. KELP-CS (Kids Engaged in Learning Programming) is an innovative, modular computational thinking curriculum for 4th-6th grade students. Off-computer activities connect computer science concepts to students' every day experiences. On-computer activities in LaPlaya develop students' computational thinking and programming skills. Finally, an engineering design project allows students to apply these new skills through an open-ended, creative project (e.g. digital storytelling in Module 1, and virtual game in Module 2). LaPlaya is a modified Scratch programming environment tailored to the developmental needs of 4th-6th grade students. In this workshop, we begin by introducing the KELP-CS curriculum; LaPlaya, the development environment used in the on-computer activities; and the resources for teachers embedded in both. Workshop participants will do sample on- and off- computer activities from Module 1 (4th grade) and discuss tips and strategies for teaching computational thinking with this age group. For the second part of the workshop, we provide additional background for participants interested in creating their own curriculum with LaPlaya. This includes how to create projects and their analysis."
Keys to a Comprehensive Computer Science at School Policy in Argentina,"Borchardt, Mara and Roggi, In\'{e}s and Schapachnik, Fernando",2024,Sin Valor
Kid Coding Games and Artistic Robots: Attitudes and Gaze Behavior,"Sharma, Kshitij and Papavlasopoulou, Sofia and Giannakos, Michail and Jaccheri, Letizia",2018,We present a study in the context of coding activities for children. Our main focus is towards understanding the relation between children's attitudes towards coding and their behaviour while coding. Forty-four school children participated in this study solving different coding problems. We used mixed methods to capture attitude and behaviour of the children participating in the study. The attitudes towards learning to program were recorded using the self-reporting questionnaires and the behaviour was captured using the eye-trackers. The results show that the gaze-behaviour of the children moderates the relationship among the different attitudes towards coding.
KnitxCode: Exploring a Craftsmanship-driven Approach to Computational Thinking,"S\o{}rensen, Marie-Louise Stisen Kjerstein and Fog, Bjarke Vognstrup and Musaeus, Line Have and Petersen, Marianne Graves",2022,"In recent years, computational thinking (CT) has focused on how children and citizens develop basic computing skills which empower them to participate in a digitised society and broaden participation and engagement with CT. We present the exploration of a craftsmanship-driven approach to engage people in CT. To explore this approach a team of knitters, a computer scientist and a computing education expert iteratively designed the KnitxCode workshop. KnitxCode utilises knitting in combination with CT concepts as the foundation for the activities. The workshop was evaluated by 12 participants with no programming experience and with knitting experience ranging from 2-25 years (M = 6). From the evaluation we found that the craftsmanship-driven approach seemed to provide the participants with confidence to learning CT, as shared concepts and practices between knitting and computing supported transitioning from knitting craftsmanship to computing and in this way served to demystify computing."
Kniwwelino: A Lightweight and WiFi Enabled Prototyping Platform for Children,"Maquil, Val\'{e}rie and Moll, Christian and Schwartz, Lou and Hermen, Johannes",2018,"Nowadays, computational thinking skills are considered as fundamental for our future daily life and many initiatives and tools are created to foster these skills. In this paper, we present the Kniwwelino, a new platform for prototyping physical computing projects based on WiFi. The novelty of our solution lies in the use of a WiFi chip on a small, extendable board, programmable via a block based visual programming language, making the platform compact, low-cost, WiFi enabled, and accessible to children. This paper presents the design rationale and implementation of the platform as well as two simple, example projects making use of the new WiFi-based functionalities."
Kodu alice and computer science unplugged: a model of effective introducing middle school students to computer science and computational thinking (abstract only),"Marghitu, Daniela and Thomas, Lavaris and Rawajfih, Yasmeen and Hall, Jillian and Marshall, Andrew",2014,"This poster describes the ""Computer Science for All Bulldogs (CS4ALL-B) pilot, a 7-week long course taught in Fall 2013 at Opelika Middle School, located in the Auburn- Opelika, Alabama Metropolitan Area (https://cs4allb.eng.auburn.edu). The program marks the first time a formal Computer Science (CS) course has been taught in an Alabama middle school. The CS4ALL-B curriculum builds upon the Auburn University innovative 'three-step' model of K-12 computing and robotics instruction that introduces CS and Computational Thinking (CT) concepts for K-12 students. This model uses programming frameworks such as Kodu, Alice, App Inventor, Lego NXT-G and Tetrix, and Computer Science Unplugged (CSU) activities. While moving between the three steps, students explore the fundamentals of CS/CT concepts. The CS4ALL-B curriculum is structured in four main sections: First, introduction to Kodu for 7th graders and Alice for 8th graders; Second, introduction to CS/CT Concepts; Third, participation in selected CSU activities, then students develop their programs to demonstrate their abilities to design and create Kodu or Alice worlds that implement the concepts learned while participating in CSU activities; Fourth, students build their own course project that includes all concepts and skills grasped throughout their training. This model helps maintain high levels of motivation, concentration, and engagement during the entire course. The results of the pilot assessment, including tools such as traditional written assessments (e.g. quizzes, tests) as well as alternative assessments tools (e.g. projects and blog posts), will be presented. We have found that our methods foster the learners' nascent development in CS."
Labeling Implicit Computational Thinking in Pizza Pass Gameplay,"Rowe, Elizabeth and Asbell-Clarke, Jodi and Baker, Ryan and Gasca, Santiago and Bardar, Erin and Scruggs, Richard",2018,"Players can build implicit understanding of challenging scientific concepts when playing digital science learning games [7]. In this study, we examine implicit computational thinking (CT) skills of 72 upper elementary and middle school students and 10 computer scientists playing a game called Pizza Pass. We report on the process of creating automated detectors to identify four CT skills from gameplay: problem decomposition, pattern recognition, algorithmic thinking, and abstraction. This paper reports on hand-labeled playback data obtaining acceptable inter-rater reliability and 100 gameplay features distilled from digital log data. In future work, we will mine these features to automatically identify the CT skills previously labeled by humans. These automated detectors of CT will be used to analyze gameplay data at scale and provide actionable feedback to teachers in real-time."
Language-based support for computational thinking,"Howland, Katy and Good, Judith and Nicholson, Keiron",2009,Sin Valor
Large Language Model-Supported Software Testing with the CS Matrix Taxonomy,"Crandall, Johannah L. and Crandall, Aaron S.",2024,"New breakthroughs in code synthesis from Generative Pre-Trained Transformers (GPT) and Large Language Model (LLM) algorithms are driving significant changes to software engineering education. Having algorithms able to generate components of a software project means that software developers will need stronger skills in requirements specification to guide code generation as well as stronger skills in code review, testing, and integration to incorporate AI-generated code into projects. Shifts in industry and classroom practices are already occurring with the availability of inline code generation tools like GitHub's Copilot, which makes discussion of pedagogical strategies in this area a timely topic. Of immediate concern in computer science education is the potential for LLM-generated code and code help to undermine the learning of CS students. In order to avoid such undermining in even intentional uses of LLM-enhanced learning supports, it is necessary to clarify the roles such supports need to play in the pedagogical process. The Computer Science Matrix Taxonomy provides a strong framework for organizing software testing learning outcomes as well as delineating the operational space in which LLM-based feedback tools should operate to support those learning outcomes. In this paper, the authors operationalize the CS Matrix Taxonomy for software testing learning outcomes and illustrate the integration of LLM-generated test strategy suggestions as an extension of the peer coding/testing model. The work includes examples of AI-generated code testing suggestions that students would use to help guide their own code synthesis for assignments or projects."
Learners' perspectives on block-based programming environments: code.org vs. scratch,"Krugel, Johannes and Ruf, Alexander",2020,"We report from a comparative study regarding two popular block-based programming environments for the introduction of algorithmic concepts, namely Code.org and Scratch. A quasi-experiment was conducted with five classes (grade 7) from two secondary schools (n = 122). To investigate the effects of both learning environments, the students were divided into two groups.Following a mixed-methods research approach, we use quantitative and qualitative methods to gain a comprehensive understanding of learner's perspectives and skills. We measure the learners' perceived self-regulation and intrinsic motivation. The learners of Code.org show a higher intrinsic motivation compared to the Scratch group. Qualitative analyses of answers to open-ended questions reveal positive and negative aspects of the learning environments. With Code.org, the learners in particular like the fun and the challenges, while for Scratch, they like the feeling of actually programming something and the very free environment."
Learning Analytics: Moving on?,"Conde, Miguel \'{A}ngel and Hern\'{a}ndez-Garc\'{\i}a, \'{A}ngel and Chaparro-Pel\'{a}ez, Julian",2021,"This is the introductory article of the track on Learning Analytics within the 2021 International Conference Technological Ecosystems for Enhancing Multiculturality (TEEM’21). In this article, we lay out the motivation of the main theme of this edition's track, the main topics of interest and the review process followed for submission of contributions. We also present an outline of the accepted contributions and conclude with our own reflections on current issues in research on learning analytics, based on both our opinions and experience as track chairs in previous editions."
Learning and Identity in YWIC: An Analysis of Program Implementation and Design as Promoting Agency in Computing (Abstract Only),"Hug, Sarah and Pontelli, Enrico and Cota, Raena and Eyerman, Suzanne",2017,"This poster highlights a sociocultural analysis of a multifaceted K12 outreach program at New Mexico State University, a Hispanic Serving Institution that has had success recruiting local young women into the computer science department and beyond into the computing workforce. YWiC began in 2006 and has become a rich, extensive outreach program, reaching over 10,200 students across southern New Mexico. Over the years, YWiC has produced strong evaluation results related to computer science knowledge gains and computing interest (see Nesiba, et. Al 2015). The social scientists used Lave and Wenger's (1991) community of practice concept to analyze program design and implementation. Findings show four ways in which the program promotes individual agency, belonging to the local and global computing communities, and ""positioning"" (Davies and Harre, 1990) of young women as competent computer scientists. Specifically, YWiC: a) makes multiple pathways into computing education and computer science careers via intentional role modeling, b) provides common base knowledge through initial experiences and deep support from multiple role models, c) gives opportunities for young women to identify, and be identified by others as, competent in computing, and d) promotes belonging to a group of like-minded girls with multiple interests."
Learning by Fixing and Designing Problems: A Reconstruction Kit for Debugging E-Textiles,"Lui, Debora and Anderson, Emma and Kafai, Yasmin B. and Jayathirtha, Gayithri",2017,"In this paper, we present the development of a ""reconstruction kit"" for e-textiles, which transforms fixed-state construction kits---maker tools and technologies that focus on the creation of semi-permanent projects---into flex-state construction kits that allow for endless deconstruction and reconstruction. The kit uses modular pieces that allow students to both solve and create troubleshooting and debugging challenges, which we call ""DebugIts."" We tested our prototype in an after-school workshop with ten high school students, and report on how they interacted with the kit, as well as what they learned through the DebugIt activities. In the discussion, we delve into the affordances and challenges of using these kits as both learning and assessment tools. We also discuss how our pilot and prototype can inform the design of reconstruction kits in other areas of making.1"
Learning Chinese as a Second Language by Educational Robots Integrating the Operation of Conditional Logic in Computational Thinking and the Usage of the Causal Sentences,"Hsu, Ting-Chia and Wong, Lung-Hsiang and Aw, Guat Poh",2020,Sin Valor
Learning computational thinking and social skills development in young children through problem solving with educational robotics,"Caballero-Gonzalez, Yen-Air and Mu\~{n}oz-Repiso, Ana Garc\'{\i}a-Valc\'{a}rcel and Garc\'{\i}a-Holgado, Alicia",2019,"The technological advance that is currently evident in the different social contexts is contributing to consolidate educational processes that allow the strengthening of technological and social skills in students. This paper presents some results obtained in the development of a learning experience in computational thinking and social interaction skills, using problem solving activities and educational robotics in a playful way. The experience involved 46 students and 2 teachers of the first level of primary education of a concerted school in Salamanca, Spain, during the period 2017-2018. A rubric and checklists were used as data collection instruments. The results show a significant advance in the computational thinking and social development skills explored."
Learning Computational Thinking Efficiently: How Parsons Programming Puzzles within Scratch Might Help,"Bender, Jeff and Zhao, Bingpu and Dziena, Alex and Kaiser, Gail",2022,"Using a design thinking approach, we surveyed and interviewed grade 6-9 teachers on their experience with Scratch and Parsons Programming Puzzles (PPP). The results lead us to extend Scratch with gameful PPP functionality focused on individual computational thinking (CT) concepts. In this paper, we vary elements of PPPs presented to 624 adult learners to identify those yielding manageable cognitive load (CL), and maximum CT motivation and learning efficiency, for a general populace. Findings indicate PPPs with feedback and without distractors limit CL, those with feedback produce highest CT motivation, and those with an isolated block palette and without distractors produce highest CT learning efficiency. We analyze study data across nine conditions to offer insight to those developing PPP systems with the aim to advance equitable CT education for all."
Learning Scenarios for the Subject Methodology of Programming From Evaluating the Computational Thinking of New Students,"Rojas-López, Arturo and García-Peñalvo, Francisco José",2018,Sin Valor
Learning Sequencing with Bee-Bot: A Study on Improving Computational Thinking and Motivation for Young Learners in Programming Education,"Choi, Wan-Chong and Choi, Iek-Chong and Lam, Chan-Tong and Mendes, António José",2024,Sin Valor
Lessons Learned From Introducing Preteens in Parent-Led Homeschooling to Computational Thinking,"Sep\'{u}lveda-D\'{\i}az, Carla and Stuardo Rojas, Elson and Simmonds, Jocelyn and Gutierrez, Francisco J. and Hitschfeld, Nancy and Casanova, Cecilia and Sotomayor, Cecilia",2020,"Parents that homeschool their children ignore certain topics when they lack mastery or interest in them. Homeschool groups try to address this issue, cooperatively educating their children. We were contacted by such a group that wanted to introduce their children to computational thinking (CT). These children, aged 7-11, have showed an interest in technology, and use online educational resources. None of the parents felt capable of tutoring the group about CT. They also worried about losing control about how their children interact with technology. We report an intervention over 9 months to introduce eleven young homeschoolers to CT in a suburban environment, describing the impact on parent and children attitudes towards technology and CT. We conclude with three lessons: 1)~science-related activities should be used to introduce CT among homeschoolers, 2) ""success'' is establishing a meaningful relationship with a homeschool group, and 3) activities designed for school children need to be adapted to the homeschooling context."
Let Computational Thinking Permeate Biostatistics Education of Public Health Students,"Zheng, Qi",2021,"An overarching goal of biostatistics education at any public health school is to cultivate students' ability to solve real-world problems. This paper discusses unconventional approaches to enhancing students' problem-solving ability in the setting of an online master degree program in epidemiology. Citing students' actual work, the author advocates shifting more attention to how to foster knowledge elaboration, an integral, yet oft-overlooked part of problem-based learning. The author further illustrates how computational thinking skills can be weaved into biostatistics teaching to facilitate knowledge elaboration."
Let's Look a Layer Deeper: Design and First Results of a New Test System in the Context of Program Tracing,"Bastian, Morten and M\""{u}hling, Andreas",2019,We present an online assessment system for tracing code snippets. It is particularly suited for K12 settings and features a grid-world and a figure that moves in the world. Learners are asked to move the figure manually in accordance with what a given block of code would do. The system allows inspection of cognitive processes and misconceptions in more detail than typical pen&amp;paper assessments can provide. The paper presents the system and a preliminary empirical investigation together with future work that we are planning for the tool.
Let's play! music improvisation as a medium to facilitate computational thinking,"Montero, Calkin Suero and Pihlainen, Kaisa",2017,"The current curricular changes across Europe towards the inclusion of computational thinking through coding in comprehensive schools have prompted new challenges for teachers that may not be confident nor have a scripted pedagogy to teach the core concepts, as well as for students that may have a negative bias towards such subjects. In this poster, we present our exploratory experiences using music improvisation as facilitation medium for presenting computational concepts to students, through a relaxed and anxiety-free atmosphere. We show the results of preliminary experiments in the wild, indicating that the emotional state of the participants is positively enhanced after a short section of music improvisation. Furthermore, we pose open questions to the CSE research community on the value of including short improvisation activities prior teaching programming concepts such as data, sequence, loops and conditionals, which are, oftentimes, perceived as difficult."
Leveraging ChatGPT to Enhance Computational Thinking Learning Experiences,"Ouaazki, Abdessalam and Bergram, Kristoffer and Holzer, Adrian",2023,Sin Valor
Leveraging Community Cultural Wealth to Support K-8 CT Education in Kentucky Appalachia,"Iwatani, Emi and Tackett, Traci and Tackett, Kelsey and Arnett, Neil and May, Payton",2021,Sin Valor
Leveraging Generative Conversational AI to Develop a Creative Learning Environment for Computational Thinking,"Suh, Sangho and An, Pengcheng",2022,"We explore how generative conversational AI can assist students’ learning, creative, and sensemaking process in a visual programming environment where users can create comics from code. The process of visualizing code in terms of comics involves mapping programming language (code) to natural language (story) and then to visual language (of comics). While this process requires users to brainstorm code examples, metaphors, and story ideas, the recent development in generative models introduces an exciting opportunity for learners to harness their creative superpower and researchers to advance our understanding of how generative conversational AI can augment our intelligence in creative learning contexts. We provide an overview of our system and discuss interaction scenarios to demonstrate ways we can partner with generative conversational AI in the context of learning computer programming."
Little Engineers: Young Children's Learning Patterns in an Educational Robotics Project,"Chou, Pao-Nan",2018,Sin Valor
Logibot: Investigating Engagement and Development of Computational Thinking Through Virtual Reality,"Sims, Robert and Rutherford, Nathan and Sukumaran, Prashanthy and Yotov, Nikola and Smith, Thomas and Karnik, Abhijit",2021,Sin Valor
Logic Programming in Primary School: Facing Computer Science at an Early Age,"Rodríguez, Jorge P. and Cecchi, Laura A.",2024,Sin Valor
Logistics of moving from computer fluency to computational thinking (abstract only),"Sobolewska, Monika",2013,"As the theme of the conference indicates, computing is changing and so is its pedagogy. In the meantime, many computer science departments teach computer fluency service courses required by their universities, colleges, or other departments, in which the content of the course becomes highly challenged by institutional constraints (e.g. class size, university computer literacy requirement, etc.). This birds-of-a-feather is designed to gather educators who have been teaching fluency courses or may be teaching such courses in the future, so that they can share their experiences, learn from one another, and discuss the most effective ways of affecting change and delivering the content they deem most appropriate."
Longitudinal approach for introducing programming in italian primary school,"Chioccariello, Augusto and Bottino, Rosa and Panesi, Sabrina and Freina, Laura",2020,"Computational Thinking (CT) and related concepts, as programming and algorithmic thinking, have been recently advocated as abilities that are as fundamental as numeracy and literacy, and many countries all over the world are introducing programming activities in education. In Italy, even if the introduction of CT and programming in schools is on the pipeline of policy makers, they have not yet been included in the curriculum guidelines. Consequently, there is a strong case for analyzing how programming can be integrated at early stages into the Italian compulsory education. Starting from the constructivist tradition, a study spanning over several school years has been organized aiming at defining and testing a programming learning path for primary schools. The learning path takes into account children's interests, stimulating their passions and creativity. Students are engaged on projects that are meaningful for them, while teachers take advantage of the situations that spontaneously arise to guide students' attention on specific computational concepts. The learning path is being iteratively refined through a field experiment involving a primary school over a four year period. The study aims to the following questions:• Under which conditions can age-appropriate programming activities, allowing for individual differences in learning styles and approaches, work in primary school?• Which indications can the work performed provide to the sustainability of the programming activities when the researchers' support will come to an end?• Which elements of the study can provide suggestions for a wider introduction of programming in primary schools?Since the study is currently in its third year, this paper addresses the first two research question, while only some initial considerations are provided for the third one."
Looking Ahead: Professional Development Needs for Experienced CS Teachers,"Kafai, Yasmin B. and Baskin, Jake and Fields, Deborah and Goode, Joanna and Twarek, Bryan and Yadav, Aman",2020,"As computer science is moving into K-12 education, most efforts have focused on getting new teachers into computer science or integrating computing within STEM topics. But one aspect that has received less attention, if any, is the continued professional development of experienced CS teachers. We know little about the particular learning needs of experienced CS teachers, knowledge that will be critical as the CS teaching force expands significantly in coming years. In this panel, we address this knowledge gap from the perspective of teacher education research and professional development-what we need to know about deepening teachers' pedagogical practices and content knowledge-an understanding that will be instrumental for retaining and enriching teachers in CS education."
Looking for Pets: a game for the logical reasoning development,"Pessoa, Marcela and Alencar, Luiz Fábio and Araújo, Lucas and Melo, Rafaela and Pires, Fernanda",2019,Sin Valor
LP Based Integration of Computing and Science Education in Middle Schools,"Zhang, Yuanlin and Wang, Jianlan and Bolduc, Fox and Murray, William G.",2019,"There is a consensus on integrating computing with STEM teaching in K-12. However, very little is known about the integration. In this paper, we propose a novel framework for integrating science and computational thinking teaching using Logic Programming. We then develop and implement two 8-session integration modules on chemistry and physics for 6th and 7th graders. Pre- and post- tests, class observations and interviews show the feasibility of the framework in terms of 1) development and implementation of the modules, and 2) the students' learning outcomes on science content and Computational Thinking, and their acceptance of the integration."
Machine Learning based Fast Reading Algorithm for Future ICT based Education,"Jeon, Hyonam and Oh, Hayoung and Lee, Jaejun",2018,Sin Valor
Making Abstraction Concrete in the Elementary Classroom,"Hung, Eping E. and Vanderberg, Maggie and Krause, Gladys and Skuratowicz, Eva",2024,"In recent years, several research projects have introduced elementary school teachers to computational thinking as a first step in familiarizing students with computer science concepts at an early age. A consistent challenge reported in these initiatives is teaching abstraction. This position paper offers preliminary recommendations for abstraction pedagogy in elementary education. These suggestions stem from an analysis of unplugged abstraction examples showcased during a summer institute on computational thinking.By examining commonalities among abstraction examples, key parts of the process of abstraction pertinent to elementary classrooms were identified: (1) the abstraction process is typically performed in reverse since students in elementary school are given abstractions to start with; (2) evaluation of concrete details to support an abstraction is part of the filtering step of abstraction; (3) in the absence of evaluation criteria, pattern recognition can be applied to a set of concrete examples to extract characteristics of an abstraction; and (4) abstractions can be supported by not only concrete details but other abstractions which students will need to develop an understanding of before fully comprehending the initial concept.Preliminary recommendations for abstraction instruction include having students evaluate examples; engaging students in pattern recognition to extract characteristics of an abstraction; developing student fluency in describing abstractions, their supporting examples, and characteristics; and assessing students by asking not only for examples of abstractions, but for their characteristics as well."
Making CS Education Relevant to the 21st Century: Blending Critical Thinking into an Introductory Programming Course,"Kalluri, Balaji and Prasad, Prajish and Sharma, Prakrati",2023,"In this poster, we describe a theoretical model aimed at developing future human computational thinking in students. We describe a blended pedagogy drawing approaches from multiple disciplines such as social sciences, design, ethics, and computing to develop a new undergraduate introductory programming course. We describe how we introduced this pedagogy in an introductory programming course, taught in a university in India and summarise our preliminary findings."
Making programming more conversational,"Repenning, Alexander",2011,Sin Valor
Making the Transition to Text-Based Programming: The Pilot Evaluation of a Computational Thinking Intervention for Primary School Students,"Kunz, Katrin and Moeller, Korbinian and Ninaus, Manuel and Trautwein, Ulrich and Tsarava, Katerina",2023,"Programming and computational thinking (CT) have become important topics in elementary education and are being implemented by national curricula, extracurricular programs, and informal learning environments. Most related research and implementation is mainly focused on block-based programming (BBP). However, BBP can lead to bad programming habits and a later transition to text-based programming (TBP) has been shown to be difficult for students, as they can lose confidence and motivation. Thus, we developed a course to facilitate the transition from BBP to TBP and foster CT while also promoting motivation and students’ programming-related self-concept. We considered data from 27 fourth-grade students aged 9 to 10, who participated in the course as part of an extracurricular enrichment program. In a pre-/post-test design, we assessed CT and its cognitive correlates such as non-verbal visuospatial reasoning, verbal reasoning, arithmetic competencies as well as the student’s motivation and attitude towards programming. Results indicated improved students’ CT, arithmetic, and non-verbal visuospatial reasoning. Furthermore, the transition to TBP did not significantly reduce students’ motivation for programming. Taken together, these findings indicate that the developed intervention may be helpful to facilitate the transition from BBP to TBP while keeping the students motivated and fostering CT."
Map-Blocks: Playing with Online Data and Infuse to Think in a Computational Way,"Vinayakumar, R and Soman, KP and Menon, Pradeep",2018,Sin Valor
Mapping computational thinking mindsets between educational levels with cognitive network science,"Stella, M and Kapuza, A and Cramer, C and Uzzo, S and Latora, Vito",2021,Sin Valor
Mastering basic Sorting Algorithms through Computational Thinking Activities for Everyone,"Silapachote, Piyanuch and Srisuphab, Ananta and Hoonlor, Apirak and Sunetnanta, Thanwadee",2024,Sin Valor
Math on a sphere: using public displays to support children's creativity and computational thinking on 3D surfaces,"Hsi, Sherry and Eisenberg, Michael",2012,"Math on a Sphere (MoS) is a newly developed Web-based environment that enables children to imagine, program, and share creative designs on a public spherical display, the ""Science on a Sphere"" system created by the National Oceanic and Atmospheric Administration (NOAA). The MoS software, similar in spirit to the Logo language, was installed at an exhibit located in the Lawrence Hall of Science at the University of California at Berkeley and at the Fiske Planetarium at University of Colorado, Boulder. Twenty-five children ages 8 to 13 in two cohorts tested the MoS software during a half-day workshop held at the Lawrence Hall. In addition to using the MoS software to create beautiful and original works of art, children also engaged in hands-on crafts and inquiry-based math activities to further promote learning of spherical geometry and computational thinking. MoS software workshop had a positive impact on children's engagement, but had mixed results about their understanding of geometry as evidenced by direct observations and results from pre/post-surveys, which are reported here."
Mathematical modeling with R: embedding computational thinking into high school math classes,"Wiedemann, Kenia and Chao, Jie and Galluzzo, Benjamin and Simoneau, Eric",2020,Sin Valor
Mathematics and programming: marriage or divorce?,"de Souza, Lucas Mendonça and Ferreira, Bernardo Martins and Félix, Igor Moreira and de Oliveira Brandão, Leônidas and Brandão, Anarosa Alves Franco and Pereira, Patricia Alves",2019,Sin Valor
Measuring Cognitive Loads while Learning Computational Statistics,"Quintero-Manes, Roxana and Vieira, Camilo and Hernandez-Vargas, Natalia",2022,Sin Valor
Measuring the impact of computational thinking workshops on high school teachers,"Morreale, Patricia and Goski, Catherine and Jimenez, Luis and Stewart-Gardiner, Carolee",2012,"Computational thinking knowledge is used to develop solutions for computational problems, such as those found in mathematics and computer science. Over the past several years, workshops on computational thinking and computer science tools have been provided to high school teachers, most recently as part of Google's Computer Science for High School (CS4HS) initiative. The lasting impact of these workshops on the high school teachers and their students after the teacher returns to the classroom is not well known. The computational thinking knowledge and tools of high school teachers in a regional area of the U. S. was assessed during two workshops, one held several months after the other, to determine the utility and benefit, if any, of the workshops for the teachers and their students. The results of this research contribute to understanding the perception of computational thinking and computer science among high school teachers, as well as to the identification of the best tools and resources which high school teachers are most likely to use and which can be used to implement computational thinking in core curriculum standards, including mathematics."
"Measuring understanding, recognition and construction of computational rules in elementary school using Microsoft's Kodu Game Lab","Aggarwal, Ashish and Gardner-McCune, Christina",2016,Sin Valor
Meri Kahani: A Gamified Solution to Teach Computational Thinking to Female Teenagers in Low Resource Communities,"Masood, Mehreen and Khawaja, Mujtaba Ahmed and Sharif, Muhammad Shehryaar and Iqbal, Omer and Mehmood Butt, Momin and Shahid, Suleman",2021,"This paper describes the design of a mobile based gaming application - Meri Kahani - created to teach computational thinking skills to school going teenagers in underdeveloped areas of Pakistan. We explore the use of gamification to teach computational thinking through level-based learning in a Pakistani context. This paper's final design demonstrates how gamified learning, rewarding techniques, and feminine themes can be used to attract female teenagers towards computational thinking. This paper also discusses the evaluation and usability testing results conducted on 16 school-going female teenagers. We hope that through this study, we have taken the first step towards nurturing an interest in young females for computational thinking and overcoming the gender gap that adversely affects female involvement in Computer Science in Pakistan."
Microworlds for Programming Bebras Tasks in Czechia,"Van\'{\i}cek, Jir\'{\i} and Simandl, V\'{a}clav",2023,"The poster presents Bebras informatics tasks based on assembling a program from blocks. These tasks were created in templates based on Papert's microworlds and they familiarize pupils with classical problems used in CS education. In these microworlds, pupils create and run a program which controls a sprite in order to solve a problem emerging from a described situation.We created four such templates. Each template was supplied with its own set of tasks, differing in a topic, a subject matter and graphics. We created more than 100 tasks in total. As pupils go through each task, they repeatedly run the created program while the system provides them with feedback. Some of the tasks were included into the Czech Bebras Challenge, whereas from others we created sets of tasks (like Hour of code) usable in lessons.More than 430 000 pupils aged 10 to 19 from hundreds of Czech schools tried these tasks in 2021, 2022. Our experience shows that these tasks with their interactivity can attract pupils to the contest and thus can contribute to advance pupils' informatics skills."
MiDroid: An open mobile platform for learning focused on microcontrollers' education,"Ariza, Jonathan Álvarez",2017,Sin Valor
Mind the Gap: Exploring Differences in Student Perceptions of Belonging and Inclusion in Computer Science,"von Briesen, Elizabeth and Duvall, Shannon and Mattfeld, Ryan and Spurlock, Scott",2024,"To aid in understanding the current climate of diversity and inclusion in the Computer Science Department at our university, we developed a survey to identify and evaluate factors related to these topics. The survey was administered before the third week of participating Spring 2024 courses, which ranged from introductory classes open to any student from any major, to advanced classes taken as part of the computer science major course sequence. Our findings show that students expressed feeling more confident in their potential for success in class versus as a future professional in the field. They reported more positive interactions with faculty than with peers. Students also indicated a desire for more structured opportunities to connect with peers, and commented positively on current departmental efforts to make our common areas more welcoming. The survey results provide a baseline that we can use in the future to evaluate the impact of curricular interventions on student perceptions of inclusion and belonging. We also plan to evaluate how enhanced support for student well-being in the department and within student groups impacts perceptions and retention of underrepresented groups."
Mind the Gap: The Illusion of Skill Acquisition in Computational Thinking,"Bao, Yeting and Hosseini, Hadi",2023,"With the advent of online educational platforms and the advances in pedagogical technologies, self-directed learning has emerged as one of the most popular modes of learning. Distance education---elevated by the COVID-19 pandemic---involves methods of instruction through a variety of remote activities which often rely on educational videos for mastery. In the absence of direct student engagement, the asynchronous nature of remote activities may deteriorate the quality of education for learners. Students often have an illusion of skill acquisition after watching videos, which results in overestimation of abilities and skills. We focus on the efficacy of skill acquisition through interactive technologies and assess their impact on computational thinking in comparison with delivery through other traditional media (e.g. videos and texts). In particular, we investigate the relationship between actual learning, perception of learning, and learners' confidence in adult learners. Our results reveal intriguing observations about the role of interactivity and visualization and their implications on the pedagogical design for self-directed learning modules."
"MIPRO 2019, May 20-24, 2019, Opatija Croatia Teaching of computer programming in Bulgarian primary school -- challenges and solutions","Tuparova, D.",2019,Sin Valor
MIRTO: an Open-Source Robotic Platform for Education,"Androutsopoulos, K. and Aristodemou, L. and Boender, J. and Bottone, M. and Currie, E. and El-Aroussi, I. and Fields, B. and Gheri, L. and Gorogiannis, N. and Heeney, M. and Micheletti, M. and Loomes, M. and Margolis, M. and Petridis, M. and Piermarteri, A. and Primiero, G. and Raimondi, F. and Weldin, N.",2018,"This paper introduces the Middlesex RoboTic platfOrm (MIRTO), an open-source platform that has been used for teaching First Year Computer Science students since the academic year 2013/2014, with the aim of providing a physical manifestation of Software Engineering concepts that are often delivered using only abstract or synthetic case studies. In this paper we provide a detailed description of the platform, whose hardware specifications and software libraries are all released open source; we describe a number of teaching usages of the platform, report students' projects, and evaluate some of its aspects in terms of effectiveness, usability, and maintenance."
Mixed Methods for the Assessment and Incorporation of Computational Thinking in K-12 and Higher Education,"Weese, Joshua Levi",2016,"A movement to include computer science in K-12 curriculum standards has sparked a significant interest in computational thinking (CT). This paper describes current and future work in the development of visual programming curricula for teaching CT at the K-12 level and self-efficacy surveys for evaluating the effectiveness of the curricula at fostering CT. Current work on a comprehensive system for automated extraction of assessment data for descriptive analytics and visualization is also described. To complement attitude surveys, a translation of Scratch to Blockly is proposed. Data on student programming behaviors at the collegiate level will be collected and quantitatively analyzed to help assess CT in support of self-efficacy."
ml-machine.org: Infrastructuring a Research Product to Disseminate AI Literacy in Education,"Bilstrup, Karl-Emil Kj\ae{}r and Kaspersen, Magnus H\o{}holt and Bouvin, Niels Olof and Petersen, Marianne Graves",2024,"ml-machine.org is a web- and micro:bit-based educational tool for building machine learning models designed to enable more widespread teaching of AI literacy in secondary education. It has been designed as a research product in collaboration with partners from the educational sector, including the Danish Broadcasting Corporation and the Micro:bit Educational Foundation. ml-machine.org currently has more than 5000 unique users and is used in schools and teacher training. It is publicly available and promoted on the broadcasting corporation’s platforms. We describe the two-year process of developing and disseminating ml-machine.org. Based on interviews with partners and educators, we report on how ml-machine.org supports inquiry into the adoption and appropriation of such educational tools. We also provide insights on working with formal education infrastructures in order to scale and integrate a research product into teacher practices. Based on these experiences, we propose infrastructure as a novel quality of research products."
Mobeybou for Computational Thinking: Fostering Expression Through Embodied Computing Interactions,"Saraiva, In\^{e}s and Martins, Nuno and Sylla, Cristina Maria",2023,"The impact of the COVID-19 crisis on education has opened new doors and accelerated change, and a learning opportunity has emerged towards the digital transformation of teaching models. Computing acquires a new relevance and fits into the plan to strengthen digital skills as a driver of digital knowledge, particularly relevant for children and young people. In parallel, both the close contact with computers allows the development of skills such as logical reasoning, critical thinking, creativity, communication and teamwork, and the very coexistence of citizens with digital technologies requires the prior acquisition of this knowledge, in order to be prepared to meet the new demands of modern society. Thus, the purpose of this paper is to introduce an ongoing research project that aims at developing young children's expression through embodied computing in order to enhance their digital knowledge, by adapting the digital manipulative (DM) Mobeybou for storytelling and narrative creation as a tool for promoting computational thinking (CT) and inherent competences through a bodily expression experience. The educational toolkit and base literature review are discussed, and the early prototypes of the programming language proposed are presented, as well as the ongoing and future work. With this initial work it was possible to conclude that computer programming has many benefits in fostering CT in children, alongside other cognitive skills, as well as the importance of stimulating children's expression and communication that are transversal to all areas of life. Therefore, computer programming will be used and incorporated in Mobeybou in order to achieve the research aims proposed in this paper and promote children's expression through CT development."
Mobile computational thinking with APP inventor 2,"Turbak, Franklyn and Pokress, Shaileen Crawford and Sherman, Mark",2014,"Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (local variables, improved handling of procedure and event parameters) and browser-based blocks editing. The workshop will focus on computational concepts relevant to mobile apps: event-based programming, location awareness, social computing, persistence and sharing, and leveraging the sensors and actuators of mobile devices. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. A laptop and gmail account are required for this workshop. Participants can borrow an Android device to use during the workshop, or they may use their own Android device if they have one."
Mobile computational thinking with app inventor 2 (abstract only),"Turbak, Franklyn and Martin, Fred and Pokress, Shaileen Crawford and Morelli, Ralph and Sherman, Mark and Wolber, David",2014,"Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216."
Model-based thinking and practice: a top-down approach to computational thinking,"Nowack, Palle and Caspersen, Michael E.",2014,"In this paper, we discuss using models and modeling in a new way to teach basic computing to pupils within the K-12 segment. We argue why we believe understanding and creating models are fundamental skills for all pupils as it can be characterized as the skill that enable us to analyze and understand phenomena as well as design and construct artifacts. We also try to characterize the essence of model-based thinking and practice. We propose that a strong focus on the relation between mental models (of real or imaginary systems) and computerized models (embedded in computer-based systems) could provide a new approach to teaching computing. This approach should clarify and make explicit the role of models in computing in connection with other subject areas. We believe that such an approach would strongly broaden the participation in computing, as it will allow more pupils to become active creators with computing."
Modeling as Computational Thinking Language: Developing a Reference Framework,"Sabitzer, Barbara and Demarle-Meusel, Heike and Rottenhofer, Marina",2020,"Modeling or building models is a widely spread concept that includes several competences relevant for every domain. Our Erasmus+ project ""Modeling at school"", hence, aims at integrating modeling techniques from the field of computer science such as class or activity diagrams in order to support teaching and learning in all subjects and levels of primary and secondary education. On the one hand, we introduce modeling as effective and brain-based learning strategy and, on the other hand, we use it as language that expresses, describes and trains computational thinking integrated in everyday life situations and topics. This paper describes the development of a reference framework following the Common European Framework of Reference for Languages (CEFR) that will serve as guideline and assessment tool for teachers without computer science background, who teach the Austrian curriculum ""Basic Digital Education""."
Modeling At School – On the Benefits and Skill Development of the Use of Modeling Diagrams at School,"Moreno-León, Jesús and Chushig, Cristian and Robles, Gregorio",2022,Sin Valor
Modeling of the System for Computational Thinking Automatic Assessment,"Masiulionyte-Dagiene, Vaida",2023,"The aim of the doctoral thesis is to model an automated computational thinking (CT) assessment system based on solving processes of the interactive tasks. Currently, a literature review and analysis has been carried out, which has shown that among current CT assessment tools most popular ones still remain different types of tests. A study, comparing the two computational thinking assessment tests has been conducted and it has been observed that using only the tests causes data loss as tests do not collect information on the solution processes. An experiment was carried out to collect and analyze action information while solving the task and using this data to extract the possible different solution methods of an interactive task."
Modeling the Growth and Spread of Infectious Diseases to Teach Computational Thinking,"Pellar-Kosbar, Meara and Gaines, Dylan and Monroe, Lauren and Rospierski, Alec and Martin, Alexander and Vigna, Ben and Stewart, Devin and Perttunen, Jared and Voss, Calvin and Pastel, Robert and Ureel, Leo C.",2021,"Modeling is commonly employed in school settings to help students develop an understanding of biological systems [3]. By inspecting and modifying the inner workings of their models, students become familiar with causal factors and how they impact the properties of the model. We believe that allowing students to tinker with computational models involves developing the same skills used in computational thinking, such as abstraction, decomposition, analysis, automation, and generalization. In this poster, we discuss the design and implementation of a simulation that models the growth and spread of a hypothetical disease. The goal is to help middle school students develop computational thinking skills while learning how a virus spreads through the human population."
Modeling the learning progressions of computational thinking of primary grade students,"Seiter, Linda and Foreman, Brendan",2013,"We introduce the Progression of Early Computational Thinking (PECT) Model, a framework for understanding and assessing computational thinking in the primary grades (Grades 1 to 6). The model synthesizes measurable evidence from student work with broader, more abstract coding design patterns, which are then mapped onto computational thinking concepts.We present the results of a pilot-test study of the PECT Model in order to demonstrate its potential efficacy in detecting both differences in computational thinking among students of various ages as well as any clear overall progressions in increasing computational sophistication. Results of this sort are vital for establishing research-based and age-appropriate curricula for students in the primary grades, i.e., developing non-trivial, challenging but not overly daunting lesson plans that utilize the cognitive development stage of each grade level most effectively."
Modifying Curriculum for Novice Computational Thinking Elementary Teachers and English Language Learners,"Saito-Stehberger, Dana and Garcia, Leiny and Warschauer, Mark",2021,"The demand for computational thinking (CT) problem solving abilities surge as every aspect of life becomes more dependent on complex digital technologies. Just as in math and language, a strong CT foundation needs to be established in early education in order for students to develop an instinctive CT perspective of the world. The urgent demand for CT instruction in elementary school quickly draws attention to the shortage of elementary school-level teachers qualified and interested in CT. Additionally, with a commitment to equity in the United States education system and knowledge of the high percentage of English language learning (ELL) students in schools, the obligation to create curricula that will provide access to CT knowledge, skills, and practices for elementary-level ELL students is loudly apparent. In response to these two needs, our team has adapted existing Scratch-based CT curriculum to support classroom teachers with minimal CT experience and to be more accessible to English language learners. The purpose of this paper is to share the framework that guided the curriculum adaptations, to describe the specific changes that were made, and to discuss discoveries made during the process. This journey may be helpful to anyone who is tasked with modifying a curriculum to meet the needs of novice content teachers and ELL students."
Motivation and Practices of Teaching Computational Social Science to Undergraduate Political Science Students,"Popov, Aleksandr",2023,"The introductory course in basics of programming aims to teach second-year political science students the basic skills of applied programming that are crucial for transferring their research ideas into computational models. As one of students' first interactions with computer science concepts, the course assists in overcoming their barriers in programming, and introduces them to ways of applying computational thinking. In addition, the course material can serve as a launching pad for further development in the areas of modelling social problems, its simulations and quantitative analysis. This paper presents course design considerations, shares findings in assignment design, and raises questions to consider when designing CS0 and CS1 courses for social science students."
Moving Beyond Game Design: Building Teacher Confidence with Scientific Modeling by Transitioning from Game Design to EcoSystem Programming,"Perrone Smith, Corrina and Repenning, Nadia",2024,"Scalable Game Design (SGD) instruction, vetted and researched over more than a decade, enables educators with little or no programming experience to teach students to program games with AgentCubes. SGD has been used successfully with learners from upper elementary grades to high school to motivate and teach computer science and STEM topics, including sophisticated techniques such as Artificial Intelligence.The concepts of Scalable Game Design (SGD), and the tools for Computational Thinking Patterns (CTPs), and Computational Thinking Pattern Assessment (CTPA) are directly applicable to satisfying Upper Elementary and Middle School CS and Science Standards. Common roadblocks teachers encounter with transitioning from game design to simulation programming will be explained with solutions, including classroom management tools, tutorial materials, and pedagogy will be presented."
Moving to Learn: Exploring the Impact of Physical Embodiment in Educational Programming Games,"Melcer, Edward",2017,"There has been increasing attention paid to the necessity of Computational Thinking (CT) and CS education in recent years. To address this need, a broad spectrum of animation programming environments and games have been created to engage learners. However, most of these tools are designed for the touchpad/mouse and keyboard, and few have been evaluated to assess their efficacy in developing CT/programming skills. This is problematic when trying to understand the validity of such designs for CS education, and whether there are alternative approaches that may prove more effective. My dissertation work helps address this problem. After creating a framework based on a meta-review that carefully dissects embodiment strategies in learning games, I am building and evaluating tangible and augmented reality versions of a CT game. I plan to examine how these different forms of physical interaction help to facilitate and enhance meaning-making during the learning process, and whether/how they improve related learning factors such as self-belief and enjoyment."
MPCT: media propelled computational thinking,"Freudenthal, Eric Andrew and Roy, Mary K. and Ogrey, Alexandria Nicole and Magoc, Tanja and Siegel, Alan",2010,"Media-Propelled Computational Thinking (MPCT - pronounced impact) is a course designed to introduce programming in the context of engaging problems in media computation, math, and physics. Programming concepts are introduced as incremental steps needed to solve pragmatic problems students already understand. The problems, graphical API, and hands-on program features are intended to expose fundamental concepts in mathematics and quantitative science.MPCT is offered in an entering students program for freshmen who plan to specialize in a variety of STEM (science, technology, engineering and math) and non-STEM subjects. The curriculum is intended to strengthen student intuition and interest in mathematical modeling and programming by engaging students in the direct manipulation of simple mathematical systems that model and display familiar physical phenomena. MPCT uses programs as concrete and manipulatable examples of fundamental concepts to engage a diverse range of students including women and underrepresented minorities.Variants of MPCT are being developed for high schools, and as a means to introduce computational science to upper division undergraduates studying non-computational STEM disciplines. This paper provides an overview of MPCT and representative problem studies including models of ballistics and resonant systems. The evaluation plan is described and very preliminary results are presented."
Multi-dimensional computer basic education practice and research,"Wang, Yizhi and Zhou, Wei and Lu, Lingyun",2017,Sin Valor
Multimodal CS Education Using a Scaffolded CSCL Environment,"Monahan, Robert and Vandenberg, Jessica and Gupta, Anisha and Smith, Andy and Elsayed, Rasha and Fox, Kimkinyona and Hubbard Cheuoua, Aleata and Ringstaff, Cathy and Minogue, James and Oliver, Kevin and Mott, Bradford",2023,"There is a growing need for 21st-century workers to be digitally literate and to possess computational thinking and collaborative problem-solving skills. Computer-supported collaborative learning (CSCL) focused on computational thinking can guide students toward the co-development of these skills. In this work, we present our approach to integrating virtual and physical learning modalities into InfuseCS, a CSCL environment. InfuseCS uses problem-based learning scenarios to situate upper elementary school students (ages 8 to 11) in a CSCL setting to foster their computational thinking and science knowledge construction as they collaborate to create digital narratives."
Multiple Programming Languages for Improving Computational Thinking in CS1,"Lee, Dongeun and Hu, Kaoning and El Ariss, Omar and Kwon, Kibum",2023,"Computational thinking can be deemed as thinking in algorithmic way, with which one can transpose given problems into computer algorithms. Since computational thinking requires abstract reasoning, it should not depend on particular programming languages. Unfortunately, introductory programming courses (CS1) often give students false impression that their goals are to teach a particular programming language. This study shares the design of new pedagogy for CS1 that removes dependency on a particular language and promotes computational thinking by teaching multiple programming languages simultaneously. Specifically, chosen programming languages range from low-level to high-level to expose students to different levels of abstraction from the details of computer architecture. Initial student survey responses from both trial and control groups show that there are significant improvements for the trial groups."
Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab,"Aggarwal, Ashish",2017,"Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague &amp; Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs."
Neuroeducation: Guidelines for Computational Thinking training,"Araújo, Cristiana and Henriques, Pedro Rangel and Cerqueira, João José",2023,Sin Valor
New Horizons in the Assessment of Computer Science at School and Beyond: Leveraging on the ViVA Platform,"Giordano, Daniela and Maiorana, Francesco and Csizmadia, Andrew Paul and Marsden, Simon and Riedesel, Charles and Mishra, Shitanshu and Vinikienundefined, Lina",2015,"A revolution is taking place across Europe and worldwide in how we teach our children about computing, in primary and secondary school. Out goes ICT and how to use Microsoft Office; in comes coding and computer science. Assessment has a crucial role to play in this revolution. If teachers use low-quality assessment instruments we will end-up teaching the wrong subject; and viceversa. This paper reviews the state of the field, and makes concrete, achievable proposals for developing shared, high quality assessments for computer science. Central to this proposal is the collaborative platform VIVA (the Vilnius collaboratively coded and Validated computer science questions/tasks for Assess- ment). Two requirements are key to VIVA: 1) support for multiple competency frameworks, so that the contributors can meta-tag resources with respect to the framework they are most familiar with; and 2) support for crowdsourcing the validation of each question/task and its mapping to competencies. The use of a taxonomy of questions/tasks type that has been mapped to computational thinking concepts and to a competency framework is proposed. Some seed questions are already available in the online platform prototype, and various supporters have granted permission to use large questions banks. The design requirements of a full implementation of the VIVA platform for a modern and effective approach to assessment including support for digital badges, are outlined; and some preliminary results from a survey administered to the initial contributors to VIVA are presented."
NoBug’s Snack Bar: A Computational Thinking Serious Game as an Educational Platform,"Vahldick, Adilson and Farah, Paulo Roberto and Marcelino, Maria José and Mendes, António José Nunes",2019,Sin Valor
NOTES,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Observations on the Gaps and Opportunities for Geo computation,"Sinton, Diana S.",2019,Traditional geographical approaches to acquiring new knowledge and understanding problems varies significantly from the primary modus operandi of computational thinking that is practiced by computer scientists. These differences have contributed to a persistent absence of geo computational courses within academic geography departments and an underdeveloped and limited understanding of spatial thinking by computationally-minded scholars.
Observing Computational Thinking Skills of Kindergarten Children,"Meyer-Baron, Larissa and Stieger, Ramona and Waldvogel, Bettina and Schumann, Nicole and Ruedisueli, Cornelia and Mayr, Franziska",2022,"Computational Thinking skills along with reading, writing, and calculating skills are basic skills for children’s future. Computational Thinking has much in common with problem-solving and creative thinking in general. With regard to Karl Popper ""all life is problem-solving"" [26], this contribution focuses on the common features of problem-solving and unplugged Computational Thinking, by using a special set of Computational Thinking tasks (INGA-Box). Choosing a mix of deductive and inductive approach, a classification scheme for observing the development of Computational Thinking in kindergarten was developed and evaluated with first datasets."
On computational thinking as a universal skill: A review of the latest research on this ability,"Moreno-León, Jesús and Román-González, Marcos and Robles, Gregorio",2018,Sin Valor
"On Computational Thinking, Inferential Thinking and Data Science","Jordan, Michael I.",2016,"The rapid growth in the size and scope of datasets in science and technology has created a need for novel foundational perspectives on data analysis that blend the inferential and computational sciences. That classical perspectives from these fields are not adequate to address emerging problems in ""Big Data"" is apparent from their sharply divergent nature at an elementary level-in computer science, the growth of the number of data points is a source of ""complexity"" that must be tamed via algorithms or hardware, whereas in statistics, the growth of the number of data points is a source of ""simplicity"" in that inferences are generally stronger and asymptotic results can be invoked. On a formal level, the gap is made evident by the lack of a role for computational concepts such as ""runtime"" in core statistical theory and the lack of a role for statistical concepts such as ""risk"" in core computational theory. I present several research vignettes aimed at bridging computation and statistics, including the problem of inference under privacy and communication constraints, and ways to exploit parallelism so as to trade off the speed and accuracy of inference."
"On Computational Tools, Computational Thinking and Computational Methods","Zhang, Xiaofeng and Zou, Hailin",2009,Sin Valor
On Pre-requisite Skills for Universal Computational Thinking Education.,"Cole, Elizabeth C.",2015,"Computational thinking (CT) has been hailed as valuable to everyone in the population, and if so, it should be taught to all. This research builds on existing work identifying pre-requisite skills for developing CT skills, referred to here as foundational CT skills. To add weight to the validity of the ""CT for all"" claim, this research attempts to determine whether foundational CT skills are of value to non-IT industry and for pupils elsewhere in their studies. The foundational CT skills will be trialled with pupils in the 5-8 yr age range and evaluated for their contribution to the pupils' ongoing education. Findings will be used to inform the curriculum and help to develop worthwhile computational thinking skills irrespective of the child's chosen career."
On Teaching Novices Computational Thinking by Utilizing Large Language Models Within Assessments,"Hassan, Mohammed and Chen, Yuxuan and Denny, Paul and Zilles, Craig",2025,"Novice programmers often struggle to develop computational thinking (CT) skills in introductory programming courses. This study investigates the use of Large Language Models (LLMs) to provide scalable, strategy-driven feedback to teach CT. Through think-aloud interviews with 17 students solving code comprehension and writing tasks, we found that LLMs effectively guided decomposition and program development tool usage. Challenges included students seeking direct answers or pasting feedback without considering suggested strategies. We discuss how instructors should integrate LLMs into assessments to support students' learning of CT."
On the Automatic Assessment of Computational Thinking Skills: A Comparison with Human Experts,"Moreno-Le\'{o}n, Jes\'{u}s and Rom\'{a}n-Gonz\'{a}lez, Marcos and Harteveld, Casper and Robles, Gregorio",2017,"Programming and computational thinking skills are promoted in schools worldwide. However, there is still a lack of tools that assist learners and educators in the assessment of these skills. We have implemented an assessment tool, called Dr. Scratch, that analyzes Scratch projects with the aim to assess the level of development of several aspects of computational thinking. One of the issues to address in order to show its validity is to compare the (automatic) evaluations provided by the tool with the (manual) evaluations by (human) experts. In this paper we compare the assessments provided by Dr. Scratch with over 450 evaluations of Scratch projects given by 16 experts in computer science education. Our results show strong correlations between automatic and manual evaluations. As there is an ample debate among educators on the use of this type of tools, we discuss the implications and limitations, and provide recommendations for further research."
On the Epistemological Aspects of Geo-Computational Thinking and Curriculum Design,"Xiao, Ningchuan",2019,What should we teach students who are interested in geospatial data science and what should an undergraduate or graduate curriculum in this area look like? This paper addresses such issues from an epistemological perspective and discusses the critical linkages among different fields that are related to geo computational thinking.
On the Training Model of Interdisciplinary Talents by Computational Thinking and General Education Program,"Quan, Yujuan and Liu, Xiaoli and Lin, Longxin",2019,"With the rapid development of information technology, it is extremely urgent to cultivate compound talents with innovative thinking and innovative ability from the perspective of talent cultivation. This paper mainly starts from the reform of the general computer education course, puts forward the general computer education innovation scheme for interdisciplinary talent cultivation. Stressing on training model of interdisciplinary talents, the reform plan is elaborated from education model, curriculum system, teaching content and practice base construction, etc., and then concrete implementation methods are given from these four aspects accordingly."
Once Upon a Time there was an Ozobot: Storytelling with Educational Robots,"Hinterplattner, Sara and Schmidthaler, Eva and Skog\o{}, Jakob Sebelin and Leitner, Sarah and Sabitzer, Barbara",2024,"This paper shows a way to introduce computational thinking in early childhood teaching based on scientific results within Neurodidactics. This approach offers children to explore and develop their creativity. Aiming to raise the children's interest in STEAM and to prevent prejudices in this field, the educational Robots, Ozobots, can be used in elementary and primary school to tell fairy tales. In order to connect basic computer science concepts by means of Storytelling, a workshop for very young researchers was designed and presented."
OntoCnE &amp; Neuroeducation Guidelines: An approach to developing Computational Thinking,"Ara\'{u}jo, Cristiana and Henriques, Pedro Rangel and Cerqueira, Jo\~{a}o Jos\'{e}",2025,"Computer Programming (CP) is difficult to teach and learn. Many students who enroll in CP courses have difficulty learning to program, as they have deficits in problem-solving skills and are unable to understand abstract programming concepts. Some studies also state that teaching methods are often not the most appropriate as they are not personalized to each student’s needs and do not complement their learning styles. We believe that Computational Thinking (CT) can help alleviate the difficulties in learning to program, especially if it is developed from an early age. However, it is also crucial that teachers use effective methods to help their students develop CT skills. There are several Learning Resources (LR) (digital or paper format) to develop CT skills, however, we argue that Neuroeducation can contribute to improving the effectiveness of these LR in the teaching and learning process. The evidence about the brain’s learning process can be transformed into principles applicable in Education (Neuroeducation). To understand how we could train CT at various levels of education we built an ontology, OntoCnE, that describes the CT and CP domains. OntoCnE is composed of 3 layers that define: how to develop CT; which concepts should be taught at each level of education; and appropriate training materials. This paper aims to present a CT development approach based on this ontology together with Neuroeducation guidelines. The result of our research is the fourth layer for OntoCnE, which defines the Neuroeducation guidelines to characterize the materials. To illustrate our proposal, we will use LR PathIt as a case study. This approach can contribute to innovative and more efficient training of CT."
"OntoCnE, characterizing Learning Resources for training Computational Thinking","Araújo, Cristiana and Henriques, Pedro Rangel and Cerqueira, João José",2023,Sin Valor
Opening the Black Box: Investigating Student Understanding of Data Displays Using Programmable Sensor Technology,"Gendreau Chakarov, Alexandra and Biddy, Quentin and Jacobs, Jennifer and Recker, Mimi and Sumner, Tamara",2020,"This paper describes the design and classroom implementation of a week-long unit that aims to integrate computational thinking (CT) into middle school science classes using programmable sensor technology. The goals of this sensor immersion unit are to help students understand why and how to use sensor and visualization technology as a powerful data-driven tool for scientific inquiry in ways that align with modern scientific practice. The sensor immersion unit is anchored in the investigation of classroom data where students engage with the sensor technology to ask questions about and design displays of the collected data. Students first generate questions about how data data displays work and then proceed through a set of programming exercises to help them understand how to collect and display data collected from their classrooms by building their own mini data displays. Throughout the unit students draw and update their hand drawn models representing their current understanding of how the data displays work. The sensor immersion unit was implemented by ten middle school science teachers during the 2019/2020 school year. Student drawn models of the classroom data displays from four of these teachers were analyzed to examine students' understandings in four areas: function of sensor components, process models of data flow, design of data displays, and control of the display. Students showed the best understanding when describing sensor components. Students exhibited greater confusion when describing the process of how data streams moved through displays and how programming controlled the data displays."
Opportunities and Challenges of Teaching Machine Learning as a Design Material with the micro:bit,"Bilstrup, Karl-Emil Kj\ae{}r and Kaspersen, Magnus H\o{}holt and S\o{}rensen, Marie-Louise Stisen Kjerstein and Petersen, Marianne Graves",2022,"There has been a growing focus on preparing children for navigating a future where digital technologies, such as Machine Learning (ML), are present in both society and personal life. In order to let students explore how ML is embedded into our infrastructure, we designed ml-machine.org, an educational tool for creating ML models with the micro:bit, and incorporating them into interactive systems, thus making ML a design material. Through an in-situ pilot study in an 8th grade classroom we demonstrates that students were able to redesign everyday objects around the possibilities and limitations imposed by ML, but that they struggled to understand more advanced parts of ML such as data representation. Based on these experiences we discuss focus areas for future directions of the tool: Enriching machine learning as a design material; exposing machine learning design practices; addressing the difficult parts."
Optimizing Network Management and Virtualization Using Machine Learning Approach: Network Slice Prediction,"Akinyemi, Lateef Adesola and Oshinuga, Olamide Peter and Oladejo, Sunday Oladayo and Ekwe, Stephen Obono and Sumbwanyanbe, Mbuyu and Mnkandla, Ernest and Shoewu, Oluwagbemiga Omotayo",2024,Sin Valor
Orienting learners and teachers in introductory programming classes: the ABC Framework,"Cutts, Quintin",2024,"This practice paper presents a framework that has been successfully used in introductory programming classes to orient students to the nature and purpose of programming, and teachers to the multiple aspects of programming education. Orientation was one of the five key difficulties for novices identified in du Boulay’s landmark 1986 paper, and it can still be an issue for both incoming students and new computing teachers. The framework, known as ABC, presents computing as a modelling activity, with: a multitude of possible problem/task domains, or Application Areas (A); sets of Building Blocks (B), such as programming languages and other computing systems, which can be used for model building; and a set of skills enabling the Creative Construction (C) of a solution, or model, of a problem/task in a particular application area, using a particular building block system. How the ABC Framework can be used to help orient students and structure learning and teaching is presented, as well as insights derived from students and teachers of an introductory programming course where this approach is used."
"P12 Computing in Italy, England and Alabama, USA","Maiorana, Francesco and Csizmadia, Andrew P. and Richards, Gretchen M.",2020,"It is recognized that Computing requires many competencies covering a wide range of domains exhibiting an impressive changing rate. This paper examines three primary competencies, which are: 1) Algorithms, Programming, Data, and Computational Thinking (CT); 2) Networks, Internet and Security; and 3) Ethics. Due to the standards and relationship of competences, the authors categorized, algorithms, programming, data and CT together. Thus, we leveraged national guidelines in Italy, mandatory national computing curriculum in England, and state guidelines in Alabama, USA in conjunction with ACM computing frameworks. The primary lessons learned from comparing computing curricula, and implications for implementing computing education curriculum are discussed."
PACT: A Citizen Science Project for Computing Education,"da Silva, Braz Araujo and da Costa Cavalheiro, Simone André and Foss, Luciana and Fleischmann, Ana Marilza Pernas and Garcez, Andrea Volz",2021,Sin Valor
Pair-Programming Curriculum Development of Motion-Based Game for Enhancing Computational Thinking Skills,"Chang, Chih-Kai and Tsai, Yu-Tzu",2018,Sin Valor
Parallel computational thinking,"Kirkpatrick, Keith",2017,Applications must be programmed to process instructions in parallel to take full advantage of the new multicore processors.
Parallel programming course development based on parallel computational thinking,"Chen, Juan and Shen, Li and Yin, Jianping and Zhang, Chunyuan",2018,"Teaching and training for high-performance computing in our college could not catch up with HPC research level. Thus, it is imperative to promote teaching reform on parallel computing course in our college. Our first parallel programming course is mainly for the first-grade graduate students majoring in CS and related branches with no previous HPC training. The goal is to teach them basic parallel programming methods, parallel thinking and parallel problem solving methodology by coding on a real supercomputer; let the students learn some representative parallel application development issues and some big challenges in HPC by project practice. In this article, we will present our course design objective, principles, practical method and outcome. Particularly, programming practice methodology, project organization, incentive mechanism and assessment methods in project practice will be illustrated. Finally, we present some quantitative findings. According to the feedback, our first parallel programming course achieves the effectiveness on inspiring students' enthusiasm for programming and improving students' abilities for problem solving."
Parental Involvement in Computational Thinking Education: A Systematic Review,"Cai, Haiyan and Wong, Gary K. W.",2022,Sin Valor
Participatory Design Sprints - Employing PD Principles in a Condensed Format,"Dindler, Christian and Iversen, Ole Sejer and Kanstrup, Katrine Holm and Van Mechelen, Maarten and Wagner, Marie-Louise",2024,"Most Participatory Design processes stretch for months or years as they pursue ideals related to empowerment, mutual learning and democracy. While this approach has demonstrated success as reported in countless PDC papers it is inherently resource intensive and potentially difficult to adopt in settings beyond research. In this paper, we explore the concept of Participatory Design Sprints and discuss to what extent it is possible to execute very condensed processes while still committing to core Participatory Design principles. We explore this question by reporting from 11 cases where we engaged in condensed Participatory Design processes with schools and municipalities to establish makerspaces as an educational facility. We conclude the paper by discussing the potentials of Participatory Design sprints and outline avenues for future work."
Patterns in Elementary-Age Student Responses to Personalized &amp; Generic Code Comprehension Questions,"Salac, Jean and Jin, Qi and Klain, Zipporah and Turimella, Saranya and White, Max and Franklin, Diana",2020,"The CS community has struggled to assess student learning at the K-8 level, with techniques ranging from one-on-one interviews to written assessments. While scalable, automated techniques exist for analyzing student code, a scalable method for assessing student comprehension of their own code has remained elusive. This study is a first step in bridging the gap between the knowledge gained from interviews and the time efficiency and scalability of written assessments and automated analysis. The goal of this study is to understand how student answers on various types of questions differ depending on whether they are being asked about their own code or generic code. We find that while there were no statistically-significant differences in overall scores, questions about generic and personalized code of comparable complexity are far from equivalent. Our qualitative analyses revealed interesting patterns in student responses, inviting further research into this assessment technique. In particular, students answered differently from students with generic code when presented with individual blocks from their code taken out of context and placed into different code snippets, and students answered in a way that demonstrates a functional, instead of structural, understanding on Explain in Plain English (EiPE) questions."
PC-01: Introduction to computational thinking: Educational technology in primary and secondary education,"Basogain, Xabier and Olabe, M. A. and Olabe, Juan Carlos and Ramírez, R. and Del Rosario, M. and Garcia, J.",2016,Sin Valor
Pencil Puzzles for Introductory Computer Science: an Experience- and Gender-Neutral Context,"Butler, Zack and Bezakova, Ivona and Fluet, Kimberly",2017,"The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment."
"People, Ideas, Milestones: A Scientometric Study of Computational Thinking","Saqr, Mohammed and Ng, Kwok and Oyelere, Solomon sunday and Tedre, Matti",2021,"The momentum around computational thinking (CT) has kindled a rising wave of research initiatives and scholarly contributions seeking to capitalize on the opportunities that CT could bring. A number of literature reviews have showed a vibrant community of practitioners and a growing number of publications. However, the history and evolution of the emerging research topic, the milestone publications that have shaped its directions, and the timeline of the important developments may be better told through a quantitative, scientometric narrative. This article presents a bibliometric analysis of the drivers of the CT topic, as well as its main themes of research, international collaborations, influential authors, and seminal publications, and how authors and publications have influenced one another. The metadata of 1,874 documents were retrieved from the Scopus database using the keyword “computational thinking.” The results show that CT research has been US-centric from the start, and continues to be dominated by US researchers both in volume and impact. International collaboration is relatively low, but clusters of joint research are found between, for example, a number of Nordic countries, lusophone- and hispanophone countries, and central European countries. The results show that CT features the computing’s traditional tripartite disciplinary structure (design, modeling, and theory), a distinct emphasis on programming, and a strong pedagogical and educational backdrop including constructionism, self-efficacy, motivation, and teacher training."
Performance-based evaluation of computational thinking skills using machine learning,"Karakaş, Elif and Turhan Yöndem, Meltem",2020,Sin Valor
"Personalized Assessment Worksheets for Scratch (PAWS): Exploring a Bridge between Interviews, Written Assessments, and Artifact Analysis","Salac, Jean",2019,"The computer science community has struggled to assess student learning, especially at the early elementary level. Prior work has included one-on-one interviews, written assessments, and artifact analysis, each with their own benefits and drawbacks. Through our Personalized Assessment Worksheets for Scratch (PAWS) tool, we explore personalized assessments as an assessment technique that lies in between interviews, written assessments, and artifact analysis. PAWS creates personalized written assessments that integrates code from student Scratch projects. We hope that our PAWS tool, and more generally personalized assessments, will lead to an assessment technique that is both more accurate than written assessments and artifact analysis, and less time-consuming than interviews."
Personalized contents based on cognitive level of student's computational thinking for learning basic competencies of programming using an environment b-learning,"L\'{o}pez, Arturo Rojas and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2016,"The main objective of the research is to determine the efficiency of using an environment b-learning in the acquisition of basic skills of programming though customizing the content for each student, to achieve a set of activities that can be used will be designed in the Moodle platform and contribute to teaching an initial programming course, considering three skill levels (basic, intermediate and advanced) of computational thinking of students. A mixed methodology approach will be implemented to achieve the objectives. The quantitative approach, whose characteristics using statistical measure phenomena, experimentation and use cause-effect analysis allow a sequential, deductive and testing process in generating results. The qualitative approach is conducted basically in natural environments and meanings are extracted from data allow a process that context the phenomenon and depth of ideas. To measure the cognitive level of students in computational thinking, instruments will be designed based on the bank of items released by the Computer Olympiad Talent Search in order to have reliable instruments (international proposal), valid (measures learning) and objectives (it focuses on the concept to measure) that they match with contents of subject. The main result is to generate personalized education, a learning experience that contributes to student motivation in tune with the academic goals of initial programming courses."
Personalized education using computational thinking and b-learning environment: classroom intervention,"Rojas-L\'{o}pez, Arturo and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2017,"The percentages of 1dropout, accreditation and average grade of students that study university courses of Methodology of programming and Programming of first and second semester of career of Information and Communication Technologies in the Technological University of Puebla are not favorable and represent a problem to be solved by academic team, for the above, the main objective of present study is to show results of interventions carried out in front of a group of educational strategies that allowed to have better percentages in comparison with those obtained in the last 8 years. The first intervention involved evaluation of computational thinking through abilities of Generalization, Decomposition, Abstraction, Evaluation and Algorithmic Design, then students were offered 10 learning scenarios for Methodology of programming course. In the second intervention, 4 elements were manipulated to offer options in course of Programming, which were contents, modes of work, rhythms and time, and evaluation. In both interventions, use of Moodle platform allowed to expose learning contents and to have an appropriate context chosen by students. The main result was to generate personalized education as well as a learning experience that contributed to motivation of student in harmony with academic goals of initial programming courses."
Personalized Parsons Puzzles as Scaffolding Enhance Practice Engagement Over Just Showing LLM-Powered Solutions,"Hou, Xinying and Wu, Zihan and Wang, Xu and Ericson, Barbara J.",2025,"As generative AI products could generate code and assist students with programming learning seamlessly, integrating AI into programming education contexts has driven much attention. However, one emerging concern is that students might get answers without learning from the LLM-generated content. In this work, we deployed the LLM-powered personalized Parsons puzzles as scaffolding to write-code practice in a Python learning classroom (PC condition) and conducted an 80-minute randomized between-subjects study. Both conditions received the same practice problems. The only difference was that when requesting help, the control condition showed students a complete solution (CC condition), simulating the most traditional LLM output. Results indicated that students who received personalized Parsons puzzles as scaffolding engaged in practicing significantly longer than those who received complete solutions when struggling."
"Phogo: A low cost, engaging and modern proposal to learn how to program","Gonzalez-Sacristan, Carlos and Garcia-Saura, Carlos and Molins-Ruano, Pablo",2016,"Basic computational thinking, so necessary in today's society, can be learned in an engaging way with the use of educational robots. In order to reach very diverse groups of people, educational robots need to be simple, scalable and low cost.Inspired by the success of the LOGO project, we have developed the Phogo pedagogical platform, built around a low cost robot (less than $80) capable of tracing its path with a marker pen. We also present a high-level Python-based control library that allows for transparent and easy wireless communication with the robots. The approach was tested in an informal workshop with a group of teenagers without any previous self-conscious computational knowledge. As the students were attracted by the robot and the simple approach, they were able to gain some insight about abstract programming concepts such as variables, functions, and flow control structures. The majority of the students were people with physical, cognitive or intellectual disabilities and they were able to follow, enjoy and learn as any other student making this an accessible activity to everyone.Finally, we summarize our efforts documenting and publishing the Phogo system as open-source in order to promote its use in future workshops."
Physical and Digital Twin with Computational Thinking to Foster STEM Vocations in Primary Education,"Palomés, Xavier Pi I and Verdaguer-Codina, Joan and Casas, Pau Fonseca I and Rubiés-Viera, José Luis",2024,Sin Valor
Piaget and Computational Thinking,"Zipitr\'{\i}a, Sylvia da Rosa",2018,"In this article I present a theoretical framework for the concept ""computational thinking"". I do so in response to some of the problems and consequences of the lack of viable theoretical foundations; especially in relation to the development in recent years of many educational practices that claim the term ""computational thinking"". I therefore introduce my extension of Jean Piaget's general law of cognition which arose as a result of my empirical research on novice learners knowledge of the concept of a program as an executable object. Said empirical study is briefly described in this paper as a means to highlight the key to my extension of Piaget's general law, which is the insight of how the thought processes and methods involved in cases where the subject must instruct an action to a computer differ from those in which the subject instructs another subject, or performs the action themselves. My theory explains the difference between algorithmic thinking and computational thinking by adequately locating it in the specificities of the subject instructing a computer. Hence, in this article I claim that my extension of Piaget's law offers a more empirically thorough and theoretically sound way forward in the conceptual development of ""computational thinking"" than the alternatives that are being debated in academia to the present day."
Pic2Program - an Educational Android Application Teaching Computational Thinking,"Utesch, Matthias C. and Faizan, Nilüfer Deniz and Krcmar, Helmut and Heininger, Robert",2020,Sin Valor
Pictoch: A Block-based Programming Learning Environment through Pictogram Content Creation,"Ito, Kazunari",2022,Sin Valor
Pilot Experience: Play and Program with Bee-Bot to Foster Computational Thinking Learning in Young Children,"Caballero-González, Yen-Air and Muñoz, Lilia and Muñoz-Repiso, Ana García-Valcárcel",2019,Sin Valor
Pivoting in a Pandemic: Transitioning from In-person to Virtual K-8 Computing Professional Development,"Burke, Quinn and Iwatani, Emi and Ruiz, Pati and Tackett, Traci and Owens, Aileen",2021,"This poster reports on year one of a three-year NSF-funded Research Practitioner Partnership (RPP) to develop a K-8 pipeline for computer science (CS) and computational thinking (CT) education within two rural school districts in Eastern Kentucky : Pikeville Independent School District and Floyd County Schools. Economically devastated by the departure of the coal industry, these communities are committed to developing high-quality computing curricula for all students, beginning in their earliest years. The poster has two components. First, through a mixture of qualitative measures, the poster reports on the genesis and development of the RPP. It focuses on the RPP's origin in leveraging the districts' existing relationship with Pennsylvania's South Fayette School District, which has developed one of the nation's leading programs for teacher professional development (PD) in K-12 computing. The second component of the poster focuses on the development of a series of summer workshops for Kentucky Appalachia K-8 instructors to learn the basics of CS and CT and how to integrate these skills and concepts into existing K-8 coursework. Of course, the RPP faced new challenges with COVID-19 most notably, the need to offer these summer workshops remotely, and adjusting the objectives and research questions accordingly. Through focus groups with the PD instructional team and survey responses from the KY teacher workshop participants, the poster will report on the pedagogical implications of offering teacher PD exclusively online and what the ramifications have been for Pikeville and Floyd County children with the return to school in the Fall of 2020."
Pixasso: A Development Stage-Based Learning Application for Children,"Nandan, Vrinda and Spittlemeister, Andrew and Brubacher, Federico",2020,"This paper describes an educational tool developed to teach coding and computational thinking to children. We designed and implemented an adaptive, interactive learning game application (mobile and web) called ""Pixasso"". In this application, children will write a simple program to color the 'pixels' of an image. Through the game application, they will learn programming commands, sequencing and debugging. This educational application was built using prevailing research on child centered design knowledge regarding child user interface and experience and aims to help scale initiatives dedicated towards introducing children to computer science at an early age."
Platform for university teaching applying Computational Thinking at the Armed Forces University ESPE,"Delgado, Ramiro and Yacchirema, Silvana and Coral, Francisco and Celi, Juan",2019,Sin Valor
Playing a Computational Thinking Game using Hand Gestures,"Castro, Elisa and Sakata, Tiemi and Zaina, Luciana",2019,Sin Valor
Plethora of Skills: Play-Learn-Practice-Invent-Share,"Gal-Ezer, Judith and Szekely, Smadar and Marelly, Rami",2020,"In today's world, students have to analyze and solve problems creatively, collaborate with teammates, communicate clearly, adapt rapidly to new technologies, and deal with a flood of information. This forces education systems to adopt new teaching methods and tools. Many are already adopting the required changes, but there is still a long way to go. In 2017, researchers at the Weizmann Institute of Science, together with the Center for Educational Technologies (CET), joined forces to address this challenge and created Plethora, an online game-like environment, which helps improve complex problem-solving through algorithmic thinking skills. The authors are part of this endeavor and its implementation."
Poster: A Conceptual Model for Cooperative Thinking,"Russo, Daniel and Missiroli, Marcello and Ciancarini, Paolo",2018,Sin Valor
Practical Exploration of Integrating Computational Thinking into University Computer Foundation Education,"He, Zhenyu and Zhao, Haihu",2019,Sin Valor
Practical thinking in programming education,"von Hausswolff, Kristina",2017,"Students are nowadays being introduced to the digital age as part of their formal education. This includes practical programming skills as well as more conceptual thinking tools developed in the discipline of computer science, sometimes denoted Computational Thinking (CT). The connection between CT and doing programming is sometimes thought of as the connection between theory and practice. The pragmatic thinker Dewey embraced practice in learning and argued that learning and knowing always come from experiencing the world. According to this view, there are no epistemological differences between theory and practice. In computer programming the student's active learning in the form of physical motor movement is important. Using the pragmatic way of analyzing learning to program puts a focus on the situated thinking during the practical programming, which relates to theories about CT. This research is focusing on the practical hands-on part of novice programming and in this aims at getting insights about factors important when learning to program that could inform teachers in the Computer Science classroom."
PRADA: A Practical Model for Integrating Computational Thinking in K-12 Education,"Dong, Yihuan and Catete, Veronica and Jocius, Robin and Lytle, Nicholas and Barnes, Tiffany and Albert, Jennifer and Joshi, Deepti and Robinson, Richard and Andrews, Ashley",2019,"One way to increase access to education on computing is to integrate computational thinking (CT) into K12 disciplinary courses. However, this challenges teachers to both learn CT and decide how to best integrate CT into their classes. In this position paper, we present PRADA, an acronym for Pattern Recognition, Abstraction, Decomposition, and Algorithms, as a practical and understandable way of introducing the core ideas of CT to non-computing teachers. We piloted the PRADA model in two, separate, week-long professional development workshops designed for in-service middle and high school teachers and found that the PRADA model supported teachers in making connections between CT and their current course material. Initial findings, which emerged from the analysis of teacher-created learning materials, survey responses, and focus group interviews, indicate that the PRADA model supported core content teachers in successfully infusing CT into their existing curricula and increased their self-efficacy in CT integration."
Pre-Service Computer Science Teachers’ Computational Thinking Attitudes and Performance on Python Tasks,"Standl, Bernhard",2022,"For more than a decade, there has been debate about how to describe the concept of computational thinking (CT), focusing on the skills of decomposition, abstraction, pattern recognition, and algorithmic thinking. As CT can also be seen as a problem-solving process, not only the skills and strategies are an important part of CT, but also the attitudes of the problem solvers. These have already been described as persistence, dealing with complexity, ambiguity, and confidence. An important competence for future computer science teachers is to confidently guide students’ problem-solving process. This work presents preliminary results on the relationship between pre-service computer science teachers’ CT attitudes and their performance on Python tasks. Therefore, N=19 pre-service computer science teachers solved three tasks in Python and rated their attitudes towards solving the tasks. However, the preliminary results only allow to draw tentative and interpretative conclusions."
PREFACE,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Preparing Teachers for Computational Thinking Integration in K-12: A Meta-Aggregation,"Caskurlu, Secil and Yadav, Aman and Santo, Rafi",2021,"In this poster, we will present the initial results of a meta-aggregation study that synthesizes qualitative evidence to identify the charac- teristics of effective in-service teacher professional development programs (TPD) around computational thinking (CT) integration in K-12. In addition, we will discuss the importance of these char- acteristics in supporting teachers. We identified four synthesized findings representing the key characteristics of effective TPDs for CT integration in K-12 (e.g., improving teacher capacity in CT in- tegration, creating meaningful learning experiences, establishing research-practice partnership, and providing continuous and sus- tainable support)."
Preparing upper elementary school teachers for integrating computational thinking into regular classroom activities,"Ouyang, Youwen and Hayden, Katherine L. and Remold, Julie",2018,"Recent initiatives demonstrate the interest in, and demand for, computational thinking education in elementary schools. However, teachers' readiness for programming-based activities along with their concerns about taking away time from key subject content present barriers for broader integration of computational thinking. This paper presents our experience and findings of a yearlong professional development for a cohort of 21 teachers from self-contained classrooms in grades 4 - 6. The project targeted these grade levels for two reasons: (1) self-contained classrooms provide maximum contact time between teachers and students, affording more flexibility in scheduling and potential for sustained impact, and (2) these grades are critical times for students to build interest and foundations in STEM while many teachers in these classrooms have limited STEM and computing background. The paper provides an overview of the professional development and describes selected activities in more detail. The impact of the professional development on the participating teachers is also presented."
Primary School Teachers' Conceptions of Computational Thinking,"Garvin, Megean and Killen, Heather and Plane, Jan and Weintrop, David",2019,"Computational thinking (CT) is increasingly becoming a part of the K-12 educational landscape. While high schools with computer science teachers or technology coaches on staff are well positioned to help teachers integrate computational thinking into instruction, early childhood through middle schools (grades p-8) are often less well equipped. Further, the concept of CT is often poorly defined, especially as it relates to younger learners. Despite these challenges, teachers are being asked to integrate CT into other content lessons. To understand if and how this is happening, we conducted a statewide survey of primary (early childhood through middle school) Maryland teachers. The survey asked the teachers about their conceptualization of CT, CT resources they rely on, and their comfort levels to provide effective CT instruction for their students. The results of our survey demonstrate that teachers hold diverse views of the concept of CT and use a varied set of instructional resources in their classrooms. The contribution of this work is in helping advance our understanding of the current state of CT in primary classrooms."
Principled Assessment of Student Learning in High School Computer Science,"Snow, Eric and Rutstein, Daisy and Bienkowski, Marie and Xu, Yuning",2017,"As K-12 computer science (CS) initiatives scale throughout the U.S., educators face increasing pressure from their school systems to provide evidence about student learning on hard-to-measure CS outcomes. At the same time, researchers studying curriculum implementation and student learning want reliable measures of how students apply their CS knowledge. This paper describes a two-year validation study focused on end-of-unit and cumulative assessments for Exploring Computer Science, an introductory high school CS curriculum. To develop the assessments, we applied a principled methodology called Evidence-Centered Design (ECD) to (1) work with various stakeholders to identify the important computer science skills to measure, (2) map those skills to a model of evidence that can support inferences about those skills, and (3) develop assessment tasks that elicit that evidence. Using ECD, we created assessments that measure the practices of computational thinking, in contrast to assessments that only measure CS conceptual knowledge. We iteratively developed and piloted the assessments with 941 students over two years and collected three types of validity evidence based on contemporary psychometric standards: test content, internal structure, and student response processes. Results show that reliability was moderate to high for each of the unit assessments; the assessment tasks within each assessment are well aligned with each other and with the targeted learning goals; and average scores were in the 60 to 70 percent range. These results indicate that the assessments validly measure students' computational thinking practices covered in the introductory CS curriculum. We discuss the broader issues we faced of balancing the need to use the assessment results for evaluation and research, and demands from teachers for use in the classroom."
Problem-Solving Through Pair-Programming: The Mediational Role of ChatGPT,"Urhan, Selin and Kocadere, Selay Arkun",2024,Sin Valor
Problock: A tool for computational thinking development using problem-based learning,"Calderón, Juan Felipe and Ebers, Javier",2017,Sin Valor
Production of Scratch Learning Objects by Elementary School Students,"Kaminski, Márcia Regina and Boscarioli, Clodis",2018,Sin Valor
Professional Development in Computational Thinking for teachers in Colombia,"Espinal, Alejandro and Vieira, Camilo and Magana, Alejandra J.",2021,Sin Valor
Professional Development in Computational Thinking: A Systematic Literature Review,"Espinal, Alejandro and Vieira, Camilo and Magana, Alejandra J.",2024,"This paper presents a systematic literature review of professional development programs in computational thinking (CT). CT has emerged as an essential set of skills that everyone should develop to participate in a global society. However, there were no pre-service or in-service teacher programs to integrate CT into the K–12 classrooms until very recently. Thus, it is important to identify how educators and researchers address the challenges to prepare the next generation of students and what gaps persist in the current literature. We review existing work in this field from two perspectives: First, we analyze the learning outcomes, assessment methods, pedagogical approaches, and pedagogical tools used in the professional development programs in CT. Second, we examine how these programs assess the teachers’ knowledge and skills as outcomes. We used the technological pedagogical and content knowledge (TPACK) framework to characterize existing literature and identify possible gaps in the preparation of pre-service and in-service teachers in CT. Our results suggest that (1) existing evidence is limited to developed countries; (2) many studies are only focusing on teachers understanding the concepts but do not explore how the participants evaluate or create learning activities; (3) no studies look into classroom observations as part of the program, which limits our understanding to how these programs work; and (4) most programs use block-based programming languages as the tool to develop student CT. While block-based programming languages are used for introductory training programs, students are often expected to transfer their learning to more professional programming languages."
Program Wars v.2.0 : Improving a Game-based Learning Approach for Teaching Fundamental Programming Concepts,"Tareque, Md. Hasan and Deutekom, Steven and Anvik, John and Bashir, Maimoona",2024,"Game-based learning (GBL) provides an engaging way to introduce those with limited programming experience to fundamental programming concepts, Program Wars&nbsp;uses a GBL approach to teach fundamental programming concepts using cards that represent instructions, loops, variables and methods to create a programming language-independent program. This paper introduces Program Wars&nbsp;v.2.0, which improves the prior implementation in several ways. These changes include the approach to teaching methods, introducing players to the concepts of searching and sorting algorithms, and revisions to the gameplay and UI to improve engagement. A user study of Program Wars&nbsp;v.2.0&nbsp;was conducted and shows that Program Wars&nbsp;v.2.0&nbsp;is more effective than Program Wars&nbsp;v.1.0&nbsp;in teaching the concepts of variables, loops and methods. Specifically, 60% of participants showed knowledge improvements of variables, 56% showed knowledge improvements for loops, and 44% showed knowledge improvements for methods. Qualitative results show that Program Wars&nbsp;’s game-based approach results in an engaging experience for learners."
Programming Courses Teaching Method for Ability Enhancement of Computational Thinking,"Huang, Wenming and Deng, Zhenrong and Rongsheng, Dong",2009,Sin Valor
Programming Embodied Interactions with a Remotely Controlled Educational Robot,"Merkouris, Alexandros and Chorianopoulos, Konstantinos",2019,"Contemporary research has explored educational robotics, but it has not examined the development of computational thinking in the context of programming embodied interactions. Apart from the goal of the robot and how the robot will interact with its environment, another important aspect that should be taken into consideration is whether and how the user will physically interact with the robot. We recruited 36 middle school students to participate in a six-session robotics curriculum in an attempt to expand their learning in computational thinking. Participants were asked to develop interfaces for the remote control of a robot using diverse interaction styles from low-level to high-level embodiment, such as touch, speech, and hand and full-body gestures. We measured students’ perception of computing, examined their computational practices, and assessed the development of their computational thinking skills by analyzing the sophistication of the projects they created during a problem-solving task. We found that students who programmed combinations of low embodiment interfaces or interfaces with no embodiment produced more sophisticated projects and adopted more sophisticated computational practices compared to those who programmed full-body interfaces. These findings suggest that there might be a tradeoff between the appeal and the cognitive benefit of rich embodied interaction with a remotely controlled robot. In further work, educational robotics research and competitions might be complemented with a hybrid approach that blends the traditional autonomous robot movement with student enactment."
Programming for Children and Teenagers in Brazil: A 5-year Experience of an Outreach Project,"Branco, Andr\'{e} and Dutra, Claudia and Zumpichiatti, D\'{e}bora and Campos, Francisco Augusto and SantClair, Gabriel and Mello, Jhulian and Moreira, Jo\~{a}o Victor and Godinho, Julia and Marotti, Julia and Gomide, Janaina",2021,"There has been a worldwide surge in programming education initiatives for children and teenagers. In Brazil, this trend faces some challenges, namely inadequate infrastructure of most schools, notably public ones, that lack access to computers and tablets, and basic education curricular requirements not contemplating computer science concepts. This article reports on the five-year experience of an outreach project from a public university in Brazil. The project aims to promote computer science education and to teach programming to children and teenagers. Undergraduate engineering students who participate in the project as members engage in activities such as planning the courses and their schedules, creating partnerships with local schools and other educational projects, giving lectures, producing scientific research and educational materials, as well as promoting the project on social media. The courses use free online programming tools, Python, MIT App Inventor, and Arduino to cover fundamental concepts of programming and computational thinking. They vary approaches and tools according to the age range and available technological resources of the target audience. The use of unplugged activities means to assist in learning and to circumvent computer access problems. Furthermore, they serve for introducing basic programming concepts in classes and motivating students with dynamic activities. Over its five-year existence, the project has achieved its purpose, by reaching a total of 2639 students through 45 workshops and 94 courses. It has provided courses in eleven public schools, created two booklets and one app as free educational material, along with presented papers and posters in scientific conferences."
Programming Literacy: Computational Thinking in Brazilian Public Schools,"Eloy, Adelmo Antonio da Silva and Martins, Amilton Rodrigues Quadros and Pazinato, Ariane Mileidi and Lukjanenko, Maria de Fatima S. Polesi and Lopes, Roseli de Deus",2017,"Bringing Programming to K-12 Education has been a strong tendency in Brazil and in the world. In this work-in-progress, we describe an experience in teacher training with the goal of promoting the practice of programming and the development of computational thinking in students of Brazilian public schools, through an initiative called Programming Literacy. Here we present strategies used in the implementation of the initiative, design of a curricular structure and training program, as well as monitoring and evaluation strategies. The results and findings of the initiative, involving more than 500 students from four cities in 2016, are shared as well as the perspectives on next steps."
Programming moves: Design and evaluation of applying embodied interaction in virtual environments to enhance computational thinking in middle school students,"Parmar, Dhaval and Isaac, Joseph and Babu, Sabarish V. and D'Souza, Nikeetha and Leonard, Alison E. and Jörg, Sophie and Gundersen, Kara and Daily, Shaundra B.",2016,Sin Valor
Programming Representations: Uncovering the Process of Constructing Data Visualizations in a Block-based Programming Environment,"Fernandez, Cassia and De Deus Lopes, Roseli and Blikstein, Paulo",2023,"In this paper, we analyze how middle schoolers engaged in data visualization activities using PlayData, an educational tool designed to create representations for data by taking advantage of the flexibility and low entry point of block-based programming environments. Drawing on the analysis of artifacts and videos collected during a three-day workshop, we explore the types of visualizations created by participants and the process they engaged with to produce visualizations. Although the representational forms chosen by students were mainly traditional, our findings indicate that they were engaged in authentic data visualization practices throughout their programming process. These practices included translating ideas into programs, selecting parameters (such as color scheme and space between data points), inspecting the output, and adding annotations to provide context and better communicate the desired information. Moreover, our analysis pointed out opportunities for improving PlayData, mainly by the addition of new primitives for automating labeling and performing data transformations."
Programming Skills as a Gateway to Proof Writing Proficiency,"Earth, Steve and Johnson, Jeremy and Char, Bruce",2024,"The intersection of programming and proof writing skills in computer science education is a relatively unexplored area. This paper presents the beginning of a longitudinal study that explores this intersection by analyzing student programmers' solutions to logic puzzles at the beginning and end of an intermediate computer science (CS) course. These puzzles, requiring skills akin to proof writing but without the need for advanced mathematical knowledge, serve as a tool to evaluate the development of proof writing skills. We examine the correlation between students' puzzle-solving capabilities and their academic performance in the course, controlling for other variables such as prior mathematics courses and GPA. This study aims to bridge the gap in understanding how programming education contributes to the development of proof writing abilities."
Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts,"Ritz, Anna",2018,"Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html."
Programming to learn in Italian primary school,"Benvenuti, Martina and Chioccariello, Augusto and Giammoro, Giorgia",2019,"The Italian Ministry of Education is promoting the introduction of coding and computational thinking at compulsory school level. One of the research initiatives being taken in this regard is ""Programming to Learn in Italian Primary School"". The project's aim is to develop a vertical curriculum for the introduction of programming in Italian primary schools as a new expressive language for children. All the schoolchildren involved in the project attend a weekly computer lab class held throughout the school year. They work on individual projects during the first half of the year. Then, in the second half of the year, they work in small groups on a common theme that the teacher selects from those studied in class. In this poster, we report the work of a fifth-grade class (24 students -- 7 females and 17 males, aged 10-11) in the 2017-2018 school year. Findings from individual and group Scratch programs produced, self-evaluation questionnaire and semi-structured interviews with the groups are presented."
Programming touch and full-body interaction with a remotely controlled robot in a secondary education STEM course,"Merkouris, Alexandres and Chorianopoulos, Konstantinos",2018,"Contemporary research has introduced educational robotics in the classroom, but there are few studies about the effects of alternative embodied interaction modalities on computational thinking and science education. Twenty-six middle school students were asked to program interfaces for controlling the heading and speed of a robot using two types of embodied interaction modalities. We compared touch and full-body gestures to autonomous control, which does not require any embodied interaction. We assessed the development of their computational thinking skills by analyzing the projects they created during a problem-solving task and examined their understandings of science concepts related to kinematics. We found that novice students preferred full-body interfaces, while advanced students moved to more disembodied and abstract computational thinking. These findings might be applied to focus computing and science education activities to the right age and abilities groups of students."
Programming: a key component of computational thinking in CS courses for non-majors,"Cooper, Stephen and Dann, Wanda",2015,Sin Valor
"Progress in computational thinking, and expanding the HPC community","Wing, Jeannette M. and Stanzione, Dan",2016,"The Communications Web site, http://cacm.acm.org, features more than a dozen bloggers in the BLOG@CACM community. In each issue of Communications, we'll publish selected posts or excerpts.twitterFollow us on Twitter at http://twitter.com/blogCACMhttp://cacm.acm.org/blogs/blog-cacmJeannette Wing considers the proliferation of computational thinking, while Dan Stanzione hopes to bring more HPC practitioners to SC16."
Progression Of Computational Thinking Skills In Swedish Compulsory Schools With Block-based Programming,"Zhang, LeChen and Nouri, Jalal and Rolandsson, Lennart",2020,"Although Computational Thinking and Programming have become obligatory in many national curricula, the majority of teachers in practice are currently in dire need of support from both the research and teaching community. A national research and teacher development project was initiated in Sweden to address this issue. To develop their pedagogical competence in these new subjects, 31 in-service teachers from the project performed lesson studies at their schools. This study collected and analyzed the documentation of 12 lesson studies regarding how computational thinking skills are taught and assessed in K--9, with block-based programming. The study applies a validated CT framework to identify the involved computational thinking skills. The result presents a progression stage scheme for these skills in compulsory schools. The paper also discusses the problems and challenges in the assessment of computational thinking skills."
Project moveSMART: When Physical Education Meets Computational Thinking in Elementary Classrooms,"Fritz, Connor and Bray, Dylan and Lee, Grace and Julien, Christine and Burson, Sheri and Castelli, Darla and Ramsey, Carol and Payton, Jamie",2022,Sin Valor
Project Sustainability through Teacher Autonomy in CT Infusion,"Joshi, Deepti and Jocius, Robin and Blanton, Melanie and Albert, Jennifer and O'Byrne, Ian",2023,"There is growing attention for developing professional learning experiences for content area teachers to infuse computational thinking (CT). However, there is little reporting on how teachers continue to implement the CT lessons once professional development (PD) is over. This study provides initial results on our efforts of building project sustainability through teacher autonomy in designing their own CT infusion projects or PDs for their schools. Our initial analysis indicates the need to continue to build teacher autonomy within the professional learning experiences for developing teacher confidence and sustainability of the project."
Promoting computational thinking and creativeness in primary school children,"Chiazzese, Giuseppe and Fulantelli, Giovanni and Pipitone, Vito and Taibi, Davide",2017,"This paper presents the preliminary results of the project ""Computational Thinking for children education"", aimed at promoting computational thinking, creativity and learning amongst primary school children. The didactic activities of the project focus on computer programming and, in particular, the development of video games. The paper introduces also a teaching model based on narrative learning where the screenplay of the game has a key role. A preliminary analysis of the project results highlights how children's perception of computer programming is influenced by practical coding sessions; furthermore, these results suggest that some individual features (e.g. gender; math and language competencies), and the socio-economics familiar context can significantly impact on development of computational thinking skills."
Promoting Computational Thinking in Elementary School: A Narrative-Centered Learning Approach,"Boulden, Danielle and Smith, Andy and Cully, Kimkinyona and Houchins, Jennifer and Elsayed, Rasha and Hubbard Cheuoua, Aleata and Minogue, James and Oliver, Kevin and Ringstaff, Cathy and Mott, Bradford",2021,"One of the most efficient ways for elementary school students to gain exposure to computational thinking is when it is integrated into other disciplinary areas; however, elementary school teachers often lack the necessary resources to do this effectively. By leveraging the motivation force of narrative to engage students and the scaffolding affordances of block-based programming to support students, computationally-rich narrative-centered learning offers promise to address this need. In this work, we review design principles from prior work for engaging elementary students in computational thinking as well as results from initial pilot studies to investigate how computationally-rich narrative-centered learning in the context of science problem solving can support the integration of computational thinking into other disciplinary areas."
Promoting Computational Thinking in K-12 students by applying unplugged methods and robotics,"Conde, Miguel \'{A}. and Fern\'{a}ndez-Llamas, Camino and Rodr\'{\i}guez-Sedano, Francisco J. and Guerrero-Higueras, \'{A}ngel M. and Matell\'{a}n-Olivera, Vicente and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2017,"Nowadays students live in the digital age and they do not only should learn to speak, write or develop specific skills. Students needs to be successful in their context and a possible way to achieve this is by developing the computational thinking. In the last few years there are several initiatives to promote computational thinking and to define approaches and methods to support it. One of this is the unplugged methods, in which students develop computational thinking skills without using the technology. This paper presents an experiment to promote computational thinking by using unplugged methods and employing robots as teachers as an engagement factor for the students. During the experiment, they have been distributed in two groups. One has carried out unplugged activities to develop computational thinking while the other did not. From the experiment, it is possible to see that results are better for those students that have completed unplugged activities and there are differences depending on age."
Promoting Computational Thinking in Teacher Education - Combining Semantic Waves and Algorithmic Thinking,"Ritter, Frauke and Standl, Bernhard",2022,"Teaching algorithmic thinking and programming is an important competency for future informatics teachers to acquire. To encourage this, we are investigating the development of a teaching-learning structure that combines the concept of semantic waves and algorithmic thinking with integrating block-based languages. In our teaching-learning laboratory for informatics (TLL), pre-service informatics teachers develop workshops based our concept, evaluate them with school classes and reflect on their didactic learning. Our concept is evaluated by students’ algorithmic thinking and their perception of the semantic wave using mixed methods. This poster presents one workshop based on our teaching-learning structure and its research procedures."
Promoting Computational Thinking Skills in Non-Computer-Science Students: Gamifying Computational Notebooks to Increase Student Engagement,"De Santo, Alessio and Farah, Juan Carlos and Martínez, Marc Lafuente and Moro, Arielle and Bergram, Kristoffer and Purohit, Aditya Kumar and Felber, Pascal and Gillet, Denis and Holzer, Adrian",2022,Sin Valor
Promoting Computational Thinking Skills in Primary School Students to Improve Learning of Geometry,"Echeverría, Leovy and Cobos, Ruth and Morales, Mario and Moreno, Fernando and Negrete, Victor",2019,Sin Valor
Promoting Computational Thinking Skills Through Game-Based Learning of Students in Lower Secondary School,"Saenboonsong, Siripon and Poonsawad, Akarapon",2024,Sin Valor
Promoting Computational Thinking through Visual Block Programming Tools,"Plaza, Pedro and Castro, Manuel and Sáez-López, Jose Manuel and Sancristobal, Elio and Gil, Rosario and Menacho, Antonio and García-Loro, Félix and Quintana, Blanca and Martin, Sergio and Blázquez, Manuel and Macho, Alejandro and Baizán, Pablo and Mur, Francisco and Carro, German and Pérez, Clara and Carrasco, Ramón and López-Rey, África and Rodriguez-Artacho, Miguel and Ruipérez-Valiente, Jose A.",2021,Sin Valor
Promoting computational thinking with programming,"Selby, Cynthia C.",2012,"The term computational thinking has received some discussion in the field of computer science education research. The term is defined as the concept of thinking about problems in a way that can be implemented in a computing device. Of course, after having thought about a problem using computational thinking skills, the next step should be to use programming skills to implement the solution. This work in progress is exploring ways in which programming can be employed as a tool to teach computational thinking and problem solving. Data is collected from teachers, academics, and professionals from various industries. They are purposively selected because of their knowledge of or interest in the topics of problem solving, computational thinking, and the teaching of programming. This data is analyzed within the paradigm of the grounded theory approach. The results of an initial analysis imply an ordering of complexity associated with computational thinking skills, imply connections between computational thinking skills and programming activities, and imply a relationship between computational thinking skills and other taxonomies of learning."
Promoting Computer Science Learning with Block-Based Programming and Narrative-Centered Gameplay,"Min, Wookhee and Mott, Bradford and Park, Kyungjin and Taylor, Sandra and Akram, Bita and Wiebe, Eric and Boyer, Kristy Elizabeth and Lester, James",2020,Sin Valor
Promoting Teaching Self-efficacy in Computational Thinking of School Teachers,"Zhao, Ming and Zhao, Mei and Wang, Xiao-Hong and Ma, Hong-Liang",2020,Sin Valor
Proposal of a conceptual modeling learning environment with task/model management functions,"Maruyama, Ryoga and Kayama, Mizue and Nagai, Takashi and Otaku, Koki and Taguchi, Naomi",2022,Sin Valor
Proposing a solution for the problem of teaching programming to novice students using soft systems methodology,"Mohammed, Salma A.O. and Elhaddad, Mariam E. and Mohammed, Alfaroq O.M.",2017,Sin Valor
Prospective Elementary Teachers’ Computational Thinking Skills: A Preliminary Study,"Putra, Zetra Hainul and Witri, Gustimal and Dahnilsyah and Gunawan, Yahya and Sumadinata, Herry and Putri, Arisya Ruspina",2024,Sin Valor
Protobject as a tool for teaching computational thinking to designers: student perceptions on usability,"Bellino, Alessio and Herskovic, Valeria",2023,"Due to the proliferation of technology in daily life and the growing number of ways in which humans and machines interact, the process of designing interactive elements has become critical. Nevertheless, design students are seldom able to design and implement interactive elements because of their limited programming skills. Although there have been some approaches to teach computational thinking using physical computing and focusing on solving real-world problems (e.g., electronic devices such as Arduino, using sensors and actuators), they often entail monetary expenses and require knowledgeable instructors, and are not catered to students without prior programming or electronics knowledge. Hence, we propose the use of Protobject, a low-cost tool that focuses on real-world applications that could be used to teach programming to design students. This study aims to evaluate students’ perceptions regarding the usability of Protobject as a tool for learning computational thinking, as well as the clarity of the learning activities designed to teach computational thinking concepts by using Protobject."
Psychometric computational thinking test,"Santisteban, Julio and Santisteban-Mu\~{n}oz, Jennifer",2018,"The recent widespread popularity of computational thinking (CT) has raised the need for a reliable method for assessing it. Recent CT tests focus on programming skills rather than the analytical ability and problem-solving processes in science, philosophy and other areas of knowledge.  This poster presents the results (Test design) of an ongoing project that has developed a Psychometric Computational Thinking Test (PCTT) which has three phases: test design, test implementation and applying the test. In regards to the PCTT design, the reliability and validity of the test were based on content and construct validity which also includes its rating scales for its application.  This work makes two contributions: (1) a standardized CT Test design incorporating psychometric techniques as well as computational techniques and (2) the inclusion of open-ended questions and their assessment with V of Aiken in order to validate responses."
Punch Cards to Python: A Case Study of a CS0 Core Course,"Babbitt, Thomas and Schooler, Charles and King, Kyle",2019,"There is an immense interest in teaching computer science concepts- and programming specifically - to everyone. The United States Military Academy at West Point has required every student, regardless of major, to pass a computer science zero (CS0) course for the last 50 years: From punch cards to Python. We present a history of our CS0 course and the lessons learned from the most recent redesign of the course. We review the last decade of student assessments and how they influenced the latest iteration. We contrast the expectations of students in a CS0 course with those in a CS1 course. We discuss the national efforts to make CS accessible to all and explore the challenges unique to a CS0 course. We demonstrate similarities between our course and the Advance Placement CS Principles and show where differences are justified. We review the relevant pedagogical research for CS0 and present lessons learned over multiple iterations of the course. Based on our current course review and implementation, we believe that Computer Science for everyone is attainable and relevant to the needs of every student."
Putting Computing on the Table: Using Physical Games to Teach Computer Science,"Parham-Mocello, Jennifer and Erwig, Martin and Niess, Margaret and Weber, Jason and Smith, Madelyn and Berliner, Garrett",2023,"We describe a new introductory CS curriculum for middle schools that focuses on teaching CS concepts using the instructions and rules for playing simple, physical games. We deliberately avoid the use of technology and, in particular, programming, and we focus on games, such as tossing a coin to see who goes first and playing Tic-Tac-Toe. We report on middle-school students' understanding of basic CS concepts and their experiences with the curriculum.After piloting the curriculum in 6th and 7th grade electives, we found that students liked the curriculum and using games, while some other students reported struggling with the technical content in the algorithm unit and vocabulary across the curriculum. Overall, students gained an understanding of abstraction and representation, and most students could define an algorithm and recognize a condition. However, they could not correctly organize the instructions of an algorithm. Our results suggest that the non-coding, game-based curriculum engaged middle school students in basic CS concepts at the middle school level, but we believe there is room for improvement in delivering technical content and vocabulary related to algorithms."
"Pythons and Martians and Finches, Oh My! Lessons Learned from a Mandatory 8th Grade Python Class","Nanavati, Amal and Owens, Aileen and Stehlik, Mark",2020,"As computing technologies continue to have a greater impact on daily life, it becomes increasingly important for the K-12 education system to prepare students for the computerized world. In this paper, we present the curriculum design, implementation, and results from a one-trimester introductory Python course that is mandatory for all 8th graders in our school district. This course is a crucial component of the K-12 computational thinking pathways we are developing at our school district, which take students from block-based programming and computational thinking (elementary school) to text-based programming and applications of computer science (high school). Our mandatory 8th grade course serves as a bridge between these two components. We present qualitative results that highlight the challenges that arose from teaching a course for all students -- not just those with a prior interest in computing -- and how the instructor overcame those challenges. We also present quantitative results that demonstrate the course's positive impact on students' attitudes towards computer science, their intent to re-engage with computer science in the future, and the gender gap with regards to confidence in computer science."
"Qu\'{\i}-Bot-H2O Challenge: Integration of computational thinking with chemical experimentation in early ages including gender, inclusive and diversity patterns","Tarr\'{e}s, Marta I. and Dorado, Antonio David",2021,"This multidisciplinary and interdisciplinary project is developed with the main objective of increasing interest in science and technology among children and young people in an inclusive way, breaking stereotypes and invisible social and gender barriers. In order to reduce the gender gap in technical careers, the social aspect of robotics applied to chemistry is highlighted at early ages. Qu\'{\i}-Bot-H2O Project has been included in the gender equality lines of action of the two references territorial public administrations for UPC Manresa (Bages County Council in its III Gender Equality Plan and the Manresa City Council in the II Gender Equality Plan). Qu\'{\i}-Bot-H2O challenge is supported by the Spanish Ministry of Economy and Competitiveness under Grant FECYT2021-15626, Line of action 2. Education and scientific vocations (2nd place out of 120 awarded)."
Qualitative Analysis of Open-ended Comments in Introductory CS Courses: (Abstract Only),"Butler, Zack and Bezakova, Ivona and Fluet, Kimberly",2018,"End-of-course evaluations and other student surveys typically include the opportunity for students to provide free-form comments. These are rich sources of data but are often only subjectively taken into account to further improve course delivery or analyze the effectiveness of assignments. We designed several puzzle-based assignments for typical CS1/2 topics and surveyed students as part of our efforts to analyze the assignments' efficacy and improve them over time. The surveys included traditional measures such as demographic data, Likert-scaled questions about assignment perceptions, and open-ended comments. With thousands of survey responses, we wanted to see if the open-ended comments yield additional, statistically significant, insights on either the assignments or students' learning. We developed a coding scheme for the comments using grounded theory analysis to represent patterns among the data. After refining the coding scheme we statistically analyzed the comments and found some interesting relationships, not apparent from the Likert-scaled questions, among certain codes. We also conducted extensive semi-structured interviews with instructors and student teaching assistants, also using grounded theory analysis to develop a set of codes for these different perspectives. The coding processes themselves allowed for a deeper understanding of the concerns about and appreciation for the assignments from both groups of participants. This poster reports on how the statistical results and the coding schemes, including the overlap and dissonance between the two coding schemes, inform our continued efforts to improve both assignment development and future research on the teaching and learning of CS concepts."
Quantifying the Corona Effect: How much the pandemic-induced switch from face-to-face to online teaching increased students' self-efficacy – a practical report.,"Fahrni, Nicolas and Repenning, Alexander",2022,"This practical report explores the impact of forced learning design changes due to the Corona pandemic. At the School of Education Northwestern Switzerland over 2000 K-6 pre-service elementary school teachers got educated in computer science and computer science education over the last five years employing a learning design evolved through a Design Based Implementation Research (DBIR) approach. Assessing efficacy of the course through effect sizes the 2019 courses have served as pre-Corona baseline. Changing hastily in 2020 to online learning dramatically shifted the learning design in ways not initially anticipated in the DBIR process. Collaborative face-to-face (f2f) learning activities got replaced with individual online learning. Employing effect sizes has allowed us to quantify a Corona effect by comparing self-efficacy measures before Corona and during Corona. While there where only small effect sizes (0.5 &gt; Cohen's d ≥ 0.2) all these small effects were positive suggesting that the individual/online seminar worked slightly better than the collaborative/f2f seminar. The report highlights the most important changes to the learning design and compares 2019 with 2020 using effect sizes. For the most part the report can only speculate about the most relevant factors in the design change resulting in the unexpected overall improvement of course efficacy. It could be the shift from collaborative to individual practices, the mandatory peer feedbacks, or the online learning situation."
RaBit EscAPE: a board game for computational thinking,"Apostolellis, Panagiotis and Stewart, Michael and Frisina, Chris and Kafura, Dennis",2014,"Computational thinking (CT) is increasingly seen as a core literacy skill for the modern world on par with the longestablished skills of reading, writing, and arithmetic. To promote the learning of CT at a young age we capitalized on children's interest in play. We designed RabBit EscApe, a board game that challenges children, ages 610, to orient tangible, magnetized manipulatives to complete or create paths. We also ran an informal study to investigate the effectiveness of the game in fostering children's problemsolving capacity during collaborative game play. We used the results to inform our instructional interaction design that we think will better support the learning activities and help children hone the involved CT skills. Overall, we believe in the power of such games to challenge children to grow their understanding of CT in a focused and engaging activity."
Reaching Everyone by Integrating Computing Everywhere,"Guzdial, Mark",2022,"The inventors of the term “computer science” meant for it to be something that was taught to everyone, to facilitate learning other subjects. Today, we mostly teach computer science to people who want to become professional software developers or computer scientists. Worse yet, we get a narrow range of people who are even willing to take a CS class. If we wanted to reach the original and more general goal, we would have to change how we teach computer science. In this talk, we consider the history of “computer science” and its earlier purpose, describe and demonstrate new kinds of languages, tools, and media for learning computer science."
Reading Hierarchies in Code: Assessment of a Basic Computational Skill,"Park, Thomas H. and Kim, Meen Chul and Chhabra, Sukrit and Lee, Brian and Forte, Andrea",2016,"One of the skills that comprise computational thinking is the ability to read code and reason about the hierarchical relationships between different blocks, expressions, elements, or other types of nodes, depending on the language. In this study, we present three new instruments for assessing different aspects of reading hierarchies in code, including vocabulary, reasoning, and fluency. One of these instruments is Nester, an interactive tool we have designed to elicit mental models about the hierarchical structure of code in computing languages ranging from HTML, CSS, and LaTeX to JavaScript and Lisp. We describe a lab study in which we administered these instruments to 24 participants with varying degrees of web development experience. We report findings from this study, including participants' ability to define, reason about, and manipulate hierarchies in code, and the errors and misconceptions that relate to them. Finally, we discuss avenues for future work."
Real Time Assessment of Computational Thinking,"Koh, Kyu Han and Basawapatna, Ashok and Nickerson, Hilarie and Repenning, Alexander",2014,Sin Valor
Recognizing and Questioning the CT Education Paradigm,"Kite, Vance and Park, Soonhye and Wiebe, Eric",2019,"In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of ""computational thinking for everyone,"" and propose specific recommendations for expanding the current CT paradigm."
Recognizing computational thinking patterns,"Basawapatna, Ashok and Koh, Kyu Han and Repenning, Alexander and Webb, David C. and Marshall, Krista Sekeres",2011,"End-user game design tools are effective in motivating and exposing students with no prior programming experience to computer science. However, while there is good evidence that these environments are effective motivators, the question remains what do students actually learn? For our purposes, using AgentSheets, we would like to know if students can apply the knowledge obtained from programming games to creating science simulations. Specifically, we want to better understand if students are able to recognize Computational Thinking Patterns (CTP) from their game programming experience. Computational Thinking Patterns are abstract programming patterns that enable agent interactions not only in games but also in science simulations. Students and teachers who participated in a game design summer institute were administered a Computational Thinking Pattern Quiz (CTP Quiz). This quiz tested the participants' ability to recognize and understand patterns in a context removed from game programming. We found that participants, for the most part, were able to understand and recognize the patterns in a variety of contexts"
Recognizing Possibilities of Computational Thinking When Teaching First-degree Equations: A Classroom Case,"Barbosa, Luciana Leal da Silva and Maltempi, Marcus Vinicius",2019,"This work aims to present a hands-on activity for the first degree equations. The activity was applied to a reinforcement class of the K-8, in a public school in Birigui, S\~{a}o Paulo, Brazil. The activity used the Balance of Equations game, built on the Scratch programming environment with the objective of teaching the initial ideas of first degree equations to a class with a learning gap in this discipline. The planning of the activity was divided into three moments, with the intention of starting from an analogy to the principle of equivalence of an equation, reaching the algebraic transcription of an equation through activities of manipulation of the game code. Seven concepts related to computational thinking with strong potential to be worked during the activity were identified. In this way, besides the presentation of the classroom case, this article identifies these seven concepts, analyzing how they could be developed during the application of the activity, seeking to answer the following question: How can computational thinking skills be explored through hands-on activity for the teaching of equations?"
Refactoring courseware to engage undergraduates in computational thinking across boundaries,"Pulimood, S. Monisha and Pearson, Kim and Bates, Diane",2014,"There is a growing need to develop courses that demonstrate the articulations between computer science and an array of computing-dependent fields. This hands-on workshop will introduce participants to a model for students and faculty to collaborate across disciplines and with a community organization to develop computational solutions to address complex real-world problems. The strength of this model lies in leveraging existing courses and courseware rather developing new ones. Participants will learn how to develop at their own institutions, similar collaborations that involve computer science, a computing-dependent discipline and a community partner. We will provide access to materials that participants can adapt for their own courses to redesign existing courseware: best practices; pitfalls to be avoided and how to deal with them; instructional materials developed for the courses used in our project; assessment and evaluation instruments developed for the courses used in our project; instructions on adapting the assessment and evaluation instruments for other courses; instructions, documentation, and configuration scripts for using the technology needed for such collaborations. The presenters will share experiences and lead a brainstorming session to design strategies for dealing with challenges and for gaining institutional support for such collaborations. Participants are encouraged to bring their laptops to work on, but this is not required."
REFERENCES AND FURTHER READING,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Reframing Digital Curation Practices through a Computational Thinking Framework,"Marciano, Richard and Agarrat, Sarah and Frisch, Hannah and Hunt, Margaret Rose and Jain, Kanishka and Kocienda, Genevieve and Krauss, Hannah and Liu, Chenxi and McKinley, Mary and Mir, Danish and Mullane, Connor and Patterson, Emery and Pradhan, Debashish and Santos, James and Schams, Britton and Shiue, Hilary Szu Yin and Silva, Andy Jose and Suri, Mayhah and Turabi, Tahura and Vasselli, Mirielle and Xu, Jiale",2019,Sin Valor
Relationship between computational thinking and a measure of intelligence as a general problem-solving ability,"Boom, Kay-Dennis and Bower, Matt and Arguel, Ama\""{e}l and Siemon, Jens and Scholkmann, Antonia",2018,"Computational thinking – the ability to solve problems using concepts from computer science – has been widely discussed in the computer science education field. However, the relationship of computational thinking to intelligence – seen as the general ability to understand and solve complex problems – is contestable and has not been extensively explored. The present study addressed the question of how computational thinking is related to intelligence. To find an answer to this question, 71 pre-service teacher students completed a survey with 20 Bebras tasks as a measure of computational thinking and a non-verbal intelligence test (TONI-3) to assess their general problem-solving ability. The large and significant correlation of r(70) = .53, p &lt; .001, indicates that both concepts are highly related. Implications of the findings are discussed, including the meaning of the relationship between computational thinking and intelligence during teaching and assessment, and the possibility of more holistic measures of computational thinking that incorporate procedural aspects."
Relationship of knowledge to learn in programming methodology and evaluation of computational thinking,"L\'{o}pez, Arturo Rojas and Garc\'{\i}a-Pe\~{n}alvo, Francisco J.",2016,"Computational thinking (CT) is a way that allows us to create solutions to problems through the use of skills such as abstraction, decomposition, generalization, evaluation and algorithmic design. There are Institutions that offer global CT assessment to particularly promote the study of professions in the area of Computer Science and in some cases there is also training for teachers of primary and secondary education. In this paper we present the proposal to evaluate the CT skills of new students in the Division of Technologies Information and Communication of the Universidad Tecnol\'{o}gica de Puebla to relate the knowledge indicated in the Programming Methodology course and provide an initial environment that accredits learning, review or learn as determined by the test in order to motivate the student who already has a knowledge and attends the required education. The main conclusion of the work is to create learning scenarios through assessing the skills mentioned initially using reagents internationally recognized."
"Relationships: computational thinking, pedagogy of programming, and Bloom's Taxonomy","Selby, Cynthia C.",2015,"This study explores the relationship between computational thinking, teaching programming, and Bloom's Taxonomy. Data is collected from teachers, academics, and professionals, purposively selected because of their knowledge of the topics of problem solving, computational thinking, or the teaching of programming. This data is analysed following a grounded theory approach. A computational thinking taxonomy is developed. The relationships between cognitive processes, the pedagogy of programming, and the perceived levels of difficulty of computational thinking skills are illustrated by a model.Specifically, a definition for computational thinking is presented. The skills identified are mapped to Bloom's Taxonomy: Cognitive Domain. This mapping concentrates computational skills at the application, analysis, synthesis, and evaluation levels. Analysis of the data indicates that abstraction of functionality is less difficult than abstraction of data, but both are perceived as difficult. The most difficult computational thinking skill is reported as decomposition. This ordering of difficulty for learners is a reversal of the cognitive complexity predicted by Bloom's model. The plausibility of this inconsistency is explored.The taxonomy, model, and the other results of this study may be used by educators to focus learning onto the computational thinking skills acquired by the learners, while using programming as a tool. They may also be employed in the design of curriculum subjects, such as ICT, computing, or computer science."
Remaining trouble spots with computational thinking,"Denning, Peter J.",2017,Addressing unresolved questions concerning computational thinking.
Remixing as a Pathway to Computational Thinking,"Dasgupta, Sayamindu and Hale, William and Monroy-Hern\'{a}ndez, Andr\'{e}s and Hill, Benjamin Mako",2016,"Theorists and advocates of “remixing” have suggested that appropriation can act as a pathway for learning. We test this theory quantitatively using data from more than 2.4 million multimedia programming projects shared by more than 1 million users in the Scratch online community. First, we show that users who remix more often have larger repertoires of programming commands even after controlling for the numbers of projects and amount of code shared. Second, we show that exposure to computational thinking concepts through remixing is associated with increased likelihood of using those concepts. Our results support theories that young people learn through remixing, and have important implications for designers of social computing systems."
Report of the Spanish Computing Scientific Society on Computing Education in Pre-University Stages,"Vel\'{a}zquez-Iturbide, J. \'{A}ngel",2018,"In recent years, many developed countries have addressed computing education in primary or secondary education. Potential benefits for students in these educational stages and for the society are great, existing a wide range of approaches to such a computing education. The Spanish Computing Scientific Society (SCIE), with the support of the Spanish Board of Deans of Computing Schools (CODDII) created in September 2017 a working group formed by experts in either computing or computing education with the goal of elaborating a report with specific recommendations about this issue for the Spanish government. The report was issued in July 2018 and recommends, in conformance to Spanish educational laws, to establish a matter called ""Informatics"". This matter would preferably be implemented as a mandatory course offered from primary to secondary education. The course contents comprise six areas: programming, computers and operating systems, networks and the Internet, data, digital content, and security. The course would include issues of both digital literacy and computing as a discipline, with digital literacy contents based on the European DIGCOMP framework."
"Reported Development of Computational Thinking, Through Computer Science and Programming, and its Benefits for Primary School Students: (Abstract Only)","Duncan, Caitlin",2018,"Across the world there has been a paradigm shift in school education, as many countries are incorporating Computer Science (CS), programming, and Computational Thinking (CT), into their K-12 curriculums for the first time. In 2018 these subjects will be introduced to the New Zealand (NZ) Digital Technologies curriculum under the subject of ""Computational Thinking"". Like the majority of countries who have introduced these topics, NZ faces challenges in preparing teachers, and in successfully implementing a curriculum which achieves its educational goals. To support this curriculum, we have been conducting studies in primary schools across NZ, trialing resources with teachers and students. Building on a 2014 exploratory study on CS and programming in intermediate school, this project investigates the existing assumptions around CT education in K-12. It aims to address the specific questions: How do we teach CT concepts and approaches to primary aged students? If they learn CT, does it have the expected positive impacts on students learning? And, what other positive and negative impacts does this have?Throughout 2015 and 2016 a study was conducted with 18 primary school teachers from across NZ, who used CS Unplugged and educational programming languages in their classrooms. Teachers submitted feedback on these classes through an online form, and participated in semi-structured interviews. The feedback responses and interview transcripts were analysed using a thematic approach, which revealed many positive impacts on students general learning, minimal negative impacts, and observations of CT development."
"Representation, navigation and exploration: a three layered approach on learning trajectories","Vieira, Jos\'{e} M. F. and Zaina, Luciana A. M.",2020,"Learning trajectories are paths that students may follow in order to achieve their learning goals. Although the literature has addressed the subject, little has been done in the way of exploring how to visualize learning trajectories. In this paper, we present three forms of interactive learning trajectories visualizations linked to the context of computational thinking. As the interactions on visualizations involved different aspects, our proposal comprises three layers: the data representation, the reactions to the navigation and data exploration where more details of the data can be seen. Due to visualizations being tightly related to the context from which the data comes, we analyzed the data types available in Code.org, a well-known platform commonly used to teach computational thinking. To assess the three visualizations, we carried out usability and user experience evaluation with 23 Brazilian elementary schools teachers. The results revealed that the three visualizations achieved an average of 72% of overall understanding by the audience. Besides, our findings showed the visualizations were well accepted among the participants. We also found out that the user experience reported by the participants is in some way associated with the level of understanding of the visualizations."
Research and Application of Computational Thinking on Python Teaching,"Wang, Xuemei and Zou, Xuelan and Yin, Weifeng and Li, Qingsheng and Zhang, Li and Hong, Liang",2021,Sin Valor
Research and Design of Blended Learning of EDA Technology Course Based on CDIO,"Zhao, Chenguang and Fang, Qizhi and Sun, Yanpeng",2024,"In view of the strong practical characteristics of EDA(Electronic Design Automation) technology and the insufficient integration between courses, the concept and method of CDIO(Conceive, Design, Implement, Operate) are introduced to deepen the reform of blended learning in EDA course . Taking students as the main body to seek solutions to the problem, improve students' ability to solve complex engineering problems. Designing the teaching means of the ""EDA Technology"" course, and explore its implementation process, teaching measures and evaluation methods. The case study of CDIO teaching shows that the blended teaching method trained the computational thinking, which integrates the dual experience of traditional classroom and online resource, has reasonable assessment standard, and better teaching objectives than the original teaching method, achieving good teaching results, and continuously improving the blended learning effect of EDA technology course. Besides, in the teaching of undergraduate professional courses, teachers can use information technology to reconstruct the precision teaching process, obtain real-time data of the teaching process through the classification and decomposition of teaching objectives, the classification and construction of teaching resources, and the continuous evaluation of learning objects, and implement precise teaching intervention according to the data processing results, so as to maximize the learning effect of students."
Research and practice on teaching mode of “Introduction to Computer Science” in Business-Education Partnership,"Xue-yan, Zhou and Xiang-min, Ren",2010,Sin Valor
Research into the computational thinking for the teaching of computer science,"Li, Ying",2014,Sin Valor
Research of VB programming teaching mode based on the core of computational thinking ability training,"Zhang, Chunying and Chen, Xiao and Li, JianJing",2011,Sin Valor
Research on blended teaching reform based on computational thinking,"Zhao, Fengzhi and Liu, Sijie",2022,Sin Valor
Research on Developing Computational Thinking of Middle School Students Based on Gamified Text Programming Teaching Activities,"Liu, Junjie and Bai, Yi and Xia, Xiaojun",2023,Sin Valor
Research on enhancing non-major students' abilities based on constructivism,"Wen, Xinxiu and Yang, Zeping and Wang, Zhanquan",2018,"Improving students' abilities of computational thinking and professional problems solving is an urgent issue for non-major students who live in the information age. This paper first analyzes the reasons of the above issue from time gap and guide absence. Constructivism learning theory is then introduced as the guiding principle, and its four core characteristics are elaborated by the computer innovative practice base of East China University of Science and Technology (ECUST). Furthermore, the project based collaborative learning process is illustrated step by step to solve the existed problem. In the end, four years' experimental result shows the method is effective in improving students' abilities of analyzing professional problems, solving professional problem and cultivating computational thinking."
Research on group-based learning teaching mode to computational thinking ability development based on Blackboard system,"Wang, Yintong and Li, Shuo",2021,Sin Valor
Research on Micro-lecture Designing Based on The Development of Computational Thinking,"Wang, Wenxue",2022,"Computational thinking has become the main way of thinking in the era of information 2.0. The cultivation of computational thinking has become the teaching focus of the reform of computer courses in Chinese universities, and also one of the core elements of the information technology standard for senior high school. With the popularization of the internet, various knowledge videos are emerging, while the micro-lecture of computational thinking is rare. In order to explore the design of micro-lecture which is based on computational thinking, this study analyzes literatures and cases. On the basis of combing the elements of computational thinking, it analyzes the embodiment of computational thinking in excellent micro-lecture cases, and discusses how to use micro-lecture to promote the development of learners' computational thinking. On this basis, it shows the design model of micro-lecture basing on the computational thinking development."
Research on Teaching Effectiveness of Computational Thinking Based on Service Learning,"Chen, Bing-Hong and Huang, Tsui-Feng and Chou, Sheng-Chieh",2021,Sin Valor
Research on Teaching of Ideological and Political Education in Computer Foundation Based on Computational Thinking,"Gou, Pingzhang and Zhang, Wenxuan and Han, Yuyue",2021,Sin Valor
Research on the Application of Gamification Programming Teaching for High School Students’ Computational Thinking Development,"Qu, ZhiWei and Liu, JiaMing and Che, Lu and Su, YanXiu and Zhang, Wei",2023,Sin Valor
Research on the Construction of Evaluation Indicators of Students' Computational Thinking Based on Spectral Clustering,"Zhang, Wei and Zeng, Xinyao and Ming, Daoyang and Wang, Jihan",2022,Sin Valor
Research on the Current Situation of Computational Thinking Training in Primary School Information Technology Teaching -- Based on the Literature Analysis of CNKI,"Wang, Yichuan and Xu, Jihong and Pan, Jiaqi",2023,Sin Valor
Research on the Development of Secondary Vocational Students' Computational Thinking Based on Gamiflcation Teaching : —Taking the Secondary Vocational Information Technology Course as an Example,"Ren, Xiaokang and Cai, Tiantian and Wang, Hong and Yang, Deyi",2021,Sin Valor
Research on the Educational Model of Computational Thinking Cultivation in Primary and Middle Schools Oriented to Production-Based Learning,"Zhao, Danqing and Li, Yatao",2022,Sin Valor
Research on the Improvement of Teachers' Computational Thinking Teaching Ability Based on STEM86 Platform,"Wang, Juan and Bai, Xinye and Xiang, Qianchen and An, Langsha and Cai, Minghan and He, Chunlin",2022,"At present, there is a certain lag in the teaching ability of computational thinking in our country. This article is based on STEM86 platform, ISTE published by the author ""Educator standards: Under the guidance of computational Thinking ability, a standard system for evaluating teachers' computational thinking teaching ability was constructed, and a test scale for evaluating teachers' computational thinking teaching ability was designed. The reliability and validity test and difficulty differentiation test proved that the designed test scale had good scientificity and reliability. On this basis, using this scale, through the empirical way, from three dimensions of computer discipline knowledge and skills, teaching design ability, evaluation and reflection ability to evaluate teachers before and after using STEM86 platform computational thinking teaching ability changes. The results show that STEM86 platform not only solves teachers' programming teaching resource needs, but also effectively improves teachers' computational thinking teaching ability, and provides more references and ideas for teachers' computational thinking teaching ability improvement research."
Research on the Instructional design of Computer Foundation Course of University Oriented by Computational Thinking,"Li, Xiao Jing and Liu, Si Qi and Pan, Tong and Chen, Bin Ru and Zhao, Lei and Wang, Ming Ming",2024,Sin Valor
Research on the logical equivalence of C language and App Inventor selection structure : Take the junior high school smart planting project as an example,"Xiaoqin, Lu and Baoling, Gao",2021,Sin Valor
Research on the Social Epistemic Network (SENS) for Promoting Deeper Learning in University Students through Online Knowledge Construction,"Du, Shuang and Hu, Hang",2024,Sin Valor
Research on Topic Evolution Analysis of Computational Thinking Based on Maximum Likelihood Estimation and CiteSpace,"Xu, Yilong and Zhao, Fujing",2022,Sin Valor
Research to Practice: Keeping STEM student recruitment fresh and relevant using peer mentoring,"Clark, Jennifer I.",2020,Sin Valor
Resources for Computational Thinking: Co-designing with Teachers,"Mills, Kelly and Angevine, Colin and Weisgrau, Josh",2020,"Computational thinking (CT) has become a recent policy agenda in order for students to develop interest and foundational understanding in computing and preparation for an increasingly technological workforce. In order to integrate CT into K-12 education, teachers need professional support. The field has faced common challenges developing professional learning experiences and resources that facilitate the integration of computational thinking in authentic, equitable and sustainable ways. We have worked with a cohort of over eighty teachers from around the United States to co-design and pilot pedagogical resources for computational thinking. In this poster, we summarize our co-design process with teachers and share the resources we developed for computational thinking integration."
Rethinking Circle Time: Development of K-2 CT Literacy Integrated Curriculum,"Ottenbreit-Leftwich, Anne and Moore, Tamara J. and Tank, Kristina M. and Kim, Jiyoung and Fagundes, B\'{a}rbara and Chu, Lin and Wafula, Zarina",2023,"Students can begin to lose interest in CS as early as 2nd grade, indicating the importance of engaging students in CS as early as possible. This study examined the integration of computational thinking (CT) into literacy activities in early childhood education (K-2). We describe the co-design process of developing computational thinking literacy integrated curriculum for K-2, and preliminary results of K-2 student engagement in CT and literacy activities"
Rethinking computational thinking,CACM Staff,2016,Sin Valor
Rethinking Debugging as Productive Failure for CS Education,"Kafai, Yasmin B. and DeLiema, David and Fields, Deborah A. and Lewandowski, Gary and Lewis, Colleen",2019,"Computational thinking has become the calling card for re-introducing coding into schools. While much attention has focused on how students engage in designing systems, applications, and other computational artifacts as a measure of success for computational thinking, far fewer efforts have focused on what goes into remediating problems in designing systems and interactions because learners invariably make mistakes that need fixing-or debugging. In this panel, we examine the often overlooked practice of debugging that presents significant learning challenges (and opportunities) to students in completing assignments and instructional challenges to teachers in helping students to succeed in their classrooms. The panel participants will review what we know and don't know about debugging, discuss ways to conceptualize and study debugging, and present instructional approaches for helping teachers and students to engage productively in debugging situations."
Rethinking the Development of Computational Thinking Skills in Young Children through Nature Play,"Om, Chimi and Brereton, Margot and Vella, Kellie and Ploderer, Bernd and Dema, Tshering and Dobson, Madeleine Rose and Murcia, Karen",2024,"Nature connection fosters children's healthy development, and long-term sustainable behaviours. Most research into children-nature connection has focused on positive experiences. However, theories of constructive hope suggest that as well as imbuing a love of nature we should also help children understand environmental challenges. Computational thinking is a skillset that might help young children frame and address complex problems. This skillset is currently exclusively developed indoors using technological devices and indoor activities. Our research explored an opportunity to develop young children's computational thinking skills through nature play. An observation and contextual inquiry study was conducted with young children in an Early Childhood Education Centre. We found that computational thinking is evident in children's outdoor nature play and that HCI research could undertake design to further enhance their computational thinking skills outdoors. This can add value to their learning by harnessing their interest, understanding and connection, and by introducing children to environmental problem-solving."
Robobuilder: a computational thinking game (abstract only),"Weintrop, David and Wilensky, Uri",2013,"RoboBuilder is a blocks-based, program-to-play game designed to introduce students to core aspects of computational thinking in a fun and engaging environment. The game employs a constructionist design to challenge players to invent and implement strategies to control an on-screen robot using a specially designed visual programming language. During the game, players' robots compete against a series of progressively more challenging opponents in one-on-one battles. Through playing the game, players construct working programs, providing learners with the experience of reifying their own ideas using a computational medium, a practice central to our notion of computational thinking. This poster presents the design rationale for RoboBuilder and discusses key aspects of the game that contribute to giving learners a positive, hands-on introduction to core computational thinking skills including computationally expressing ideas, algorithmic thinking, and debugging."
RoboSTEAM - A Challenge Based Learning Approach for integrating STEAM and develop Computational Thinking,"Conde, Miguel \'{A}. and Fern\'{a}ndez, Camino and Alves, Jonny and Ramos, Mar\'{\i}a-Jo\~{a}o and Celis-Tena, Susana and Gon\c{c}alves, Jos\'{e} and Lima, Jos\'{e} and Reimann, Daniela and Jormanainen, Ilkka and Pe\~{n}alvo, Francisco J. Garc\'{\i}a",2019,"We live in a digital society that needs new better prepared professionals for the new challenges and opportunities provided by the ICT. Students must learn how to deal with all the issues that emerge in this new context. They should acquire computational thinking skills by integrating STEAM, however this needs for changes in current learning curricula and also new learning approaches. RoboSTEAM project deals with this issue by the application of a Challenge Based Learning approach that uses Robotics and Physical Devices. One of the problems found during the project is the complexity of the application of a Challenge Based Learning approach due to the special needs of each educational institution. Given this situation the present work presents provides a flexible definition of challenge and describes also samples regarding how to use them."
RoboSTEAM project the pilot phases,"Conde, Miguel \'{A}ngel and Fern\'{a}ndez, Camino and Rodr\'{\i}guez-Sedano, Francisco and Gonz\'{a}lez-Barrientos, Covadonga and Ramos, Maria and Jesus, Manuel and Gon\c{c}alves, Jos\'{e} and Reimann, Daniela and Garc\'{\i}a Pe\~{n}alvo, Francisco Jos\'{e} and Jormanainen, Ilkka",2021,"Digital society demands very qualified professionals ready to this environment challenges. This makes necessary to foster the development of competences related to such context such as Computational Thinking or STEAM related skills. However, this is not an easy task, especially because integrating subjects that covers the necessary topics and competences. New active pedagogical approaches are required and this what RoboSTEAM project provides. The application of Challenge Based Learning and Physical Devices and Robotics facilitate the so named twenty first century skills. The project has been developed by several universities and schools and one of most critical parts was testing the methodology and tools, this was done into pilot phases that are described in the present work. The results show that there are important differences between partners socioeconomical context, but that the outcomes of the project are flexible enough to be applied successfully in any of them."
ROBOSTEAMSEN Project - Training SEN Teachers to Use Robotics for Fostering STEAM and Develop Computational Thinking*,"Conde, Miguel Á. and Rodríguez-Sedano, Francisco J. and García-Peñalvo, Francisco J. and Gonçalves, Jose and Jormanainen, Ilkka and Anzanello, Andrea and Alves, Jonny Filipe Ribeiro and Hernáandez, Raquel Fernández and Ailincai, Alina- Andreia",2024,Sin Valor
Robotics Club Students Create Interactive Model of Ilse Teske Sculpture Park,"Sant'Ana, Vanessa Lopes and Bottamedi, Venicio and Maffezzolli, Graziela",2024,Sin Valor
Robotics rule-based formalism to specify behaviors in a visual programming environment,"Marghitu, Daniela and Coy, Stephen",2015,Sin Valor
Robotito: programming robots from preschool to undergraduate school level,"Tejera, Gonzalo and Amorin, Guillermo and Sere, Andrés and Capricho, Nicolás and Margenat, Pablo and Visca, Jorge",2019,Sin Valor
RPP for Geocomputation: Partnering on Curriculum in Geography and Computer Science,"Dony, Coline C. and Magdy, Amr and Rey, Sergio and Nara, Atsushi and Herman, Thomas and Solem, Michael",2019,Sin Valor
RULER: Prebugging with Proxy-Based Programming,"Repenning, Alexander and Basawapatna, Ashok",2024,Sin Valor
"Run, Llama, Run: A Computational Thinking Game for K-5 Students Designed to Support Equitable Access","Koornneef, Stacey A. and Bradbury, Jeremy S. and Miljanovic, Michael A.",2023,"Computational thinking is now included in K-5 classrooms and this has led to a demand for new interactive and collaborative learning tools that engage a younger audience. Block-based programming and educational games have both been shown to be effective at engaging children, however they have limitations with respect to supporting collaborative learning and equitable access. Our goal in designing Run, Llama, Run was to build on the positive aspects of block-based programming and educational games while also addressing these limitations. Furthermore, we are using Run, Llama, Run as a platform to explore the trade-offs between digital and tangible interfaces to understand how best to support equitable access while maintaining learning, engagement, and collaboration."
Rural Research-to-Practice Partnerships Integrating Computer Science K-8,"Kermish-Allen, Ruth and Buffingston, Pamela and Byrd, Scott and Nickerson, Brittney and Tate, Rhonda",2020,Sin Valor
Scaffolded Training Environment for Physics Programming (STEPP): Modeling High School Physics using Concept Maps and State Machines,"Kitagawa, Midori and Fishwick, Paul and Kesden, Michael and Urquhart, Mary and Guadagno, Rosanna and Jin, Rong and Tran, Ngoc and Omogbehin, Erik and Prakash, Aditya and Awaraddi, Priyanka and Hale, Baily and Suura, Ken and Raj, Aniket and Stanfield, James and Vo, Henry",2019,"We are a year into the development of a software tool for modeling and simulation (M&amp;S) of 1D and 2D kinematics consistent with Newton's laws of motion. Our goal has been to introduce modeling and computational thinking into learning high-school physics. There are two main contributions from an M&amp;S perspective: (1) the use of conceptual modeling, and (2) the application of Finite State Machines (FSMs) to model physical behavior. Both of these techniques have been used by the M&amp;S community to model high-level ""soft systems"" and discrete events. However, they have not been used to teach physics and represent ways in which M&amp;S can improve physics education. We introduce the NSF-sponsored STEPP project along with its hypothesis and goals. We also describe the development of the three STEPP modules, the server architecture, the assessment plan, and the expected outcomes."
Scaffolding Computational Thinking With ChatGPT,"Liao, Jian and Zhong, Linrong and Zhe, Longting and Xu, Handan and Liu, Ming and Xie, Tao",2024,Sin Valor
Scaffolding Creative Programming Projects,"Repenning, Alexander and Grabowski, Susanne",2024,"While most teachers welcome the idea of learning activities fostering creativity, it is not clear how to effectively scaffold creativity. Without suitable pedagogical approaches, it is difficult to provide appropriate levels of scaffolding. Over-scaffolding, on the one hand, while providing support appreciated especially by less experienced students, leaves little room for creative expression. Under-scaffolding, on the other hand, while fostering more authentic learning opportunities with a high potential for creativity, can lead to student frustration. The Process Artifact Creativity Landscape (PACL) is a framework that helps pre-service teachers scaffold creative projects. PACL consists of a two dimensional space providing four scaffolding approaches offering different tradeoffs between scaffolding and creativity. This paper introduces the PACL framework and outlines experiences with K–6 preservice teachers reasoning about scaffold creative programming projects."
Scaffolding Expertise: Evaluating Scaffolds for Block-Based Coding Among Experts and Novices,"Zhang, Yifan and Rutherford, Teomara",2024,"Coding for computer programming is a common way to support and assess computational thinking (CT) skills, a set of problem-solving skills essential for computer science (CS) and STEM more broadly. We designed a coding platform, Fox and Field, to determine what kinds of scaffolds can encourage novice coders to behave more like experts. We compared actions between 221 upper-division undergraduate CS/engineering (expert, n=106) and social science (novice, n=115) majors randomized to scaffolding conditions from four universities in the United States. Overall, experts used statistically significantly more practices aligned with CT skills, such as those that increased code efficiency (e.g., non-right angle turns, loops). This difference disappeared when novices were scaffolded by being told to use fewer codes or by priming with critical features. Both experts and novices were equally likely to be swayed by purposefully distracting features within the platform, such as a drawn path to deflect them from the most efficient solution. Results present initial evidence regarding which features of coding platforms can direct students to exercise CT-linked practices, leading to recommendations regarding platform development to better support learning."
Scaffolding to Support Humanities Students Programming in a Human Language Context,"Guzdial, Mark",2023,"Language is a key topic of interest for students in the humanities -- language is the way in which humans express themselves, communicate, and make art. Computing on language (e.g., recognizing language, generating language, building bots) can be a pathway into using computing for humanities contexts. At the University of Michigan, we are developing a new program to support students in liberal arts and sciences to learn about computing, explicitly including programming. We have designed two courses for introducing computing (1) in terms of creative expression and (2) around the implications of computing on justice. In both classes, we use a scaffolded sequence of programming languages and activities to explore computing on language: (a) a teaspoon language for sentence generation and recognition, (b) a set of custom Snap blocks for sentence generation and recognition, (c) a set of custom Snap blocks for building Chatbots, and (d) an ebook activity for mapping from Snap to Python. Each language takes less than 10 minutes to introduce, with a wide variety of possible student activities (for in-class active learning or for later homework). While the tools build on each other, the earliest stage (the teaspoon language) could be used within a single class session in linguistics, communications, or other liberal arts courses."
Scaffolding to Support Liberal Arts Students Learning to Program on Photographs,"Guzdial, Mark",2023,"Digital photographs are part of liberal arts students' classes (e.g., art, history, and production classes in film and television) and their daily smartphone-based life, in apps like Instagram and Snapchat. Building image filters can be a relevant and engaging context into using computing for humanities students. We have designed a new course for introducing computing in terms of creative expression. We use a scaffolded sequence of programming languages and activities to explore computing on photographs: (a) a teaspoon language for generating image filters, (b) a set of custom Snap blocks for even more sophisticated image filters, and (c) an ebook activity for mapping from Snap to Python. Each stage takes less than 10 minutes to introduce, with a wide variety of possible student activities (for in-class active learning or for later homework). While the tools build on each other, the earliest stage (the teaspoon language) could be used within a single class session in other liberal arts courses."
Scalable game design and the development of a checklist for getting computational thinking into public schools,"Repenning, Alexander and Webb, David and Ioannidou, Andri",2010,"Game design appears to be a promising approach to interest K-12 students in Computer Science. Unfortunately, balancing motivational and educational concerns is truly challenging. Over a number of years, we have explored how to achieve a functional balance by creating a curriculum that combines increasingly complex game designs, computational thinking patterns and authoring tools. Scalable Game Design is a research project exploring new strategies of how to scale up from after school and summer programs into required curriculum of public schools through game design approaches. The project includes inner city schools, remote rural areas and Native American communities. A requirement checklist of computational thinking tools regarding curriculum, teacher training, standards and authoring tools has been developed and is being tested with thousands of students."
Scaling Up Collaborative Dialogue Analysis: An AI-driven Approach to Understanding Dialogue Patterns in Computational Thinking Education,"Yin, Stella Xin and Liu, Zhengyuan and Goh, Dion Hoe-Lian and Quek, Choon Lang and Chen, Nancy F.",2025,"Pair programming is a collaborative activity that enhances students’ computational thinking (CT) skills. Analyzing students’ interactions during pair programming provides valuable insights into effective learning. However, interpreting classroom dialogues is a challenging and complex task. Due to the simultaneous interaction between interlocutors and other ambient noise in collaborative learning contexts, previous work heavily relied on manual transcription and coding, which is labor-intensive and time-consuming. Recent advancements in speech and language processing offer promising opportunities to automate and scale up dialogue analysis. Besides, previous work mainly focused on task-related interactions, with little attention to social interactions. To address these gaps, we conducted a four-week CT course with 26 fifth-grade primary school students. We recorded their discussions, transcribed them with speech processing models, and developed a coding scheme and applied LLMs for annotation. Our AI-driven pipeline effectively analyzed classroom recordings with high accuracy and efficiency. After identifying the dialogue patterns, we investigated the relationships between these patterns and CT performance. Four clusters of dialogue patterns have been identified: Inquiry, Constructive Collaboration, Disengagement, and Disputation. We observed that Inquiry and Constructive Collaboration patterns were positively related to students’ CT skills, while Disengagement and Disputation patterns were associated with lower CT performance. This study contributes to the understanding of how dialogue patterns relate to CT performance and provides implications for both research and educational practice in CT learning."
School-wide Integration of Computational Thinking into Elementary Schools: A Cross-case Study,"Yan, Wei and Liu, Ruohan and Israel, Maya and Sherwood, Heather and Fancsali, Cheri and Pierce, Melissa",2020,"This study investigated school-wide integration of computational thinking (CT) in elementary schools of: 1) systems-level approaches to integration; 2) teachers' understanding and implementation of CT integration, and 3) challenges to integration. Data sources include interviews with teachers, professional development (PD) providers, principals as well as implementation observations. Findings revealed three distinct approaches: (a) Lone STEM teacher implementer, (b) PD scaffolded approach, and (c) Whole school coach-in-residence approach. Teachers generally viewed CT in the context of problem-solving. Although struggles and challenges existed in all three schools, administrators, PD providers, and teachers all had a high commitment to CT integration."
"Scientific Inquiry in Middle Schools by combining Computational Thinking, Wet Lab Experiments, and Liquid Handling Robots","Fuhrmann, Tamar and Ahmed, Deeana Ijaz and Arikson, Len and Wirth, Mike and Miller, Mark L and Li, Ethan and Lam, Amy and Blikstein, Paulo and Riedel-Kruse, Ingmar",2021,"Computational thinking (CT) is necessary for Science, Technology, Engineering, and Mathematics (STEM) literacy, but it can be difficult for many students to develop and it is challenging to integrate into science curricula. Here, we present a five-session curriculum where sixth-grade students programmed a Liquid Handling Robot (LHR) to conduct a science experiment while engaging in CT. We used a mixed-methods approach to assess how the curricular integration of robotics and science experimentation advances students’ CT skills and perceptions of computation in science. We identified growth in CT skills, specifically regarding Algorithmic Thinking. Students identified as key advantages of this approach the increased precision in experimental procedures, time-efficiency, and easier debugging. This course provides a proof of concept curriculum on how the implications for teaching and learning of CT can be assessed, and how CT and robotics can be brought to science classrooms, especially for chemistry and biology."
SciGirls Code: Computational Participation for Middle School Girls,"Scharber, Cassandra and Chang, Yu-Hui and Barksdale, Sarah and Peterson, Lana and Constantine, Angelina and Sivaraj, Ramya and Englund, Jennifer",2019,"SciGirls Code is a project which used the principles of connected learning with 16 STEM outreach partners to provide 160+ middle school girls with computational thinking (CT) and coding skills within informal education spaces. Programs completed 3 curricular strands (Mobile Apps, Robotics, E-Textiles) between September 2017-May 2018. SciGirls Code integrates a computational participation framework with connected learning. The research study investigates the ways in which computational learning experiences impact girls' development of CT; interest and attitudes toward computer science; and their understanding of how participation in technology creation impacts themselves and the world around them. This study utilizes an interpretive multi-site case study design. There are multiple data sources with different data collected at focal and participating sites. The seven (7) focal cases represent an array of settings (rural, suburban, urban) as well as a variety of programming contexts (museums, community centers, after school). The remaining nine (9) sites comprise the participating cases. Notably, interviews (in-person) from focal sites and shorts (videos) from participating sites were collected at three moments in the programming (beginning, middle, end) to document changes in understandings and skills. Content analysis was conducted, and further triangulated in teams, to develop themes for each case and cross-case comparison. Thus far, the study has found that a connected learning approach boosted the development of middle school girls' CT skills, positively impacted attitudes towards computing pathways/careers, and increased understandings of computational participation."
Scope Rule Comprehension by Novice Python Programmers,"Holliday, Mark A.",2025,"Understanding scope rules, the rules for the binding of variable uses with variable declarations, is a necessary skill for reading and understanding program code. It is also one that novice programmers often find challenging. To better understand which misconceptions novice Python programmers commonly hold about scope rules, we pose the question of ""To what extent do misconceptions exist even for a simple subset of scope rule features?"". The answer to this question can determine the level of complexity of scope rule features the instructor should focus on.We consider a subset of Python that only has non-recursive and non-nested function definitions, scalar variables, and global code that calls the function definitions. We also consider the variable categorization into local variables, parameters, and global variables. We developed an assessment tool that we used as part of the final examination in a CS1 course for three semesters. We found that though there were significant misconceptions for some features, the number of such features is limited. This identification of the common misconceptions for this subset of Python can aid in revising the instructional focus to help future students better understand scope rules."
Scratch Analysis Tool(SAT): A Modern Scratch Project Analysis Tool based on ANTLR to Assess Computational Thinking Skills,"Chang, Zhong and Sun, Yan and Wu, Tin-Yu and Guizani, Mohsen",2018,Sin Valor
Scratch Project Analysis: Relationship Between Gender and Computational Thinking Skill,"Niousha, Rose and Saito, Daisuke and Washizaki, Hironori and Fukazawa, Yoshiaki",2022,Sin Valor
Scratch software in higher education: Pedagogical experience in educational science,"Almeida, Ricardo and Pessoa, Teresa",2017,Sin Valor
Scratch-NB: A Scratch Extension for Introducing K-12 Learners to Supervised Machine Learning,"Quiroz, Patricio and Gutierrez, Francisco J.",2024,"Artificial Intelligence has rapidly captured-again-the attention of practitioners and the CS Education community. Several initiatives have been spawning to identify effective ways to introduce learners at college and high-school levels to the basics of AI. In this context, we developed Scratch-NB, an extension to the Scratch programming language to equip K-8 learners with foundational tools for developing a Naive-Bayes classifier, explicitly transparenting its internal components. We opted to use Scratch due to its popularity within the CS4All movement and its predominance in schools, and extend the language with a simple implementation of the Naive Bayes classifier as a gateway for introducing basic notions of supervised learning and AI. In this paper, we report the design rationale of our tool and our experience of using it in an informal workshop with children aged 10-12 with no prior knowledge of computational thinking, coding, or AI. The obtained results show that Scratch-NB showed high levels of acceptance among the participants, raised interest in AI, and effectively provided basic foundations, particularly when comparing Scratch-NB with other state-of-the-art tools targeted to this learner group. We argue that our tool has the potential to illuminate further practical and research endeavors when exploring how to effectively introduce younger populations to the foundational notions of AI in practical contexts."
Scratching Out Problems: Exploring the Use of Computational Thinking for Social Work in Rural India,"Anitha, Parameswari and Babu, Sooraj K. and R., Unnikrishnan and Bhavani, Rao R.",2018,Sin Valor
Searching for Early Developmental Activities Leading to Computational Thinking Skills,"Cutts, Quintin and Donaldson, Peter and Cole, Elizabeth and Alshaigy, Bedour and Gutica, Mirela and Hellas, Arto and Larraza-Mendiluze, Edurne and McCartney, Robert and Patitsas, Elizabeth and Riedesel, Charles",2017,"Drawing on the long debate about whether computer science (CS) and computational thinking skills are innate or learnable, this working group is based on the following hypothesis: The apparent innate ability of some CS learners who succeed in CS courses despite no prior exposure to computing is a manifestation of early childhood experiences and learning outside formal education."
Second International Workshop on Software Research and Climate Change,"Easterbrook, Steve and Mens, Kim and Zschaler, Steffen",2010,Sin Valor
See Logic In Life: An Individualized Exercise Structure for Making and Sharing Computing Concept Connections,"Spezialetti, Madalene",2024,"Computing and computing concepts are interconnected with virtually every aspect of daily life and every field of study. However, when teaching new computing concepts to novice programmers, the number of example domain applications that can be presented is extremely limited. In addition, programming assignments where students apply these concepts are typically closed-ended, fully defining the problem to be solved. As a result, there are few opportunities for students to take an active role in creating connections between computing concepts and situations where they can be applied. See Logic in Life exercises are short, non-programming exercises comprised of a logical and a visual component. The exercise format provides opportunities for students to explore and create their own connections between computing concepts and application domains. Further, by sharing these connections with fellow classmates, students are exposed to a breadth of applications for a given concept via a peer learning experience. Student feedback on the impacts of both creating and sharing computing connections via See Logic in Life exercises is presented. Sample See Logic in Life exercises, suitable for use in CS0 or CS1 as in-class, out-of-class, or active learning exercises, are freely available at youtube.com/virt-university."
Selecting examples for CS courses: the case of a computational thinking MOOC,"Ragonis, Noa and Bukai, Ayelet and Hazzan, Orit",2022,Sin Valor
Self-Efficacy to Train Computational Thinking Skills in Pre-Service Teachers*,"Talavera-Mendoza, Fabiola and Paucar, Fabian Hugo Rucano and Alarcón, Diego Antonio Urdanivia",2023,Sin Valor
Self-organizing maps to find computational thinking features in a game building workshop,"Souza, A. A. and Barcelos, T. S. and Munoz, R. and Silveira, I. F. and Omar, N. and Silva, L. A.",2017,Sin Valor
Sequential Behavior Analysis of Interdisciplinary Activities in Computational Thinking and EFL Language Learning With Game-Based Learning,"Hsu, Ting-Chia and Chang, Ching and Liang, Yi-Sian",2024,Sin Valor
Sequential Behavior Analysis of Interdisciplinary Activities in Computational Thinking and EFL Learning With Game-Based Learning,"Hsu, Ting-Chia and Chang, Ching and Liang, Yi-Sian",2023,Sin Valor
SERIES FOREWORD,"Denning, Peter J. and Tedre, Matti",2019,Sin Valor
Session details: Coding and Computational Thinking (Full Paper Session),"Horn, Michael and Zaman, Bieke",2017,Sin Valor
Session details: Computational thinking,"Pala, Jill",2011,Sin Valor
Session details: Computational thinking,"Craig, Annemieke",2010,Sin Valor
Session details: Computational thinking,"Henderson, Peter",2007,Sin Valor
Session details: Computational thinking,"Henderson, Peter",2007,Sin Valor
Session details: Computational thinking across disciplines,"Rabung, John",2009,Sin Valor
Session details: Computational thinking across disciplines,"Rabung, John",2009,Sin Valor
Session details: Focus on K-12: outreach and computational thinking,"Javidi, Giti",2014,Sin Valor
Session details: Metacognition and Computational Thinking,"Montero, Calkin Suero",2019,Sin Valor
Session details: Panel: computational thinking: on weaving it in,"Peckham, Joan",2009,Sin Valor
Session details: Panel: computational thinking: on weaving it in,"Peckham, Joan",2009,Sin Valor
Session details: Paper - computational thinking,"Lang, Catherine",2013,Sin Valor
Session details: Paper Session: Computational Thinking,"Pulimood, Monisha",2016,Sin Valor
Session details: Paper Session: Computational Thinking #1,"Hawthorne, Elizabeth",2018,Sin Valor
Session details: Paper Session: Computational Thinking #2,"Turner, Scott",2018,Sin Valor
Session details: Paper Session: Computational Thinking 2,"Ray, Meg",2019,Sin Valor
Session details: Paper Session: Computational Thinking Assessment,"Allen, Meghan",2020,Sin Valor
Session details: Paper Session: Computational Thinking B,"Maiorana, Francesco",2020,Sin Valor
Shape of Music: AR-based Tangible Programming Tool for Music Visualization,"Jin, Qiao and Wang, Danli and Yun, Haoran and Yarosh, Svetlana",2023,"Integrating music into Computer Science (CS) education can stimulate children’s creativity, change the stereotypical perspective of CS, and encourage women, ethnic or cultural minorities involved in the Computer Science area. In this paper, we use Augmented Reality (AR) technology to design a tangible programming system - AR-MPro for children, acting as a bridge between programming and music. It allows children to create customized AR effects to visualize music with low-cost materials by constructing tangible program sequences. AR-MPro is expected to broaden participation in computing, and be more intuitive, intriguing and instructional to enrich children’s creating and programming experiences."
Simplifying Multimedia Programming for Novice Programmers: MediaLib and Its Learning Materials,"Wynn, Adam and Wang, Jingyun and Valente, Andrea",2024,"Beginner programmers can develop an intuitive understanding of programming by leveraging the motivating field of multimedia to visually inspect outputs and experiment with different ways to solve problems. This paper presents MediaLib, a Python library designed to facilitate multimedia programming and lessen the cognitive load associated with programming for novice programmers. In addition, we designed an official MediaLib website which contains the library itself, two tutorials, and clear documentation. The tutorial clearly presents the learning objectives of each lesson and contains exercises related to MediaLib. We designed these exercises to help students gain knowledge incrementally, without requiring in-depth maths knowledge."
Simulating Election Votes,"Popov, Aleksandr",2024,"CS0 and CS1 courses are becoming an essential part of many social science programs, including sociology and political science. This particular assignment was designed as part of the 'Basics of Programming in Python' course for undergraduate political science students. The course aims not only to prepare students for the unified programming exam, but also to apply concepts of computational thinking in the context of political science problems. By linking these fields, students learn to overcome inner barriers in coding and explore the potential of computational social science methods for both academic path and career.  This project seeks such a connection between subjects of political science major as Comparative Electoral Systems and Quantitative Methods of Political Research, and concepts of computer science. Students process the generated votes, applying critical thinking to identify spoilt ballots, and then formulate rules for counting votes (First-past-the-post, Borda count, Condorcet winner criterion) in algorithmic form. Optionally, a short essay can be added in which students are asked to speculate about political leanings, the transitivity of preferences and the advantages/disadvantages of particular electoral systems based on analyses of the data in the assignment. As the result, students not only develop hard skills in programming, but most importantly conceptualize complicated topics through the prism of their specialization, fostering the ability to see the connections between these fields and understand how they can work together to address complex real-world scenarios."
Simultaneously Fostering Computational Thinking and Social-Emotional Competencies in 4th Graders Using Scratch: A Feasibility Study,"Maitz, Katharina and Paleczek, Lisa and Danielowitz, Claudia",2022,"Social-emotional skills and computational thinking are related to problem-solving skills. Even though these are crucial areas in today’s world, they are only rarely taught in school and interventions that target these areas simultaneously are still very rare. We therefore developed a four-day workshop with the aim of fostering computational thinking and social-emotional skills in Grade 4 students. To do so, we used the child-friendly programming language Scratch. In the present paper, we investigate the feasibility of such a workshop. In total, 18 students participated. Data was collected via observation and interviews and analysed by qualitative content analysis. Results showed that students liked working with Scratch and liked working on social-emotional challenges. The workshop was found to work well and students worked independently. Pair work activity was found to be particularly beneficial. Although some issues initially proved challenging (mostly relating to “how to” issues in Scratch), these may easily be addressed by making suitable adaptations to the introduction of the program provided on Day 1 of the workshop."
Situating Computational Thinking with Big Data: Pedagogy and Technology (Abstract Only),"Bart, Austin Cory",2015,"As Computational Thinking becomes pervasive in undergraduate programs, new students must be educated in meaningful, authentic contexts that they find both motivating and relatable. I propose working with big data as a novel context for introductory programming, authentic given its importance in diverse fields such as agriculture, history, and more. Big data is considered difficult to use because of its inherent technical obstacles. To overcome these difficulties, I introduce a new project: CORGIS - a ""Collection of Real-time, Giant, Interesting, Situated Datasets"". The CORGIS project comprises a collection of libraries that provide an interface to big data for students, architectures for rapidly enabling new datasets, and a web-based textbook platform for disseminating relevant course materials. This textbook features an online block-based programming environment, real-time collaborative text editing, and continuous server-side storage. In this poster, I describe the educational theory guiding this work, the novel technolgy created and deployed, and the initial, promising results."
Smacking Screws with Hammers: Experiencing Affordances of Block-based Programming through the Hourglass Challenge,"Repenning, Alexander and Basawapatna, Ashok",2021,"Block-based programming languages effectively address syntactic difficulties allowing users to more easily create code. Syntactic code support is no doubt a crucial step in enabling the next generation of programmers. However, in what other ways do these tools support the computational thinking (CT) process? For example, how is CT supported in both the semantic and pragmatic levels? Most users do not just want to write code?they want to create interesting artifacts such as video games, simulations, stories and robots. No doubt that users must code to build these artifacts, but just as important, though often overlooked, is that users must also have an understanding of tool affordances to effectively build these artifacts. The position presented in this paper is that the comprehension of affordances is essential to each stage of the computational thinking process. To that end, we introduce the Hourglass Challenge as a way for students to experience affordances through a programming challenge based on mis-aligned tools and problems. The results from a study, with 54 preservice elementary school teachers, indicate that the affordances of tools can have profound consequences on computational thinking. For instance, the affordances various tools provide can be the difference between creating a simulation versus an animation. But just as hammers are not intrinsically better tools than screwdrivers, the contribution of this position paper is not to compare tools, but to promote efforts that enable learners to develop a better understanding of computational thinking tool affordances as essential mediators between problems and tools."
Smart City Kids Lab: Creative Computing in Primary School,"Gomes, Cristina Azevedo and Gomes, Helena and Rego, Belmiro and Sousa, Bárbara and Loureiro, Manuela and Rocha, Pedro",2019,Sin Valor
Smart textile objects and conductible ink as a context for arts based teaching and learning of computational thinking at primary school,"Reimann, Daniela and Maday, Christiane",2016,"The shaping of Smart Textile artefacts brings together a variety of learning activities, such as imagining, designing, drawing, constructing, wiring, programming, controlling, testing, debugging and presenting self-made, invented media objects, realized in project- and team based arrangements. A variety of human senses are addressed when pupils develop and sketch their project ideas to be realized. In the paper, we discuss the topic of self-made Smart Textile objects as a learning content for primary school level, towards the development of curriculum modules for project learning in the classroom as well as teacher training. It was developed in the 'Teachers Aids on Creating Contents for Learning Environments' TACCLE3 coding project."
Social computational thinking tools: reinventing computation education in public schools,"Repenning, Alexander",2011,"For the last 15 years we have been exploring notions of design and social media as means to foster highly engaging as well as effective educational environments. We have created what we call social computational thinking tools with the goal to synthesize human abilities with computer affordances. This presentation will outline three social computational thinking tools and discuss how they have combined notions of design and social media to create unique learning experiences in the classroom:1) Mr. Vetro is a Collective Simulation teaching students about human physiology through technologically enhanced role play of interacting organs,2) Scalable Game Design teaches students computational thinking through game design. They learn about computational thinking patterns in the context of game design and later apply these patterns to scientific simulation building.3) CyberCollage is a Collective Programming environment enabling students to work on game and simulation projects collaboratively in real time."
Social Robot to teach coding in primary school,"Lanzilotti, Rosa and Piccinno, Antonio and Rossano, Veronica and Roselli, Teresa",2021,Sin Valor
Software clones in scratch projects: on the presence of copy-and-paste in computational thinking learning,"Robles, Gregorio and Moreno-León, Jesús and Aivaloglou, Efthimia and Hermans, Felienne",2017,Sin Valor
Sol y Agua: A Game-based Learning Platform to Engage Middle-school Students in STEM,"Akbar, Monika and Dura, Lucia and Gates, Ann Q. and Ortega, Angel and Roy, Mary K and Santiago, Claudia and Tellez, Jesus G and Villa, Elsa",2018,Sin Valor
Solving problems by drawing solution paths,"Tanimoto, Steven L.",2015,Sin Valor
Some Observations Regarding Geocomputational Teaching through Interdisciplinary Teams,"Dean, Denis J.",2019,"Geocomputation is an inherently interdisciplinary topic, combining both geospatial information science (GISc) and computer science (CS). It could be taught by individuals with strong backgrounds in both areas, but it is argued that such individuals are rare and academia is poorly positioned to produce a future generation of such dual-skilled individuals. Interdisciplinary team teaching is presented as an alternative. Hurdles to developing such team-taught classes are identified, and possible ways to overcome them are presented. Finally, a way of restructuring academia to be more supportive of such interdisciplinary team projects is presented."
Source Academy: A Web-based Environment for Learning Programming with SICP,"Henz, Martin",2023,"The Source Academy is a community-built immersive online environment for learning computing with the book Structure and Interpretation of Computer Programs (SICP). An interactive version of the textbook is integrated into the system, and the programming environment of the Source Academy allows learners to focus on SICP-specific sublanguages of JavaScript (Python and Scheme versions in preparation). The environment includes tools to support SICP's mental models for computational processes and data, including a stepper that animates the substitution model of Chapter 1, a data visualizer that supports the box-and-pointer diagrams of Chapter 2, and a visualizer for the environment model of Chapter 3.The system is web-based (no software installation required) and supports dynamically loadable plugins (modules) for programming with graphics, audio, image, and video processing. An extension called Source Academy @ X provides Learning Management System features such as the management of programming assessments and their manual and automatic grading. Source Academy @ X includes gamification components such as achievements, contests, levels, and a game that offers a narrative to contextualize the assessments.The 45-minute demo provides CS educators with an overview of the Source Academy, including its tools, modules, and textbook integration, the Source Academy @ X extension for course management and a preview of Python and Scheme versions."
Specific Didactic Strategies Used for the Development of Computational Thinking in the Female Collective in Primary and Secondary Education: A Systematic Review Protocol,"Torres-Torres, Yucnary-Daitiana and Rom\'{a}n-Gonz\'{a}lez, Marcos and P\'{e}rez-Gonz\'{a}lez, Juan-Carlos",2021,"Science, Technology, Engineering, Arts and Mathematics (STEAM) are fundamental basis for the development of our society. From this perspective, it is necessary to educate all people to solve problems underlying computer programming tasks since it is an important foundation of the STEAM world. Consequently, it is urgent to implement proposals aimed at the development of computational thinking, especially for girls since there is little representation of this group in the STEAM context. Therefore, this work is based on a systematic review protocol aimed at identifying the different strategies in the teaching and learning of computational thinking from a gender perspective, generating an alert regarding the needs of the female group in learning computational thinking and promoting gender-equitable education in this regard."
Sphero.Math: a computational thinking-enhanced fourth grade mathematics curriculum,"Weintrop, David and Walkoe, Janet and Walton, Margaret and Bih, Janet and Moon, Peter and Elby, Andrew and Bennett, Bianca and Kantzer, Madison",2022,"Computational thinking (CT) constitutes an essential set of skills and practices that all students should learn in order to effectively and meaningfully participate in an increasingly computational world. This paper introduces Sphero.Math, a curriculum that integrates CT concepts and practices into 4th-grade mathematics classrooms using the Sphero robot. Sphero.Math was co-designed with school district partners in such a way as to achieve two central design goals. First, integrate CT and mathematics in a mutually-supportive way, meaning that learners engage with CT as a means to deepen mathematics learning and that mathematics serves as a context to learn CT. Second, create a CT-infused curriculum using existing school/district resources that is designed to fit within the constraints of public school classrooms. Along with introducing Sphero.Math and its design goals, this paper presents empirical evidence for the types of CT and math learning opportunities that Sphero.Math can provide for students. In doing so, this work contributes to our understanding of ways to productively integrate CT into elementary classrooms and advances our understanding of how to work within existing educational infrastructure to provide effective and equitable CT learning opportunities for all students."
Sports Analytics as a Context for Computational Thinking in K-12 Education,"Floyd, Steven Paul and Sorbara, Luigi",2019,"As educational jurisdictions around the world begin to integrate computational thinking (CT) into their K-12 mandatory curriculum, there is a need to ensure that classroom activities are engaging, relate to student interests, and effectively promote the development of CT skills. The analysis of sports performance data fulfills this criteria for some students and teachers and presents an exciting context in which students from all K-12 grades can access complex CT concepts. This lightning talk investigates sports analytic tasks within the context of the CT in mathematics and science taxonomy introduced by Weintrop et al. (2015). Specific classroom activities are presented including analyzing the distribution of soccer goals, baseball salaries, the location of successful basketball shots, and the placement of volleyball serves. Examples of data analytics projects will be shared and the four main components of the taxonomy (data practices, modelling and simulation practices, computational problem-solving practices and systems thinking practices) will be identified within each project."
Starting from scratch: Developing a pre-service teacher training program in computational thinking,"Bean, Nathan and Weese, Joshua and Feldhausen, Russell and Bell, R. Scott",2015,Sin Valor
STEAM for all: New Computational Thinking Curricula in Spanish Formal Secondary Education,"Garcia-Robles, Rocio and Fern\'{a}ndez-Cabaleiro, Santiago",2022,"In this article, the authors introduce the new educational curricula for Computing and Robotics in Andalusia [1], that will be offered as an optional subject for more than three hundred thousand students during 2021/2022 academic year and so on.This curriculum offers young students, aged 12-15 years old, with the opportunity to gain a better understanding on how our digital world works, as well as, developing a set of skills known as computational thinking. This term refers to a way of understanding and solving problems, in any discipline, with the help of computers.\c{c}"
STEM Ccareers Inforgaphic Project (SCIP): Teaching Media-Based Computational Thinking Practices (Abstract Only),"Kos, Brittany Ann and Sims, Elizabeth",2015,"The STEM Career Infographic Project (SCIP) was a 4-week exploratory project deployed in an 8th grade classroom at Mountain Vista Middle School (MVMS). SCIP was poised to address the growing focus on STEM fields at MVMS and within the school district. We piloted SCIP in Spring 2014 with six science classes or about 180 students. SCIP allowed for students to explore their own STEM interests, while simultaneously engaging in the 6 Computational Thinking Practices (CTP) outlined by the College Board.Students were required to research a STEM career in-depth, then report on their careers using infographics (CTP #2: Creating Computational Artifacts and CTP #3: Abstracting). We used free and online programs to create the infographics; this provided the students the opportunity to learn software they were not previously exposed to and to explore new communication tools (CTP #1: Connecting Computing and CTP #2: Analyzing Problems and Artifacts). SCIP also provided many occasions for the students to work together by sharing career information or helping each other with the software (CTP #6: Collaborating). At the end of the project the students presented their infographics in front of the class and taught their classmates about their career (CTP #5: Communicating).The project was incredibly successful. The students had a positive affect through the duration of the project and many also expressed an extreme level of interest in doing similar projects in the future. We will be repeating this project in Spring 2015, with a few adaptations and formal evaluation scheme."
STEM Education Activities Development to Promote Computational Thinking’s Students,"Srisangngam, Pichet and Dechsura, Chaiyos",2020,Sin Valor
StoryCoder: Teaching Computational Thinking Concepts Through Storytelling in a Voice-Guided App for Children,"Dietz, Griffin and Le, Jimmy K and Tamer, Nadin and Han, Jenny and Gweon, Hyowon and Murnane, Elizabeth L and Landay, James A.",2021,"Computational thinking (CT) education reaches only a fraction of young children, in part because CT learning tools often require expensive hardware or fluent literacy. Informed by needfinding interviews, we developed a voice-guided smartphone application leveraging storytelling as a creative activity by which to teach CT concepts to 5- to 8-year-old children. The app includes two storytelling games where users create and listen to stories as well as four CT games where users then modify those stories to learn about sequences, loops, events, and variables. We improved upon the app design through wizard-of-oz testing (N = 28) and iterative design testing (N = 22) before conducting an evaluation study (N = 22). Children were successfully able to navigate the app, effectively learn about the target computing concepts, and, after using the app, children demonstrated above-chance performance on a near transfer CT concept recognition task."
Strengthening Computational Thinking within Upper Elementary Classrooms: A Strategy for Broadening Participation in Computer Science,"Sayler, Ben and Anderson, Ann and Caffee, Hannah and Carroll, Becky and Hammel, Koreen and Her Many Horses, Ian and Kertzman, Deann and Lange, Pamela and Myers, Rebecca and Reiner, Nicol and Uhre-Balk, Nicole and Webber, Kimberly",2024,"This paper describes a research-practice partnership (RPP) in western South Dakota involving twenty 4th and 5th grade teachers and a support team of university researchers and K-12 learning specialists. For three years, the RPP has been exploring ways to strengthen computational thinking within elementary math and science instruction, attending to policy considerations and the local education landscape. The RPP is motivated in part by the hypothesis that a larger, more diverse group of students will choose to enroll in computer science courses in high school if they gain familiarity and confidence related to computational concepts at earlier grades. Feedback from participating teachers along with student attitude and problem-solving data suggest this is a promising approach."
Strengthening early STEM learning by integrating CT into science and math activities at home,"Grover, Shuchi and Dominguez, Ximena and Leones, Tiffany and Kamdar, Danae and Vahey, Phil and Gracely, Sara",2022,"While understanding in the field of how CT can be used in early childhood is limited, current CT definitions include skills and practices that align with early mathematics and science learning goals outlined in national frameworks (e.g., Head Start Early Learning Outcomes Framework) and state standards. In order to understand which elements of CT align with the abilities and interests of young children and how they can be integrated with early science and math experiences in a mutually supportive manner, we partnered with preschool teachers and families to co-design and pilot test hands-on (unplugged) and digital activities for classrooms and homes.Our collaborative research identified the following CT skills as productive starting points for our co-design work: (1) problem decomposition; (2) algorithmic thinking; (3) abstraction; and (4) testing and debugging. This paper describes our approach to operationalizing CT for early learning and our empirical research around activities designed to understand how CT can be linked with math and science to create powerful learning experiences for preschool learners. Our work involves actively fostering a home-school connection for promoting CT and prioritized designing for activities that fit the ecology of preschool classrooms and homes (with special attention to family activities). With a view to designing equity-oriented experiences, we partnered with preschools serving historically underserved communities, and centered families' funds of knowledge. This paper focuses specifically on the home component of the program and shares data and analyses about children's and parent's experiences at home---which activities were more successful and resonated with children and families, and which specific synergies emerged between CT skills, math and science concepts and practices. Our findings highlight the promise of introducing early CT to support early learning, and especially involving families in the process. Results from our research also identified challenges that should be addressed in future iterations of this design research We believe our family connection activities are not only a unique part of the research but also an exemplar of what should be an essential piece of STEM education for young learners."
Students organizing against pollution: computational thinking across boundaries,"Qureshi, Shahzore and Estevez, Francisco and Pulimood, Sarah Monisha",2013,"There is a growing need in computer science education to develop courses that demonstrate the articulations between computer science and an array of computing-dependent fields. This poster describes an effort to develop a model for students and faculty to collaborate across disciplines and with a community organization to develop computational solutions to address complex real-world problems. Students in computer science classes are collaborating with students in journalism classes and Habitat for Humanity, to develop a web-based system that manages pollution related data. This is an initiative aimed at empowering citizens in the Trenton area of New Jersey with the opportunity to learn, share, and contribute pollution data while encouraging them to become participants in environmental advocacy and public policy deliberations on these issues. While students focus on the objectives of the individual courses, they are also deeply engaged in the complexities of privacy, security, accessibility of data, user-centered design, etc. as they ponder civic justice issues."
Students perceptions of programming in primary school,"Ahmed, Gashawa and Nouri, Jalal and Nor\'{e}n, Eva and Zhang, Lechen",2019,"Since autumn 2018, teachers throughout Sweden are obliged to relate to programming in one way or another in the teaching, especially in the subject of mathematics and technology education. Although teachers should formally work with programming teaching from the autumn of 2018, programming has been taught in primary school for several years. While there is some research on younger students, most of the research has almost exclusively focused on didactic approaches and strategies used by teachers, educational values and practices that accompany programming teaching, and views of teachers regarding programming teaching. What is still missing is research that highlights how younger students experience these new practices and how they primarily perceive programming in traditional school subjects, such as mathematics. Thus, this paper reports on a thematic analysis of younger students' (n=44) perceptions of programming; students who have been introduced to and been taught programming in mathematics in grade 5."
Students Want to Create Apps: Leveraging Computational Thinking to Teach Mobile Software Development,"Fronza, Ilenia and El Ioini, Nabil and Corral, Luis",2015,"Computational Thinking (CT) is recognised as one of the fundamental skills of all graduates. Nevertheless, some issues can emerge when trying to introduce CT into schools; for example, teachers might not be willing to add topics to their intensive syllabi. Therefore, out-of-school venues such as summer schools can be considered a great opportunity for exposure to CT. Moreover, summer schools allow students to meet first hand researchers and help them pursue their interest far from the regular school climate. High school students in general are very curious for the creation of mobile apps; however, most of them get discouraged because they perceive this activity as a very difficult task. Here we describe the MobileDev summer school, a one-week training and hands-on experience in current topics of software development for mobile devices. The curiosity of the students for developing mobile apps is used to introduce and train CT via programming mobile applications through exercises (also with ""pen and paper'"") of increasing difficulty. The school was repeated twice at our university and was targeted to a reduced class of students concluding the third and the fourth year of high school. Participants were in total 19 and coming from different types of schools. This paper describes the structure of MobileDev and discusses the results to provide directions for further research."
Students’ Engagement in Computational Thinking Skills Using A Game Based-Learning,"Handayani, Rif’Ati Dina and Prastowo, Srihandono Budi and Jamalludin and Triyanto and Thohir, Mohammad Anas",2023,Sin Valor
Studio K: a game development environment designed for gains in computational thinking (abstract only),"Anton, Gabriella and Berland, Matthew",2014,"Studio K is a game design curriculum constructed to provide middle school students an engaging entry into computer science and programming. Developed at the University of Wisconsin-Madison, the program employs Microsoft's 3D programming environment, Kodu, in tandem with support and analytic tools for facilitators, and an online community that provides players with a support system. These key features are bolstered with incorporation of telemetry data gathered through design sessions that are used to improve site functioning, curriculum relevancy, and administrative tools. This program is applied across contexts, with applications in formal classrooms, informal extracurricular clubs or camps, and alternative learning environments such as library systems or home schools. Studio K provides a well-supported, unique entry into computer science in which programming knowledge becomes a tool that supports learners' goals in designing and developing games."
Study of the Impact of Computational Thinking Education Based on Robots on Behaviors of Preschoolers,"Wang, Gang and Wang, Hung-Hsiang",2020,"Robot is one of the carriers to carry out preschoolers’ computational thinking education. Keeko robot can carry out voice interaction, screen interaction, programming board interaction, and help children learn to code. This paper conducted semi-structured interviews and observed the demonstration courses with Keeko robot development team, designed the questionnaire based on the theoretical foundation of Positive Technological Development)PTD(, carried out an online survey on 103 preschool teachers who had used Keeko as a teaching tool of computational thinking, and a total of 89 participants completed the questionnaire. Single-sample Wilcoxon signed-rank test statistics was used to analyze the questionnaire data, and obtain preliminary views on using Keeko robot to motivate children's positive behaviors. The results showed that the median of the six constructs in the questionnaire is greater than 4 (4 represents uncertain attitude and neutral attitude), which meant that they have a positive attitude towards using Keeko robot to carry out the computational thinking education. The research result helps people understand the attitude of preschool teachers and provides a valuable reference for the development and design of related robots in the future. In the meanwhile, it also helps preschool teachers to improve their understanding of robots, curriculum content, teaching process and children's behavior, so as to effectively carry out the computational thinking education on preschoolers."
Study on Mode of Cultivating Computational Thinking in Online Teaching of Information Technology:A Quasi-Experimental Study,"Yang, Hairu and Liang, Zhou and Ma, Mingyue and Zhang, Xiaoyu and Fu, Yan and Zhang, Yongmei",2024,"With the development of the digital age, online teaching and learning is becoming more widespread in schools around the world. In the online teaching environment, the teaching mode of the course is an important element that receives attention in education and teaching. The online teaching mode based on the cultivation of computational thinking can improve students' learning interest and cultivate their innovative thinking ability. However, the author found through educational internship that there are problems such as single teaching activities, lack of teacher-student interaction, poor cooperative learning, and short independent learning time in high school information technology classrooms, which lead to low computational thinking ability and are not conducive to the development of students' innovative ability. The development of students' computational thinking ability is a requirement put forward by the high school information technology curriculum to secondary school students, and the improvement of computational thinking can help students adapt to the future society and meet the demand of future innovative talents. Therefore, this study takes high school students as the research object, under the guidance of constructivism and cognitivism theories, adopts survey research, experimental research and other research methods to construct and verify the online teaching mode based on the cultivation of computational thinking in high school information technology courses. The results of the study show that the online teaching mode based on the development of computational thinking can effectively improve students' algorithmic, evaluation, decomposition, abstraction and generalization thinking abilities, and thus enhance the online learning effect."
Study on Teaching Programming in Adult Colleges Based on the Cultivation of Computational Thinking,"Chen, Jiefei",2023,Sin Valor
Subgoal Labeled Worked Examples in K-3 Education,"Joentausta, Johanna and Hellas, Arto",2018,"Worked examples are step-by-step instructions that are used to demonstrate and teach problem-solving processes. Subgoal labels are used to group the steps of worked examples into cohesive units that may help the learner to identify key information about the process. We conducted a study on the applicability of subgoal labeled worked examples with 9 and 10-year-old pupils (n=43) who were learning the principles of programming using LightBot. Using a between groups design, pupils in three classes were working with LightBot. One of the groups had no additional instructional materials for the LightBot environment, one of the groups had a set of worked examples without subgoal labels, and the last group had the same set of worked examples with subgoal labels. We measured pupils' success in terms of how many LightBot levels they completed during the class. In addition, pupils' beliefs and attitudes towards programming were assessed before and after the experiment. Our results indicate that in a programming environment such as LightBot, simple worked examples provide no significant benefit over no examples, but worked examples with subgoal labels can help pupils complete more levels. At the same time, the instructional materials in the study had no significant influence on the pupils' beliefs towards computer use or programming."
"Subgoals, Problem Solving Phases, and Sources of Knowledge","Lin, Kevin and DeLiema, David",2019,"Educational researchers have increasingly drawn attention to how students develop computational thinking (CT) skills, including in science, math, and literacy contexts. A key component of CT is the process of abstraction, a particularly challenging concept for novice programmers, but one vital to problem solving. We propose a framework based on situated cognition that can be used to document how instructors and students communicate about abstractions during the problem solving process. We develop this framework in a multimodal interaction analysis of a 32-minute long excerpt of a middle school student working in the PixelBots JavaScript programming environment at a two-week summer programming workshop taught by undergraduate CS majors. Through a microgenetic analysis of the process of teaching and learning about abstraction in this excerpt, we document the extemporaneous prioritization of subgoals and the back-and-forth coordination of problem solving phases. In our case study, we identify that (a) problem solving phases are nested with several instances of context-switching within a single phase; (b) the introduction of new ideas and information creates bridges or opportunities to move between different problem solving phases; (c) planning to solve a problem is a non-linear process; and (d) pedagogical moves such as modeling and prompting highlight situated resources and advance problem solving. Future research should address how to help students structure subgoals and reflect on connections between problem solving phases, and how to help instructors reflect on their routes to supporting students in the problem solving process."
Sucre4Stem: A K-12 Educational Tool for Integrating Computational Thinking and Programming Across Multidisciplinary Disciplines,"Trilles, Sergio and Monfort-Muriach, Aida and Cueto-Rubio, Enrique and López-Girona, Carmen and Granell, Carlos",2024,Sin Valor
Sucre4Stem: Collaborative Projects Based on IoT Devices for Students in Secondary and Pre-University Education,"Trilles, Sergio and Monfort-Muriach, Aida and Gómez-Cambronero, Águeda and Granell, Carlos",2022,Sin Valor
Sucre4Stem: Internet of things in classrooms,"Trilles, Sergio and Monfort-Muriach, Aida and Cueto-Rubio, Enrique and Granell, Carlos and Juan, Pablo",2022,Sin Valor
Support of Teacher's Work in the Field of Development of Computational Thinking Through E-Learning Resources,"Dragon, Tom\'{a}\v{s}",2019,"The paper describes some selected approaches related to the support of teacher's work, which focuses on the development of computational thinking and the use of modern e-learning on-line resources. The article also deals with the design related to the research, which will be implemented in connection with these activities and will thus commit to the current professional discussion on the possibilities of development of computational thinking in connection with the Digital Education Strategy until 2020 and the upcoming reform of ICT curriculum in the Czech Republic. Web and mobile applications appear to be suitable e-learning resources for algorithm and programming studies that can contribute positively to the development of computational thinking. So far, however, no relevant research has described whether teachers or future teachers are familiar with these resources, whether they can use them, and whether they also meet their needs. We want to respond to all these facts in our research."
Supporting Computational Thinking Development in K-6,"Falkner, Katrina and Vivian, Rebecca and Falkner, Nickolas",2018,Sin Valor
Supporting Critical Data Literacy in K-9 Education: Three Principles for Enriching Pupils’ Relationship to Data,"Bilstrup, Karl-Emil Kj\ae{}r and Kaspersen, Magnus H\o{}holt and Lunding, Mille Skovhus and Schaper, Marie-Monique and Van Mechelen, Maarten and Tamashiro, Mariana Aki and Smith, Rachel Charlotte and Iversen, Ole Sejer and Petersen, Marianne Graves",2022,"Children grow up in a data economy but grasping how their data are part of this eco-system and how data become valuable to others can be difficult. This work explores how to design tools and activities which support children’s critical data literacy for K-9 education. We bring together two strands of work; First, insights from a co-design process where teachers and researchers designed tools and activities for teaching critical data literacy which they deployed in a lower secondary education classroom. Second, insights from didactic theories from maths and computer science education about working with multiple and rich representations of complex and intangible phenomena. Based on this we contribute three principles for enriching pupils’ relationship to data in order to inform future research into how pupils can be scaffolded in forming richer relationships to the data-driven technologies in their everyday lives in order to retain agency in a data-driven world."
Supporting Diverse Learners in K-8 Computational Thinking with TIPP&amp;SEE,"Salac, Jean and Thomas, Cathy and Butler, Chloe and Franklin, Diana",2021,"With the growth of Computer Science (CS) and Computational Thinking (CT) instruction in the primary/elementary domain, it is important that such instruction supports diverse learners. Four categories of students -- students in poverty, multi-lingual students, students with disabilities, and students who have below-grade-level proficiency in reading and math, may face academic challenges that can hinder their learning in CS/CT curricula. However, little is known about how to support these students in CS/CT instruction, especially at this young age. TIPP&amp;SEE, a meta-cognitive strategy that scaffolds learning by proceduralizing engagement through example code, may offer some support. A quasi-experimental study revealed that the gaps between students with and without academic challenges narrowed when using the TIPP&amp;SEE strategy, indicating its promise in providing equitable learning opportunities in CS/CT."
Supporting End-to-End Coding and Use of Arduinos in a Formal Classroom Environment,"Magda, David and Gardner-McCune, Christina and Kulkarni, Abhishek and Jimenez, Yerika and Chu, Sharon",2023,Sin Valor
Supporting Teacher Understanding of Computational Thinking Integration into Early Elementary Curricula,"Sherwood, Heather and Kaiser, Alice and Ferguson, Camille and Negron, Anthony and Ferrer, Ray and Labonte, Don",2024,"The recent emphasis on computational thinking (CT) integration across disciplines in elementary education nationwide is important to ensure that students are well-equipped to meet the demands of the data-driven workforce. However, this requirement poses major challenges to early elementary teachers who are faced with little direction in terms of how best to implement and assess their young student's application of these new practices.This project engaged researchers, professional development (PD) providers, and K-2 teachers to develop and design a hybrid PD experience to support teachers in a process of learning about and identifying the use of CT skills and strategies in their students' work. The hybrid PD approach utilized a combination of instructional coaching, both face-to-face and through an online Community of Practice. Researchers used a mixed-methods design to measure teachers' change over time in their understanding of how to identify emergent computational thinking in their students' work process. Data collection methods included teacher focus groups and interviews, classroom observations, and teacher pre- and post-surveys.Preliminary findings showed an increase in teachers' understanding of CT and confidence in engaging their students in CT-integrated lessons. Teachers reported that the combination of in-person PD and online Community of Practice helped them prepare to bring CT into their classroom and cited placing more of a distinct focus on teaching students the process of CT rather than just using CT vocabulary. Teachers also referenced success in evaluating their students' application of CT skills and concepts by using informal and formative assessment strategies that focus on evidence of student understanding rather than assessing CT vocabulary."
Supporting Teachers to Integrate Computational Thinking Equitably,"Coenraad, Merijke and Mills, Kelly and Byrne, Virginia L. and Ketelhut, Diane Jass",2020,Sin Valor
Sustainable C++ Education in General High School: from Teaching Programming Skills to Developing Computational Thinking,"Xiduo, Wang and Jialin, Liu and Zhizhen, Zhang",2020,Sin Valor
Syntax Exercises and Their Effect on Computational Thinking,"Johnson, Marina and Swanson, Hillary and Edwards, John",2022,Sin Valor
TACTOPI: a Playful Approach to Promote Computational Thinking for Visually Impaired Children,"Abreu, L\'{u}cia and Pires, Ana Cristina and Guerreiro, Tiago",2020,"The usage of playful activities is common in introductory programming settings. There is normally a virtual character or a physical robot that has to collect items or reach a goal within a map. Visually, these activities tend to be exciting enough to maintain children engaged: there is constant feedback about the actions being performed, and the virtual environments tend to be stimulating and aesthetically pleasant. Conversely, in adaptations for visually impaired children, these environments tend to become poorer, damaging the story at the cost of the programming actions and its dull mechanics (e.g., place a arrow block to move the character forward). In this paper, we present TACTOPI, a playful environment designed from the ground up to be rich in both its story (a nautical game) and its mechanics (e.g., a physical robot-boat controlled with a 3D printed wheel), tailored to promote computational thinking at different levels (4 to 8 years old). This poster intends to provoke discussion and motivate accessibility researchers that are interested in computational thinking to make playfulness a priority."
Taking Database Design as Trunk Line of Database Courses,"Juxiang, Ren and Zhihong, Nan",2012,Sin Valor
TAPASPlay: A game-based learning approach to foster computation thinking skills,"Malizia, Alessio and Fogli, Daniela and Danesi, Federico and Turchi, Tommaso and Bell, David",2017,Sin Valor
Tasks for Assessing Skills of Computational Thinking,"Palts, Tauno and Pedaste, Margus",2017,"Thinking computationally has become an important part of many disciplines. In creating lesson plans for teaching computational thinking (CT), an instrument can be used to assess the development of CT. This poster presents the Bebras Challenge tasks for assessing two skills of CT: exploring and developing algorithms, and finding patterns."
Teacher And Student Empathy Interviews As An Instrument For Considering More Inclusive K-12 Computing Pathways,"Ruiz, Pati and Mills, Kelly and Burke, Quinn and Coenraad, Merijke",2021,Sin Valor
Teacher Education and Computational Thinking: Measuring Pre-service Teacher Conceptions and Attitudes,"Yadav, Aman and Caeli, Elisa Nadire and Ocak, Ceren and Macann, Victoria",2022,"In recent years, there has been a growing awareness of the need for computer science education opportunities and particularly for engaging students in computational thinking ideas and practices to help them understand how computing influences our world. At its core, computational thinking (CT) is seen as understanding how computational practices (such as, abstraction) and tools (such as modeling software) can be used to explore phenomena, solve problems, and influence our lives and society. The push for CT integration has called for preparing future educators to learn CT practices and tools through stand-alone courses and within the context of disciplinary pedagogy/methods courses. However, there are few instruments that measure pre-service teachers' attitudes towards computational thinking and its role in formal schooling. In this study, we developed and validated an instrument to measure pre-service teachers' attitudes towards CT, its role in students' lives, and their own self-efficacy to incorporate CT into their teaching. We report results from a principal components factor analysis on survey responses from 260 pre-service teachers to identify patterns and reduce the number of dimensions of comparison in the analysis. We discuss how pre-service teacher conceptions have implications for preparing future teachers to integrate computational thinking into their instruction."
Teacher Education to Integrate Computational Thinking into Elementary Science: A Design-Based Research Study,"Killen, Heather and Coenraad, Merijke and Byrne, Virginia and Cabrera, Lautaro and Mills, Kelly and Ketelhut, Diane Jass and Plane, Jandelyn D.",2023,"Computational thinking (CT) is playing an increasingly relevant role within disciplinary teaching in elementary school, particularly in science. However, many teachers are unfamiliar with CT, either because their education occurred before the popularization of CT or because CT instruction was not included in their pre-service coursework. For these teachers, CT professional development (PD) becomes a primary mechanism to close their CT knowledge gap. While CT PD has demonstrated success at increasing teacher's CT understanding, researchers have reported varied outcomes in supporting teachers to write CT-integrated lesson plans. To explore how we might support teachers to integrate CT into elementary science, we employed design-based research (DBR) in a dual-track design of in-class CT instruction for pre-service undergraduates within an elementary science methods class paired with a collaborative, multi-month PD opportunity for pre- and in-service teachers. In this article, we reflect on our 5-year period of DBR and present our design insights and implications for CT instruction and curriculum design from each iteration. Our findings on best practices will inform both teacher educators and PD providers within CT education. Our work will also be of interest to researchers considering DBR for technology-based educational projects."
Teacher Feedback on Delivering Computational Thinking in Primary School,"Bell, Tim and Duncan, Caitlin and Atlas, James",2016,"We report on the preliminary results of an ongoing study examining the teaching of new primary school topics based on Computational Thinking in New Zealand. We analyse detailed feedback from 13 teachers participating in the study, who had little or no previous experience teaching computer science and related topics. From this we extract key themes identified by the teachers that are likely to be encountered deploying a new curriculum, including unexpected opportunities for cross-curricula learning, development of social skills, and engaging a wide range of students."
Teacher Views on Computational Thinking as a Pathway to Computer Science,"Moudgalya, Sukanya Kannan and Yadav, Aman and Sands, Philip and Vogel, Sara and Zamansky, Mike",2021,"Recent years have seen increased focus on integrating Computational Thinking (CT) across subject areas in lieu of treating it as a standalone subject. Over the course of two years, we focused on teacher development in a large city school system via summer workshops that brought in-service and pre-service teachers together to co-create integrated CT lessons. In this experience report, we will describe the workshop design and share the perspectives of the participating K-5 teachers. One particular area of focus of the workshop was integrating 'plugged' or technology-based computing examples for the teachers. Further, we engaged the teachers with a discussion of the role of CT in promoting equity for students and demonstrated ways in which student cultural experiences could be activated through creative computing. Specific outcomes of the work included increased confidence and value in CT vocabulary usage, ideas to infuse existing curriculum with CT ideas, and teacher belief that CT could be used as a ""gateway"" for learning CS. We make recommendations for future efforts to include CT in pre-service teacher preparation."
Teachers' Perspective on Implementing Computational Thinking in Elementary Classrooms,"Feng, Shi and Yang, Dazhi",2021,Sin Valor
Teachers’ understanding of technical terms in a Computational Thinking curriculum,"Munasinghe, Bhagya and Bell, Tim and Robins, Anthony",2021,"Teachers new to computing who are not familiar with technical “jargon” can feel like they have landed in a foreign world, making them reluctant to take on the subject, and potentially leading to misconceptions and misunderstandings in the classroom. The diversity of technical words, metaphors, and phrases in different contexts can make their meanings confusing, ambiguous or misunderstood for the diverse user groups in computing education. Therefore, understanding the nature of the commonly claimed difficulties and confusion caused by computer jargon among teachers becomes important for finding ways to address this issue. This paper presents the findings of an empirical study conducted to understand the nature of teachers’ understanding of computational terms (jargon) related to Computational Thinking concepts, and how a relevant professional development intervention can help to resolve issues related to them. The results indicate that the nature of the teachers’ understanding of computational terms can be either that the computational meaning is not known, that the computational context is unclear, or their applicability is unclear. Concerns about teachers finding computer jargon difficult to understand can be because the computational context in which they are applied makes them difficult for teachers to understand, rather than not knowing their meanings in the first place. Moreover, appropriate support can enable teachers to learn the techniques and skills that the terminology refers to."
Teaching and learning computational thinking through solving problems in Artificial Intelligence: On designing introductory engineering and computing courses,"Silapachote, Piyanuch and Srisuphab, Ananta",2016,Sin Valor
Teaching and Learning Computer Science for Primary School Teachers: an Argentine Experience,"Casali, Ana and Zanarini, Dante and Monjelat, Natalia and San Martín, Patricia",2018,Sin Valor
Teaching and research on assembly language for computational thinking,"Yin, Li-jie and Zuo, Rui-xin and Zhao, Yang",2011,Sin Valor
Teaching Coding in the Age of AI: A Hands-on Tutorial on Process Feedback,"Adhikari, Badri and Hou, Jie",2025,"This tutorial is for CS1 teachers and introduces a novel online compiler that emphasizes the coding process. In a CS1 class, a key to effective learning lies in identifying students' productive and less-productive coding habits. One way to gain such insights is to review the steps students take while coding. Therefore, students need coding tools that collect and display data about their working process. This tutorial introduces CS1 teachers to Process Feedback, a free online compiler that makes the coding process transparent. It enables students to explore their working process so they can self-reflect and learn. By focusing on the process, students are motivated to excel not only in their final code but also in how they approach coding. Analyzing process data also helps students develop critical thinking and metacognitive skills. The compiler also translates compiler-generated error messages to plain English explanations, enabling students to use AI in a safeguarded manner. During the tutorial, participants will learn how they can integrate the Process Feedback compiler into their courses and how their students can use it. The online compiler is available at www.processfeedback.org, and students do not need to create an account to use it. Participants are expected to bring their laptops to the tutorial."
Teaching Computational Thinking and Introduction to Programming through Robotics amid the Covid19 Pandemic - An Experience Report,"Scaico, Alexandre and Ferreira, Willams Pinto and Alves, Emmanuel Mendes and Scaico, Pasqueline Dantas",2021,Sin Valor
Teaching Computational Thinking and Spatial Visualization in K-12 with 3D Weather Visualizations,"Mohammadi-Aragh, Mahnas Jean and Sun, Yan and Dyer, Jamie L. and Harris, Jonathan G. and Robinson, Chase A. and Bai, Mengni and Kavanagh, Jolie K. and Ball, Kimberly E.",2022,Sin Valor
Teaching Computational Thinking by Playing Games and Building Robots,"Roscoe, Jonathan Francis and Fearn, Stephen and Posey, Emma",2014,Sin Valor
Teaching Computational Thinking in initial series An analysis of the confluence among mathematics and Computer Sciences in elementary education and its implications for higher education,"Barcelos, Thiago Schumacher and Silveira, Ismar Frango",2012,Sin Valor
Teaching Computational Thinking Through Bio-Design (Abstract Only),"Okerlund, Johanna and Shaer, Orit and Latulipe, Celine",2016,"We are developing ways to teach computational thinking through interaction with tangible digital tools for synthetic biology. Inspired in part by Jeannette Wing's (Wing 2008) notion of the essence and pervasiveness of computational thinking, a growing community within SIGCSE is exploring tools that encourage computational thinking that don't use traditional computer science terminology or computer programming (Basawapna 2013, Daily 2014, Freeman 2014, Miller 2014, Wolz 2011). However, that community has not yet explored how to teach computational thinking through bio-design. Synthetic biology is a relatively new research field where scientists engineer living organisms to exhibit new behaviors. Biologists arrange and combine BioBricks, sequences of DNA that exhibit a behavior, sense an environmental factor, or indicate the beginning or end of a larger sequence. Bio-design not only incorporates traditional principles of computational thinking (abstraction, modularity, design/build/test), but also introduces new challenges that force the user to apply these principles in new ways. Interacting with biology can thus 1) help deepen understanding for people who are proficient in computational thinking, 2) provide a platform for introduction to computational thinking for the first time. Because most bio-design is performed in a wetlab by experienced biologists, we focus now on designing and developing low-barrier digital tools for interacting with biology. We present SynFlo (Okerlund 2016), a tangible interactive system for bio-design that mimics a real-life biological wetlab protocol and we discuss the properties of SynFlo and bio-design in general that encourage computational thinking."
Teaching computational thinking through bioinformatics to biology students,"Qin, Hong",2009,"Modern biology has transformed from an insular entity into an interdisciplinary science, which in turn demands interdisciplinary and cross-disciplinary training for future work force in biology and life sciences. Computational thinking is a way of thinking that uses concepts and methodologies of computing to address questions in a broad range of subjects, and as such, computational thinking offers an important skill set in modern sciences. Despite its importance, the concept of computational thinking has generally been side-stepped in undergraduate biology education. Many students in life sciences are often weak in quantitative/computing skills and tend to avoid computing-orient courses. To address these issues, we incorporated computational thinking into a bioinformatics course for undergraduate life science majors. We developed comprehensive computer laboratory exercises that offer hands-on learning experience for the targeted student pool, and employed peer-assisted collaborative learning environment. Preliminary results of these explorative efforts will be helpful for others to teach computational thinking to biology students."
Teaching Computational Thinking through Civics: NYC's Hack League,"Davis, Kylie and Shneyer, Elana",2020,"This poster provides an overview of the goals and objectives of the New York City Department of Education's (NYCDOE) Hack League, a district-wide competition that invites middle and high school students with any level of CS experience to explore the systemic impacts and applications of computing. By requiring participants to interact with data and prototype a proposed solution to an issue that the data illuminates, students creatively engage in a human-centered design and strategic problem-solving process aimed at improving the quality of life and civic issues in their communities. Each stage of competition represents a component of the engineering design process, thereby encouraging students to be thoughtful programmers. Through three stages of competition, students identify an issue and validate it with data, outline and prototype a solution while incorporating feedback from industry professionals and subject matter experts, and build metrics into their product. Making open data accessible to students has proven to be an effective approach to developing citizen scientists in NYC. This competition could be replicated in districts anywhere in the country and can be organized within or across schools. It is a great way to encourage student development as civic-minded individuals, engagement with their local government and elected officials, and application of computational thinking and computer science skills."
Teaching computational thinking through musical live coding in scratch,"Ruthmann, Alex and Heines, Jesse M. and Greher, Gena R. and Laidler, Paul and Saulters, Charles",2010,"This paper discusses our ongoing experiences in developing an interdisciplinary general education course called Sound Thinking that is offered jointly by our Dept. of Computer Science and Dept. of Music. It focuses on the student outcomes we are trying to achieve and the projects we are using to help students realize those outcomes. It explains why we are moving from a web-based environment using HTML and JavaScript to Scratch and discusses the potential for Scratch's ""musical live coding"" capability to reinforce those concepts even more strongly."
Teaching Computational Thinking to 8-Year-Olds through ScratchJr,"Faber, Hylke H. and van der Ven, Jan Salvador and Wierdsma, Menno D.M.",2017,"This synopsis presents the preliminary results of a larger study that aims to uncover design principles for teaching computational thinking to primary school children. This research focuses on teaching computational thinking to 8-year-olds through ScratchJr. By engaging in a cyclic process in which we create lesson materials and use evaluation data to improve them, we formulate design principles and provide teachers with sample course materials."
Teaching Computational Thinking to a Student with Attention Deficit Through Programming,"da Silva, Felippe Fernandes and Beatrys Ruiz Aylon, Linnyer and Flôr, Daniela Eloise",2020,Sin Valor
Teaching computational thinking to Down syndrome students,"Gonz\'{a}lez-Gonz\'{a}lez, Carina and Gonz\'{a}lez, Erika Herrera and Ruiz, Lorenzo Moreno and Infante-Moro, Alfonso and Guzm\'{a}n-Franco, Mar\'{\i}a D.",2018,"This paper presents an educational experience about the feasibility of using the KIBO robot to engage the learning of programming and computational thinking with students with Down syndrome (DS). In particular, we describe a pilot study carried out with seven DS students aged between 7-19, but with a cognitive age from 3--6. The programming and computational thinking contents had been adapted to their particular needs and integrated into their current curricular activities. We studied the engaging of students using KIBO, the grade of comprehension of the sequences and programming and the emotional behavior of students with DS during the sessions. The results of this study shows that people with DS are capable to acquire satisfactorily basic programming and computational thinking skills using KIBO. Also, the motivation and the emotional state of DS students were positive promoted through the designed activities."
Teaching computational thinking to entry-level undergraduate engineering students at Amrita University,"Shyamala, C. K. and Velayutham, C. Shunmuga and Parameswaran, Latha",2017,Sin Valor
Teaching Computational Thinking to Multilingual Students through Inquiry-based Learning,"Jacob, Sharin and Nguyen, Ha and Garcia, Leiny and Richardson, Debra and Warschauer, Mark",2020,Sin Valor
Teaching computational thinking to non-computing majors using spreadsheet functions,"Yeh, Kuo-Chuan and Xie, Ying and Ke, Fengfeng",2011,Sin Valor
Teaching Computational Thinking Using Agile Software Engineering Methods: A Framework for Middle Schools,"Fronza, Ilenia and Ioini, Nabil El and Corral, Luis",2017,"Computational Thinking (CT) has been recognized as one of the fundamental skills that all graduates should acquire. For this reason, motivational concerns need to be addressed at an early age of a child, and reaching students who do not consider themselves candidates for science, technology, engineering, and mathematics disciplines is important as well if the broadest audience possible is to be engaged. This article describes a framework for teaching and assessing CT in the context of K-12 education. The framework is based on Agile software engineering methods, which rely on a set of principles and practices that can be mapped to the activities of CT. The article presents as well the results of an experiment applying this framework in two sixth-grade classes, with 42 participants in total. The results show that Agile software engineering methods are effective at teaching CT in middle schools, after the addition of some tasks to allow students to explore, project, and experience the potential product before using the software tools at hand. Moreover, according to the teachers’ feedback, the students reached all the educational objectives of the topics involved in the multidisciplinary activities. This result can be taken as an indicator that it is possible to use computing as a medium for teaching other subjects, besides computer science."
Teaching Computational Thinking with Interventions Adapted to Undergraduate Students' Proficiency Levels,"de Jong, Imke",2020,"Adapting a teaching intervention to the proficiency level of a student improves learning when teaching programming. The goal of this PhD-project is to discover to what extent this holds when teaching computational thinking (CT) skills. I will first determine how teaching interventions can be adapted to CT proficiency levels, and then examine their effectiveness through a series of longitudinal studies."
Teaching Computer Science in the Victorian Certificate of Education: A Pilot Study,"Cox, Richard and Bird, Steven and Meyer, Bernd",2017,"A new computer science curriculum has been developed for the Victorian Certificate of Education. It gives students direct entry into second year University computer science. The curriculum focuses on data structures and algorithms, with an emphasis on the graph abstract data type and graph algorithms. We taught a pilot course during 2014 involving students from seven schools, and administered an algorithmic thinking quiz on entry and exit, and also tested a first year university reference group. In this paper we present the curriculum and report on the evaluation. We discuss the effectiveness of our approach and make recommendations for improving future versions of the course. Pedagogical issues are discussed in relation to the cognitive education literature on the teaching of algorithmic thinking."
Teaching Computing in Indigenous Schools: An Early Experience Report,"Yan, Wei and Hovermill, Jeffrey Allen and Prescott, Paige and Amresh, Ashish",2024,"To broaden indigenous students' participation in Computer Science (CS) education, we conducted a research practitioner partnership (RPP) project, where teachers were taught the CS principles lessons offered by Code.org and asked to integrate mobile application development within their current courses. Additionally, modules and guidance were provided on culturally responsive pedagogy (CRP), and an in-classroom implementation of a five-day lesson plan was co-created via a participatory approach. In this experience report, we describe the RPP organization and early findings from our collected teachers' pre/post survey, lesson plans, projects, and students' pre/post survey. The positive outcomes from our RPP project provided valuable teacher learning experiences and actionable, culturally responsive computing lesson plans for the indigenous community."
Teaching evaluation for computational-thinking-oriented elementary computer courses,"Bo, Li and Xiaobin, Zhang and Ning, Wu",2017,"With the prevalence1 of the computational thinking, Chinese colleges and universities adopt this concept into their elementary computer teaching for cultivating students' thinking and application ability, which strongly support the students' development. Therefore, it is very important to evaluate the effectiveness of computational thinking in the elementary computer courses. Through such an evaluation, we can obtain the objective data which reflects the teaching effect of elementary computer courses, establish scientific teaching evaluation matrices, and emphasize the importance of those courses. In this paper, we investigate the teaching effectiveness for achieve accurate data and decision support on the computational-thinking-oriented computer curriculum reform. Our research is based on recent evaluations and data acquisition. We analyze the test database, categories of questions, and scores of students. We find several problems, such as the over-emphasizing the programming, incomplete knowledge components, limited background, large deviation of evaluation results among universities. Finally, we give several improvement recommendations."
Teaching future teachers to code — Programming and computational thinking for teacher students,"Kaila, E. and Laakso, M-J. and Kurvinen, E.",2018,Sin Valor
Teaching High School Students Computational Thinking with Hands-on Activities,"Li, Wei-Lin and Hu, Chiu-Fan and Wu, Cheng-Chih",2016,"In this study we developed three hands-on activities to teach high school students computational thinking (CT) and, specifically, the decomposition skills. The activities were designed to enable students to solve problems by using application tools. The computer science concepts utilized in the activities included binary search, quick sort and iteration. We evaluated the effect of the activities utilizing a post-activity questionnaire, a post-test, students' worksheets, and semi-structured interviews with the participating students. The results indicated that the hands-on activities developed in this study improved students' CT ability."
Teaching how to teach computational thinking,"Lamprou, Anna and Repenning, Alexander",2018,"Computational Thinking is argued to be an essential skill for the workforce of the 21st century. As a skill, Computational Thinking should be taught in all schools, employing computational ideas integrated into other disciplines. Up until now, questions about how Computational Thinking can be effectively taught have been underexplored preventing efforts to cross the large gap between early adopters and the early majority, conceptualized as the Computer Science Education chasm. A promising strategy to cross the chasm is underway in Switzerland. Switzerland recently introduced a national curriculum, called Lehrplan 21, mandating Computer Science Education. This mandate requires the Computer Science education of elementary and middle school students. In 2017, the School of Education of Northwestern Switzerland (PH FHNW), introduced a mandatory pre-service teacher Computer Science Education course, to satisfy this mandate. All the PH FHNW students who study to become elementary school teachers must pass this two-semester course. The first part of this course was taught for the first time in fall of 2017. This paper presents the philosophy of this course and an initial analysis of both qualitative data capturing the students’ perceptions of Computational Thinking and quantitative data describing shifts in students’ skills and attitudes as effect sizes. The data suggest that it is possible to teach a basic understanding of programming to non-self-selected pre-service elementary school teachers."
Teaching K-12 students about the impact and mechanics of social media,"Lin, Anssi and Arkko, Eetu and Pope, Nicolas and Kahila, Juho",2024,"Young people are increasingly affected by data-driven profiling, recommendations, and manipulation on social media, often without understanding how these platforms work. This poster presents a 2-hour workshop designed to educate Finnish schoolchildren on the mechanics of social media. The workshop covered data collection, profiling, recommendation systems, and these mechanisms’ impacts on users and their communities."
Teaching Machine Learning in K–12 Classroom: Pedagogical and Technological Trajectories for Artificial Intelligence Education,"Tedre, Matti and Toivonen, Tapani and Kahila, Juho and Vartiainen, Henriikka and Valtonen, Teemu and Jormanainen, Ilkka and Pears, Arnold",2021,Sin Valor
Teaching method based on computational thinking a case research,Shuiyan He and Yongmin Hang and Yi Ding,2014,Sin Valor
Teaching mode reform and exploration on the University Computer Basic based on Computational thinking training in Network Environment,Boqin Liu and Junmei He,2014,Sin Valor
Teaching of the Yupana with the Tawa Pukllay method for developing the Computational Thinking in children,"Alvarado, Lorena and Falcon, Carla and Gutiééérrez-Cááárdenas, Juan and Romero-Romero, Vilma S.",2022,Sin Valor
Teaching programming based on Computational Thinking,Ying Li,2016,Sin Valor
Teaching programming to non-STEM novices: a didactical study of computational thinking and non-STEM computing education,"Spangsberg, Thomas Hvid",2017,"The PhD project presented here is concerned with teaching introductory programming to non-STEM students. Particularly students in the field of Information Studies and HCI. The research is carried out through three Teaching and Learning Explorations (TLE - I-III) which are set in an inductive action research approach. Computational thinking plays a significant role in computing education but it is still unclear how it should be interpreted to best serve its purpose. Constructionism and Computational Making seems to be promising frameworks to do this. In regards to specific teaching activities, the translation-grammar method of a structural approach to natural language teaching shows promising results when actualized in a concrete exercise named code-labelling."
Teaching Programming to Science Majors by Modelling,"Hsieh, Hsin-Ling and Lin, Yu-Tzu",2020,"Programming is playing an increasingly important role in various fields, including science. However, traditional programming instruction tends to use small-scale and general examples to explain syntax and semantic meaning of the code, which cannot foster students' programming ability of solving real-world problems. This research was intended to develop a modelling-based instruction for scientific programming to guide students to solve programming problems based on the modelling process (phenomenon description, data modelling, algorithmic modelling, coding, and verification and debugging). A learning platform based on the proposed modelling process was also developed to assist science-major students to learn how to solve real-world scientific problems by programming. An empirical study was conducted on thirty-two science-major college students to prove the effectiveness of the modelling-based scientific programming. The experiment results show that students who engaged more in modelling had higher programming performance. The modelling-based instruction actually helps students to write programs for solving scientific problem by using both of data and algorithmic models."
Teaching Programming Using Cultural Viewpoint Metaphors Resignification,"Corr\^{e}a, Joseline Melo and Mota, Marcelle Pereira",2021,"Technologies permeate contemporary society, and the ability to use computer science concepts in the problem-solving process is essential to everyone. This paper presents an epistemic tool of Semiotic Engineering whose meaning is resignified to the context of teaching programming to initial learners. Aiming to help these students absorb programming concepts, a gradual form of presentation using the interaction with a new system as a journey through a new culture, based on the Cultural Viewpoint Metaphors theory, was structured. After that, an application of this resignification was adopted in an introductory programming workshop using visual programming and the BBC Micro:bit embedded device. Results from the workshop revealed that this gradual form of introduction could help novices in the programming concepts learning process, showing the potential of this approach in teaching programming."
Teaching Refactoring to Improve Code Quality with ChatGPT: An Experience Report in Undergraduate Lessons,"Menolli, Andr\'{e} and Strik, Bruno and Rodrigues, Luiz",2024,"Refactoring presents a complex computational challenge, and its learning is intricate, requiring a solid foundation in computational thinking, programming and object-oriented concepts. Moreover, making students realize the importance and benefits of refactoring is also challenging. To address this complexity, we introduce a refactoring teaching method based on Generative Artificial Intelligence (GAI), incorporating single-loop and double-loop learning principles, focusing on fostering deeper and critical learning. We used ChatGPT, a GAI-based tool, and conducted an eight-week mixed-methods study involving 23 computer science undergraduate students. The study involved applying four distinct projects extracted from GitHub, where participants were tasked with identifying code smells and performing the necessary refactoring to improve code quality. The primary focus was on identifying both the positive and negative aspects of the method, as well as delineating the computational thinking characteristics developed during the process. The results indicate that the use of ChatGPT facilitated the learning of refactoring, contributing to the development of numerous computational thinking skills, especially problem formulation, decomposition, and abstraction. Thus, this paper contributes a GAI-based teaching method along with evidence on how it helps students develop refactoring skills."
Teaching reform and practice of the basic computer course based on flipped classroom,"Ma, LiXiao and Hu, JiChao and Chen, YiYing and Liu, XueJing and Li, WenBin",2017,Sin Valor
Teaching reform of programming basic course based on SPOC blended teaching method,"Li, Xiaoying and Gu, Changlong",2020,Sin Valor
Teaching Reform of Software Engineering Course Based on Computational Thinking,"Dong, Xueyan and Jia, Jingpeng",2020,Sin Valor
Teaching research and practice of blended leaning model based on computational thinking,"Li, Ying and Liu, Yu and Shu, Pan",2015,Sin Valor
Teaching Research on Computer Programming based on Cultivation of Computational Thinking,"Ding, Haiyan",2019,Sin Valor
Teaching research on the cultivation of computational thinking ability by using information technology,"Xiaohong, Cong and Jie, Liu and Zhibin, Miao and Li, Xu",2021,Sin Valor
Teaching Software Design Engineering Across the K-12 Curriculum: Using Visual Thinking and Computational Thinking,"Fronza, Ilenia and El Ioini, Nabil and Corral, Luis",2016,"Over the years a number of methodologies have been proposed in Software Engineering to deal with systems design. High among them is visual thinking (VT). VT is a well known strategy to foster more ideas and generate consensus within a group. In this paper, we propose the application of VT in the design phase of computational thinking in the K-12 curriculum. The goal is to facilitate the interchange of ideas in a team of students, and assist on orchestrating an all-hands, brainstorming working strategy that ensures that all the participants speak and are listened, and that all the viewpoints are taken into account. We describe the results of an experience of visual thinking applied in the design phase across the K-12 curriculum."
Teaching Strategy of Programming Course Guided by Neuroeducation,"Zhang, Jianwei",2019,Sin Valor
Teaching Structured Authoring and DITA Through Rhetorical and Computational Thinking,"Evia, Carlos and Sharp, Matthew R. and Pérez-Quiñones, Manuel A.",2015,Sin Valor
Teaching technical and societal aspects of IoT - A case study using the Orbit IoT Kit,"Tamashiro, Mariana Aki and Schaper, Marie-Monique and Jensen, Ane and Heick, Rune and Danielsen, Brian and Van Mechelen, Maarten and Jensen, Kasper L\o{}vborg and Smith, Rachel Charlotte and Iversen, Ole Sejer",2023,"Increasingly, IoT kits are used in pedagogical contexts to support learning experiences and teach students about IoT. However, few of them focus on both the technical aspects and the societal implications of IoT, such as cybersecurity and privacy. In this paper, we describe the Orbit IoT Kit, a micro:bit-based toolkit that supports teachers in IoT activities. The kit combines the microcontroller with relays and a web application, enabling students to connect everyday objects to the Internet and visualize the devices’ data flow. Based on an intervention in a secondary school with 3 teachers and 20 students of ages 12-13, our results indicate that the design and features of the kit — internet communication and data visualization — support teachers to engage students in learning about a holistic perspective of IoT. We reflect on our research propositions, discuss design strategies, and present three design recommendations for IoT toolkits: Connectivity, Visualization, and Openness."
Teaching Undergraduate Sociologists Modeling and Computational Thinking,"Musabirov, Ilya and Suschevskiy, Vsevolod",2020,"The introductory agent-based modeling course we are presenting aims to equip second-year sociology students with basic skills which are critical to transforming their research ideas into theories and computational models. Our course follows a general course on theory construction in social science. As one of the first interactions of undergraduate social science students with computer science concepts, the course partially serves as a CS0 course; however, the main focus is on the higher-level skills needed to model social phenomena. This requires the course to maintain multiple foci on computer science and domain skills. In this paper, we present a course design considerations and establish a foundation for the comparison of agent-based models and the computational thinking and CS0 skills required for undergraduate social scientists studying agent-based modeling."
TeachVR: An Immersive Virtual Reality Framework for Computational Thinking based on Student Preferences,"Wee, Chyanna and Wang, Lillian Yee Kiaw and Ong, Huey Fang",2025,"This study presents the development of a student-centric framework for utilizing virtual reality (VR) technologies in education, specifically focusing on enhancing computational thinking skills. While numerous frameworks exist in this domain, they often lack consideration of student preferences, which are integral for fostering learner autonomy. Our proposed framework, with components developed from the constructivist learning theory, emphasises creating knowledge through interaction with the environment, focusing on autonomy, mastery, and purpose as drivers of intrinsic outcomes. Through a survey administered to hundred and fifty-seven participants, we sought to identify student-preferred strategies for learning computational thinking skills via VR interventions. Results highlighted key challenges students face when working on computational tasks are related to algorithmic and abstraction thinking. To ease the aforementioned challenges, our findings suggest a preference among students for situated-based learning approaches within VR environments. Additionally, participants recognized the importance of motivational outcomes in improving autonomy and mastery within VR-based learning tasks. Students also preferred tasks that enhanced self-efficacy, contributing to a greater sense of purpose in their learning endeavours. Overall, this investigation sets a foundation for more student-centric, constructivist, and intrinsically-based VR frameworks in education."
TechCheck-K: A Measure of Computational Thinking for Kindergarten Children,"Relkin, Emily and Bers, Marina",2021,Sin Valor
Technological project in the development of computational thinking and problem-solving,"Paucar-Curasma, Ronald and Villalba-Condori, Klinge Orlando and Jara, Nolan Jara and Llamoca, Rosa Quispe and Tovar, Roberto Florentino Unsihuay and Malpartida, Katherin Felipa Carhuaz",2022,Sin Valor
Technology Comprehension: Scaling Making into a National Discipline,"Tuhkala, Ari and Wagner, Marie-Louise and Nielsen, Nick and Iversen, Ole Sejer and K\""{a}rkk\""{a}inen, Tommi",2018,"We account for the first research results from a governmentinitiated experiment that scales Making to a national discipline. The Ministry of Education, in Denmark, has introduced Technology Comprehension as a new discipline for lower secondary education. Technology Comprehension is first experimented as an elective subject in 13 schools. The discipline combines elements from computing, design, and the societal aspect of technology and, thus, resonates with the existing FabLearn and Making initiatives in Scandinavia. We report the identified opportunities and challenges based on interviews, surveys, and a theme discussion with experienced teachers from the 13 schools. The main takeaways are: First, the teachers did not perceive Technology Comprehension as a distinguished discipline, which calls for more research on how Making is scaled into a national discipline. Second, Technology Comprehension opens up for interdisciplinary and engaging learning activities, but teachers need scaffolding and support to actualise these opportunities. Third, Technology Comprehension challenges teachers' existing competencies in relation to the discipline and students' prerequisites and needs. Teachers need pedagogical means to take the societal aspect into account within the discipline. Finally, we argue for further research on supporting teachers when scaling Technology Comprehension on a national level."
Teen-sexting on Social Network “Instagram” and it's Computational Thinking Consequences,"Šaloun, Petr and Kolárová, Michaela and Andrešič, David and Malčik, Martin and Klement, Milan",2022,Sin Valor
"Tekniverse: A world that connects signals, data, and people","Guler, Sibel Deren",2022,"This technical demonstration introduces Tekniverse (Figure 1), an end-to-end Internet-of-Things (IoT) toolkit designed for education, targeting middle and high school students as a tool for environmental data literacy. Tekniverse is a learning platform for data driven projects that teaches you how to create a network using physical objects — “things”— that can sense the environment, analyze data and exchange information. Tekniverse blends physical hands-on and “virtual fieldwork” to increase and equalize student resources. These features further cultivate critical thinking and anticipatory skills, acting as a vehicle for students to collaborate."
"Tekniverse: Towards a connected future for sensors, education, and action: Fostering Environmental Literacy with IoT and Physical Computing","Guler, Sibel Deren and Sotelo, Sheryl and Iwabuchi, Masa",2022,"The Internet of Things (IoT) is an innovation that is rapidly transforming industries from agriculture to medicine, enabling advances such as real-time data monitoring and remote control. However, IoT's infiltration into education has been much slower, and educational tools that embody these features are few and far between. Together with the Chugach School District in Alaska, we investigated methods to teach middle-school aged students how to use IoT to drive change in their communities and collaborate in a digital world, tied to real time environmental data. The objective of this work is to provide rural, K-12 Alaskan students and teachers with opportunities that will help build an understanding of what is happening in their local environments, increase overall scientific and climate literacy, and contribute to community resilience and connectedness. Rural Alaskan students live in some of the most vulnerable regions of the planet, regions that are highly susceptible to the impacts of climate change. In this work-in-progress paper, we first discuss the design and adaptation of Tekniverse, a hardware and software ecosystem that provides a gateway for students to code and connect hardware projects and data. We then discuss the finding of our initial study of Tekniverse as a learning tool for computational thinking, data analysis, and social responsibility in rural and remote areas with students in Alaska. Lastly, we propose future directions for this research and computational collaborative tools."
Testing a design-based learning approach to enhance elementary students’ computational thinking with experience-sampling method,"Li, Xing and Zhang, Yi and Huang, Jing",2022,"Computational Thinking (CT) is regarded as a key competency for k-12 children in the 21st century. In this project, a design-based learning (DBL) approach was proposed to improve elementary school students’ CT. This approach included programming skills learning and STEM practices with authentic real-life contexts. We assessed CT in a more accurate manner with experience-sampling methodology (ESM). A quasi-experiment study was carried out to assess how the intervention was associated with students’ self-perceived CT skills using event-based experience-sampling methodology. Forty sixth graders engaged in the curriculum units to create artifacts that solve specific real-world problems using Arduino electronic kits and Mind+ programming software. Results revealed that students’ self-perceived CT skills increased to a greater extent statistically. Using the experience sampling method, students’ self-perceived CT skills has different fluctuations in different stages of DBL, at the third phase of designing artifact, there is a significant decrease because learners are unfamiliar at the beginning of complicated cooperation in depth, which is likely to produce discourse conflicts and reduce efficiency. With the intervention of teachers, learners begin to improve greatly in the later stage. Learners have the highest CT in the iteration and improvement phases of prototype making and the final demonstration stage. In addition, collaboration plays an extremely important role in DBL, especially in the design phase. This study contributes to research in DBL teaching approach, CT instruction, its application in STEM education in particular, and how it can be used in elementary level education in general."
"The ""How-To"" as a Post-AI Assessment Tool","Mitch, Roman",2024,"This paper introduces a simple but innovative assignment technique, the ""How-To"" as a way to simplify the relationship with AI in assessment events. As an assignment, the ""How-To"" guide merges reflective practice with technical skill development in technical or creative fields, inviting students to author a guide based on insights from prior coursework, personal projects or specific directed challenges. This method emphasizes reciprocal learning by engaging students in a reflective process where they must articulate and analyze their technical learning, thus reinforcing their understanding and evidencing their mastery of the given learning outcome. This technique could be more broadly applicable, building on the large success of online how-to tutorials; but in flipping the emphasis from passive consumption to productive engagement, the discussed assignment encourages a blend of narrative, technical detail, and creative expression, culminating in a resource that benefits both the author, their peers and potentially course development itself. This presentation will explore how the assignment’s framework develops as an extension of the principle of ‘ako’, a Mundefinedori concept emphasizing reciprocal learning. The discussion will focus on its application within the specific educational context of Aotearoa New Zealand and the broader value it offers to creative and technical education."
The AL Goldberg machine: a virtual environment for engaging learners in algorithmic practices,"Pearl, Harrison and Arrants, Samuel and Swanson, Hillary and Trninic, Dragan",2020,"Familiarity with the construction, test, and refinement of computational algorithms is of critical importance to many disciplines in the 21st century. We introduce a novel learning environment that lowers the threshold to participation in algorithmic practices including using functions to transform input, using conditionals to selectively transform or manipulate input, creating simple and complex algorithms, and testing and debugging algorithms to iteratively improve them. Our learning environment leverages VR technology and principles of embodied cognition that prioritize ""hands in"" learning. Instead of creating algorithms through traditional computational programming (which often renders the structure and components of an algorithm opaque), students using our technology build ""concrete algorithms"" in the form of a virtual Rube Goldberg-type machine that makes the algorithm's structure, components, and functioning visible."
The APP Method: Self-Regulation Strategies Giving POWER to Computer Science Students,"Drozdowski, Corina S. and Emeghara, Solomon and Marlowe, Thomas J. and Herbert, Katherine G. and Anu, Vaibhav K. and Hagiwara, Sumi and Robila, Stefan A.",2024,Sin Valor
The assessment of mobile computational thinking,"Sherman, Mark and Martin, Fred",2015,"This paper introduces a rubric for analyzing ""mobile computational thinking"" (MCT) as represented in App Inventor work products. To demonstrate its efficacy, this rubric was used to evaluate and compare student work from the CS and non-CS student cohorts in a mixed-major app design undergraduate course. Our analysis showed some significant differences between the cohorts, which were expected, as well as more subtle differences. The rubric demonstrated that it was sensitive to significant and subtle variations of MCT. The instrument is available for download and use."
The Association between Computational Thinking and Mental Models in Talented Children (Doctoral Consortium),"Kunz, Katrin",2024,"This doctoral research explores the link between computational thinking (CT) and mental models in talented children, addressing a gap in empirical studies on effects of computer science interventions. The research employs a mixed methods approach, utilizing randomized controlled field studies and interviews with primary school students attending computational thinking courses. Thus, two new computational thinking interventions have been developed and will be evaluated by a pilot, efficacy, and effectiveness study including either a wait-list or treated control group. The test instrument measuring mental models will first be employed in semi-structured interviews with talented children attending these computational thinking courses and then subsequently implemented in randomized controlled field trials to compare the effects of the courses on computational thinking abilities and the development of stable and viable mental models."
The Benefits of Computational Thinking,"Snalune, Phillip",2015,Sin Valor
The Best of Both Worlds: Designing a Tiered Hybrid Interface for Teaching Machine Learning in K-9 Education,"Bilstrup, Karl-Emil Kj\ae{}r and Kaspersen, Magnus H\o{}Holt and Larsen, Matilde Fjelds\o{} and Bouvin, Niels Olof and Petersen, Marianne Graves",2022,"We designed Machine Learning Machine 2.0, a tiered hybrid interface allowing learners to create simple machine learning (ML) models using a tangible user interface and further inspect and tinker with them using a graphical user interface. This design experiment investigates how the two interaction styles can complement each other when used in the same educational tool to make ML concepts more approachable and prompt learners’ investigation of ML processes. The Machine Learning Machine 2.0 was designed in a co-design process with teachers and tested in a pilot study with pupils aged 13 to 15, where we found that the combination of interaction styles scaffolded pupils in forming and testing hypotheses about ML and discussing ML processes. Based on these experiences, we provide design recommendations and future directions for designing tiered hybrid interfaces for teaching about complex computational technologies, such as machine learning, in K-9 education."
"The Block-based, Text-based, and the CS1 Prepared","Dawson, Trent",2021,"For over 50 years, computer scientists whose backgrounds span many academic and corporate affiliations have attempted to truncate a novice programmer’s investment into their learning that might expedite the length of time required to advance from beginner to intermediate programmer. Widely accepted innovations in programming languages that use blocks instead of text to maintain novices’ motivation and attention have replaced some conventional text-based pedagogies at the pre-college level [8]. This study aims to contribute new knowledge to the Computer Science Education (CSEd) field to empirically validate whether text or block-based languages optimally prepare high school students for success in undergraduate level CS1 (Introduction to Computer Science) courses. The research sub-focus aims to distinguish the significance of equitable preparation between students from underserved communities and their peers arriving at college from affluent areas. This study introduces a 7-week, mixed-methods inquiry aimed at entering first-year undergraduate students enrolled in CS1, exploring their prior programming knowledge and experiences that might establish a relationship among high school programming curricula and learners’ CS1 achievement."
The Changing Face of Computer Science Education - What Lies Behind and What Lies Ahead?,"Rangarajan, Anuradha and Nobles, Calvin and Parthasarathy, Rangarajan and Dawson, Maurice",2024,"The domain of computer science (CS) education has seen many inclusions, exclusions, and transformations over the past decades. CS education has come a long way from its initial goal of offering training in core technology development including software programming in the commonly used software and hardware development to build better and faster computers. There was a point in time when CS education involved perspectives of computational learning, commensurate with the thinking that software and hardware could be used to solve problems in multiple knowledge domains (such as in library science). When faced with low enrollment and interest of women and minorities in CS education, there was an impetus on encouraging diversity in CS education, leading to diversity-inclusive CS instruction."
The community garden hack: participatory experiments in facilitating primary school teacher's appropriation of technology,"Karimi, Arafeh and Worthy, Peter and McInnes, Paul and Bod\'{e}n, Marie and Matthews, Ben and Viller, Stephen",2017,"1As technology increasingly pervades the daily life of teachers and students, finding sustainable ways to successfully integrate innovative technologies in classrooms remains a challenge. This paper reports on our experiences designing and running workshops with (and for) teachers. Collectively, the aims of the workshops were geared ultimately at encouraging teachers to work with technologies in more `designerly' ways in the classroom, i.e. looking at technology as a working material, rather than as an off-the-shelf tool for certain activities, educational content or as an isolated part of the curriculum. We present a case study of one of the workshops, the Community Garden, designed in the format of a hackathon. We report on how teachers adopted the workshop concept, appropriated the technologies and, more interestingly, how six months later they appropriated the design process as a pedagogy to engage students in their learning."
The computational puzzle design framework: a design guide for games teaching computational thinking,"Jiang, Xina and Harteveld, Casper and Huang, Xinyuan and Fung, Anthony Y. H.",2019,"Games have been designed to foster children's computational thinking (CT) skills, which is widely recognized as a key ability that should be mastered in this computing-driven era. Because learning coding skills is cognitively difficult and uninvolving for novices and it is recommended to learn CT concepts first, many educational games have been developed to teach CT in a non-coding environment. However, despite the breadth of such games and the demand for it, little is known about how to design such games or why such games are designed in a particular way. To address this gap, this paper presents a design framework that describes the building blocks for developing (non-coding) gameplay elements in games teaching CT. The framework focuses specifically on computational problem-solving because this is where games can specifically aid with. We illustrate the design framework through LittleWorld, a mobile game that teaches CT concepts through insects."
The computational thinking across the curriculum workshop,"Settle, Amber",2011,"We report on a workshop conducted as a part of an NSF-funded project focused on enhancing computational thinking in the general education curriculum. The workshop brought together project participants as well as other interested individuals to reflect on the first two years of the grant and begin planning for future work. We report on the results of a survey of workshop participants, providing insight into factors that contribute to the success of such events."
The Construction and Application of A Blended Contextual Teaching Model for Computational Thinking Development,"Yang, Hairu and Shao, Yanru and Liu, Yuqi and Dong, Jiamin and Li, Qiuhong and Chen, Yipan",2024,"Computational thinking has become one of the key literacies necessary for talents in the digital and intelligent era of the 21st century. In the current educational environment, the content of the curriculum that is detached from reality and the fragmented knowledge have brought great difficulties to the cultivation of students' computational thinking ability. Contextual teaching can connect knowledge with reality. Through the e-learning platform combined with real-life scenarios to build a specific real situation, which can drive students to carry out rich thinking activities. Therefore, this study designed a blended contextual teaching model for the development of computational thinking based on contextual learning theory and constructivist learning theory. It was applied to the teaching of high school information technology courses, and the effectiveness of the model was verified by investigating and analyzing whether there were changes in students' academic performance and computational thinking ability under the blended contextual teaching model through the questionnaire survey method and the experimental research method. The results of the study show that the application of the model can effectively improve students' academic performance and computational thinking ability, which provides an effective reference and reference for future educational teaching practice."
The consume - create spectrum: balancing convenience and computational thinking in stem learning,"Basawapatna, Ashok Ram and Repenning, Alexander and Koh, Kyu Han and Savignano, Mark",2014,"Future school science standards, such as the Next Generation Science Standards (NGSS), emphasize the integration of simulation and modeling activities in the classroom environment. The extremes of these activities have two vastly different implementations. On one hand, a teacher can have students experiment on a pre-made simulation associated with the material. On the other hand, students can use, for example, an end-user programming tool to create the simulation from scratch. This allows students to not only experiment on, but also, to model the real world phenomenon being studied- a key component of computational thinking. However, the greater amount of time necessary for student authoring of simulations can make such an approach infeasible in the classroom environment. This paper presents a spectrum of strategies for integrating simulations into class- rooms emphasizing our research at the Scalable Game Design Lab, University of Colorado Boulder as well as research from other entities. Starting at consuming simulations and adding more user interaction and authoring elements begins to provide a gentle slope from consumption towards simulation creation. Results indicate that many of these strategies are quite effective."
"The Design, Development, and Evaluation of a Novel Computer-based Competency Assessment of Computational Thinking","Lai, Rina P.Y.",2020,"There is a long-standing question in the computational thinking (CT) literature regarding CT assessment methods. To address this, this project takes a multidisciplinary approach to design, develop, and evaluate a novel computer-based competency assessment of CT. Several pilot studies have suggested promising results regarding its reliability; the evaluation phase will be conducted using a psychometric model and data mining techniques to investigate item properties and extract performance patterns."
The Development and Challenges of Computational Thinking Board Games,"Wu, Sheng-Yi",2018,Sin Valor
The Development of Computational Thinking in Computing Higher Education,"Moreira Oliveira, Carolina",2022,"Curriculum guidelines for Computer Science undergraduate courses from different institutions recognize computational thinking as a fundamental skill that all students must exercise in Computer Science courses. Unfortunately, the guidelines do not make it clear when and how these skills should be exercised. The literature recognizes the importance and relevance of computational thinking. However, there is still little evidence around which aspects should be considered to design activities to support the development of computational thinking. To address this problem, my research aims to investigate how to design and conduct activities to promote computational thinking in Computer Science courses. The expected result is to produce an approach to assist the design and conduct of computational thinking learning activities in Computer Science courses."
The Development of Internationalized Computational Thinking Curriculum in Hong Kong Primary Education (Abstract Only),"Wong, Gary K.W. and Zhu, Kening and Ma, Xiaojuan and Huen, John",2016,"Computational Thinking (CT) has been widely introduced and investigated in recent years, particularly in the U.S. since the born of visual, block-based, drag-drop programming environments such as Kodu, Scratch, Minecraft and App Inventor. Although the user interface is mainly in English, the characteristics of these easy-to-use, game-based, and interactive tools attract many teachers and researchers in the world to pay much attention to the possibilities and opportunities of introducing these tools to students. Recently, some primary school teachers in Hong Kong begin to independently introduce some of these programming tools to students at age 7 - 11 as a part of learning activities in their computer lessons. Their motives are similar but not the same, such as making a fun learning and teaching experience, motivating students for active and collaborative participation, and introducing CT concepts to develop generic skills (e.g. problem solving skills, creativity, and critical thinking). However, there is an absence of well-developed and planned curriculum for ""coding education"" to introduce computational thinking systematically to students in the local context with expected learning outcomes. Due to the uniqueness of K-12 curriculum in Hong Kong, the existing curriculum model in the U.S. may need to be customized and redesigned to become suitable for integrating into the curriculum in Hong Kong. In this poster, it describes the first proposed coding education curriculum in Hong Kong primary education (Primary 4 to Primary 6) with relevant objectives, structures, contents, and learning outcomes. A new pedagogical design framework for CT is introduced in this poster, which could be generalizable and yet to be evaluated. This new curriculum will serve as the curriculum guide to local teachers, and is the first research initiative of a three-year longitudinal study investigating the impact of CT activities to students particularly in Hong Kong. The experience of this curriculum development for CT concepts in K-12 education can inspire teachers and researchers in other parts of the world when adopting and internationalizing CT activities based on the curriculum model developed under the U.S. education."
The Development of Students' Computational Thinking Practices in AI Course Using the Game-Based Learning: A Case Study,"Ma, Jingsi and Zhang, Yi and Bin, Hesiqi and Wang, Kang and Liu, Jinfang and Gao, Hanrui",2022,Sin Valor
The Effect of Learning Analytics System towards Learner's Computational Thinking Capabilities,"Jeon, Inseong and Song, Ki-Sang",2019,"The purpose of this paper is to show the effect of learning analytics system based teaching that instructor depends on a system which monitors learner's programming activities and grasps his/her achievement level in real-time under block-based programming environment. Based on the analyzed information, teachers might provide timely help and lead students to engage in coding education. Also, we found that there exits statistically significant difference in decomposition, abstraction, and algorithm components among several components of Computational thinking skills."
The effect of play and worked examples on first and third graders' creating and debugging of programming algorithms,"Bofferding, Laura and Kocabas, Sezai and Aqazade, Mahtob and Haiduc, Ana-Maria and Chen, Lizhen",2022,"Although learning to program can improve students' computational thinking skills---specifically, creating and debugging algorithms---we need to determine instructional strategies that foster such skills in young students. We investigated the role of analyzing worked examples that focused on creating and debugging programming algorithms with 28 first and 27 third graders. Students played a tangible, block-based programming game, Coding Awbie, across six, 20-minute sessions and were randomly assigned to also analyze programming worked examples during sessions one to three (immediate group) or sessions four to six (delayed group). To measure changes in creating and debugging algorithms before and after their worked example intervention, students completed a pretest, midtest (after session three), and a posttest. By midtest, students who were in the immediate group wrote significantly more accurate programs, although both groups had similar accuracy when given the chance to debug their programs. By posttest, both groups made significant gains in accuracy of their programs. Overall, analyzing worked examples proved to be a powerful support for students' programming skills in creating and debugging algorithms. However, students' common bugs indicate that additional worked examples should focus on double-counting errors."
The Effect on Computational Thinking Using SRA-Programming: Anticipating Changes in a Dynamic Problem Environment,"Fanchamps, Nardie and Slangen, Lou and Specht, Marcus and Hennissen, Paul",2022,Sin Valor
The Effectiveness of Self-Directed Learning in Developing Computational Thinking of Middle School Students,"Zhou, Qian and Luo, Xiande and Dong, Yilin and Khalid, Faiza and Ma, Hongliang",2023,"Computational thinking (CT) is seen as one of the core elements fostered in STEM education, and many countries prepare and implement curricula for its development. Researchers realize that the development of CT in students at the elementary and middle school levels not only enables earlier use of CT, but also can better solute the problems in their daily learning. This study investigated the impact of self-directed learning on the development of CT in a block-based programming course. Using Pre- and posttest quasi-experimental research method, 128 students from a middle school were selected. Through the CT skill scale, the CT self-efficacy scale, and semistructured interviews, the quantitative and qualitative data were analyzed after four months of interventions. The findings revealed that the self-directed learning had a positive impact on middle school students’ CT skill and self-efficacy. Therefore, results revealed that self-directed learning is one of the effective learning strategies for developing CT of middle school students."
The Effectiveness of Teaching Approaches in Computational Thinking Education: A Meta-Analysis,"Chen, Yunshan and Wang, Yining and Li, Yanyan",2023,"This meta-analysis examined research on the effects of different teaching approaches on students’ computational thinking (CT) from 2010 to 2022. A total of 35 articles met inclusion criteria and were included in the final analysis with a total of 49 independent effect sizes. The meta-analysis results showed that the current K-12 teaching has a moderate positive impact on the development of students' computational thinking (g=0.548). Pair programming, unplugged activities, and project-based learning have the most significant effects, which are more helpful in cultivating students’ computational thinking. Moreover, we analyzed the impact of moderator variables on the relationship between K-12 teaching and computational thinking. Findings revealed that the effects of CT education were more substantial (a) for middle school students than for primary school students, (b) in interdisciplinary courses than in computer science courses, (c) with collaborative learning activities than with individual learning activities. Based on this, we suggest that paired programming, unplugged activities, and project-based learning, which are based on collaborative learning, should be used more for CT education. In addition, schools should develop interdisciplinary courses to promote computational thinking migration in different disciplines."
The effects of a progressive scaffolding approach on middle school students'computational thinking skills and self-efficacy,"Xi, Feifei and Xiao, Tianyu and Li, Xiaofei and Hu, Yafei and Ma, Hongliang",2024,"Computational thinking (CT) is considered a necessary skill for the 21st century. Researchers have increasingly focused on how to effectively enhance students’ CT in programming courses. This study proposes a progressive scaffolding approach with flowcharts and visual programming codes applied to a visual programming course based on an open-source hardware platform to improve CT skills and self-efficacy in middle school students. Forty-five middle school students in grades 7 and 8 participated in this study. Both quantitative and qualitative data were collected by using CT tests, scales, and semi-structured interviews. A repeated measures analysis of variance (ANOVA) examined differences in CT skills and self-efficacy on the pre-test, mid-test, and post-test. The results indicated that the progressive scaffolding approach significantly improved middle school students’ CT skills and self-efficacy. These results reveal the effectiveness of the progressive scaffolding approach in improving the computational thinking of middle school students in a visual programming course with an open-source hardware platform, which helps to extend the design of progressive scaffolding."
The effects of constructing robot-based storytelling system on college students' computational thinking skill and technology comprehension,"Hu, Chih-Chien and Chen, Ming-Hsien and Yuadi, Imam and Chen, Nian-Shing",2022,Sin Valor
The Effects of Using Poly-Universe on Computational Thinking in Biology and Physical Education,"Schmidthaler, Eva and Schalk, Maritta and Schmollm\""{u}ller, Matthias and Sabitzer, Barbara and Andjic, Branko and Lavicza, Zsolt",2023,"Today’s teaching and didactical methods are trying more and more to integrate digital technologies and computational thinking (CT) into other subjects. One way of combining and integrating these important skills and CT into all subjects, school levels, and school types is to include the game Poly-Universe (PolyUni). According to the results of the Poly-Universe in School Education (PUSE) study 2018, the game can be expected to have a positive effect on visual perceptual progress, including isolation and the development of shape-background skills. So far, however, comparatively few attempts have been made to explore the educational possibilities of PolyUni for different school levels and subjects, besides mathematics. This research explores how PolyUni can be used to promote CT and to evaluate whether the learning objectives in the subjects of physical education and biology have been achieved. Furthermore, it examines how PolyUni combines the requirements of the different curricula in secondary school, based on self-designed tasks. Additionally, further aspects PolyUni can promote besides the curriculum in secondary school are discussed. To explore the above-mentioned aspects, a mixed-methods study methodology was used. The participant observation method was employed for qualitative data collection, and a self-designed assessment grid and additional picture analysis were used for the quantitative data. The game was utilized in two workshops for biology and physical education at an Austrian secondary school, and fifty-six students were observed and analyzed. Based on the present data, it can be assumed that PolyUni helps to achieve the requirements of the curricula and pre-defined teaching and learning objectives in a playful way. Furthermore, the game not only promotes CT in secondary school but also encourages enjoyment and collaboration between peers in biology and physical education lessons."
The emergence of algorithmics in grade 1: a study within the mathematical curriculum,"Mestre, Célia and Martins, Cristina and Tourais, Cândida and Guerra, Isabel",2023,Sin Valor
The Essence of Computational Thinking,"Yaşar, Osman",2017,Sin Valor
The Europe Code Week (CodeEU) initiative shaping the skills of future engineers,"Moreno-León, J. and Robles, Gregorio",2015,Sin Valor
The fairy performance assessment: measuring computational thinking in middle school,"Werner, Linda and Denner, Jill and Campe, Shannon and Kawamoto, Damon Chizuru",2012,"Computational thinking (CT) has been described as an essential capacity to prepare students for computer science, as well as to be productive members of society. But efforts to engage K-12 students in CT are hampered by a lack of definition and assessment tools. In this paper, we describe the first results of a newly created performance assessment tool for measuring CT in middle school. We briefly describe the context for the performance assessment (game-programming courses), the aspects of CT that are measured, the results, and the factors that are associated with performance. We see the development of assessment tools as a critical step in efforts to bring CT to K-12, and to strengthen the use of game programming in middle school. We discuss problems and implications of our results."
The framework for the integration of computational thinking in ideation process,"Azman, Sharifah Maryam Syed and Arsat, Mahyuddin and Mohamed, Hasnah",2017,Sin Valor
The Future Nexus of Computational Thinking Education: A Preliminary Systematic Review of Reviews,"Xie, Zerong and Radloff, Jeffrey and Wong, Gary K. W. and Yeter, Ibrahim H.",2022,Sin Valor
The impact of different types of scaffolding in project-based learning on girls' computational thinking skills and self-efficacy,"Jin, Yunbo and Sun, Junmei and Ma, Hongliang and Wang, Xiaohong",2021,Sin Valor
The Impact of ICT Resources on Chinese Middle School Students' CT Skills: The Mediating Role of ICT Literacy,"Zhou, Yu and Sun, Junmei and Zhang, Jing and Jing, Bin and Ma, Hongliang and Li, Xiaofei and Han, Yifei",2024,Sin Valor
The Impact of Intelligent Pedagogical Agents’ Interventions on Student Behavior and Performance in Open-Ended Game Design Environments,"Yal\c{c}\i{}n, \""{O}zge Nilay and Lall\'{e}, S\'{e}bastien and Conati, Cristina",2023,"Research has shown that free-form Game-Design (GD) environments can be very effective in fostering Computational Thinking (CT) skills at a young age. However, some students can still need some guidance during the learning process due to the highly open-ended nature of these environments. Intelligent Pedagogical Agents (IPAs) can be used to provide personalized assistance in real-time to alleviate this challenge. This paper presents our results in evaluating such an agent deployed in a real-word free-form GD learning environment to foster CT in the early K-12 education, Unity-CT. We focus on the effect of repetition by comparing student behaviors between no intervention, 1-shot, and repeated intervention groups for two different errors that are known to be challenging in the online lessons of Unity-CT. Our findings showed that the agent was perceived very positively by the students and the repeated intervention showed promising results in terms of helping students make fewer errors and more correct behaviors, albeit only for one of the two target errors. Building from these results, we provide insights on how to provide IPA interventions in free-form GD environments."
The Impact of Non-Formal Computer Science Outreach on Computational Thinking in Young Women,"Hiley, Katherine and Cebolla, Hannah and Elshehaly, Mai",2023,"The role of non-formal education in increasing female participation in Computer Science (CS) is a hot topic. Short-term interventions, including programming skill outreach activities, have been reported to increase self-efficacy and willingness to pursue computing careers in young women. We explored the impact of a programming outreach activity on three types of measures for 30 female pupils: computing self-efficacy, social participation, and understanding of basic computing concepts. Preliminary results revealed a significant increase in participants' self-efficacy and sense of belonging in computing after the informal learning activity. Students were more focused on tasks when engaging socially with their peers and teachers. A decrease in misconception was observed in uni-structural knowledge but no significant difference was found in multi-structural computing knowledge acquisition. These data provide a baseline for study of the long term impact of outreach activities."
The Impact of Pair Programming Based on Project-Based Learning on Computational Thinking of Junior High School Students,"Liu, Hui and Li, Zhen and Duan, Jia Ting and Zeng, Yu",2023,"Computational thinking as a key in K-12 education has gotten more and more attention. Researchers and teachers are focusing more on tools and teaching methods that could edify computational thinking. Nowadays, developing students’ computational thinking through graphical programming has become a norm. In addition, project-based learning has been proven effective in cultivating students’ computational thinking. The purpose of this study is to find out the effectiveness of the paired programming teaching method, which is based on project-based learning in junior high school students’ computational thinking, and to provide new opportunities and conditions for the development of computational thinking in junior high school students. This research could expand the view of starting project-based graphical programming courses, and provide a reference for the designing, developing, and teaching of junior high school computational thinking courses."
The Impact of Physical Computing and Computational Pedagogy on Girl’s Self – Efficacy and Computational Thinking Practice,"Psycharis, Sarantos and Kalovrektis, Konstantinos and Xenakis, Apostolos and Paliokas, Ioannis and Patrinopoulos, Matthaios and Georgiakakis, Petros and Iatrou, Paraskevi and Theodorou, Paraskevi and Papageorgiou, Theodora and Ntourou, Vasiliki",2021,Sin Valor
The Impact of Playing Multiplayer Online Battle Arena Video Games on the Enhancement of Computational Thinking Skills Among Students in Indonesia,"Jumana, Athaillah Adhar and Umboh, Josua Golden and I Ketut Dharma Wijaya, K and Gunawan, Alexander Agung Santoso and Saputra, Karen Etania",2023,Sin Valor
The Impact of stem Courses on Students’ Computational Thinking: Mediation based on problem solving ability and stem attitude,"Zhang, Jiaying and Zhang, Yi and Lin, Yuru",2023,Sin Valor
The Importance of Algorithmic Thinking Development in Primary Education,"Dumančić, Mario and Rogulja, Nataša and Tomljenović, Krešo",2024,Sin Valor
The Importance of Teaching Logic to Computer Scientists and Electrical Engineers,"Mayer, Paul and Baraniuk, Rich",2025,"It is argued that logic, and in particular mathematical logic, should play a key role in the undergraduate curriculum for students in the computing fields, which include electrical engineering (EE), computer engineering (CE), and computer science (CS). This is based on 1) the history of the field of computing and its close ties with logic, 2) empirical results showing that students with better logical thinking skills perform better in tasks such as programming and mathematics, and 3) the skills students are expected to have in the job market. Further, the authors believe teaching logic to students explicitly will improve student retention, especially involving underrepresented minorities in STEM1, whose rate of attrition is higher than for non-minority students. Though this work focuses specifically on the computing fields, these results demonstrate the importance of logic education to STEM (science, technology, engineering, and mathematics) as a whole."
The Influence of Code.org on Computational Thinking and Learning Attitude in Block-Based Programming Education,"Choi, Wan Chong",2023,"In recent years, the elementary schools in Macao have increasingly offered programming curriculum. Programming curriculum emphasizes computational thinking, which is the capacity to analyze, design algorithms, and find solutions to programming problems. However, it is not easy to develop students’ computational thinking abilities. In addition, students' poor learning attitudes are connected to difficulties in learning programming. Therefore, it is crucial for educators to investigate how to improve students' computational thinking and learning attitudes. This study applied a quasi-experimental research method to a single group and used a pretest-posttest method to measure the influence of using Code.org on computational thinking and learning attitudes. The participants were 20 third-grade students in an elementary school in Macao. The teaching duration is carried out for three weeks, six lessons per week, a total of eighteen lessons, and 40 minutes per lesson. The Programming Computational Thinking Scale (PCTS) and the Attitude Scale of Computer Programming Learning (ASCOPL) were used to evaluate the implementation's effect. After analyzing the questionnaire scores and students' achievements on the Code.org website, it was found that after receiving the Code.org instruction, students were able to complete most of the stage of the Course B curriculum in Code.org, and their computational thinking and learning attitudes have improved significantly."
The Influence of CodeCombat on Computational Thinking in Python Programming Learning at Primary School,"Choi, Wan Chong and Choi, Iek Chong",2024,"In an age of rapid technological development, primary schools now teach programming to young students, focusing on developing their computational thinking, problem-solving, and ability to use computers to create solutions. However, fostering computational thinking skills in younger students was a challenging task. The serious game CodeCombat has become a potential resource for instructing young students in primary schools on basic programming principles using Python.This study delved into the role of the serious game CodeCombat in advancing computational thinking competencies among primary school students undertaking Python in Macao. Using a quasi-experimental pretest-posttest approach, we examined 49 grade-one students over a two-week Python programming course facilitated by CodeCombat. The Computational Thinking Scale (CTS), encompassing Creativity, Cooperativity, Algorithmic Thinking, Problem Solving, and Critical Thinking, was employed to measure shifts in computational thinking before and after the teaching experiment.Data analysis through paired-sample t-test highlighted notable progress in computational thinking skills, with marked improvements specifically in Creativity, Critical Thinking, Algorithmic Thinking, and Problem Solving. However, Cooperativity did not exhibit the same upward trend, implying that CodeCombat's impact was more pronounced on solitary cognitive capabilities than collaborative skills. Moreover, the correlation between different dimensions indicated that these computational thinking skills were mutually reinforcing, suggesting that enhancing one might contribute to the development of others. The findings endorsed that game-based learning is effective in programming education and recommended integrating CodeCombat to improve computational thinking in learning Python programming in primary school."
The Influence of Problem Solving Based Practice on Pupils' Computational Thinking,"Liu, Xiaoying and Cong, Longjie and Xu, Jihong",2023,"The cultivation of computing thinking in primary school has attracted the attention of all countries in the world. Based on the fifth grade information technology curriculum of primary school, this paper constructs a practice link based on problem solving, namely, five main links: observe, write, paste or draw, attempt or create,share. It also verifies whether the practice link is conducive to promoting the development of students' computing thinking. The results show that, the practice link based on problem solving can not only promote the improvement of algorithm expression ability and programming ability of primary school students, but also exercise their ability to solve problems, establish and develop computing thinking. This practice link can provide feasible strategies for information technology courses in primary schools, and provide reference for the research and practice of computing thinking cultivation of primary school students in China."
The influence of students’ computer science learning experience on their perception of computational thinking,"Ye, Jiachu and Lai, Xiaoyan and Wong, Gary K.W.",2021,Sin Valor
The Integration of Coding in Teacher Education Programs: Course Experiences and the Teaching and Learning of Mathematics,"Floyd, Lisa Anne",2020,"As a result of the rapidly changing digital landscape, there is momentum to bring coding to K-12 classrooms in jurisdictions all around the world. A barrier to student learning and success with coding, however, is that many teachers have little or no prior coding experience. Using constructivist grounded theory, this study will seek to understand what experiences in the teacher education course, Computational Thinking in Mathematics and Science Education, affect how preservice teachers perceive coding in teaching and learning about mathematics. Experiences in the course include hands-on activities, readings, tutorials, opportunities for reflection, assignments that require preservice teachers to teach coding to intermediate or senior students, and participation in online discussions. Research questions include 1) What course experiences or other factors affect how preservice teachers come to view coding in teaching and learning mathematics? and 2) How are these views, related to coding in teaching and learning mathematics, translated into their practice teaching?"
The Integration of Computational Thinking and Artificial Intelligence Serves to Enhance The Cognitive Processes and Skill Acquisition of Students,"Tian, Shenmeihao",2024,"In the rapidly evolving field of computer science education, the integration of computational thinking (CT) with artificial intelligence (AI) has become a focus of attention as it may have the potential to technologically facilitate and equip students with required future skills. This research emphasizes the value of the harmonies in between CT and AI within the Science, Technology, Engineering, and Mathematics (STEM) structure. Key findings consist of: (a) CT comprises aspects such as abstraction, algorithms, trouble disintegration, pattern recognition, debugging, and AI, which should operate cohesively to deal with complex obstacles properly; (b) Many initiatives have incorporated CT into STEM education and learning via techniques like gamification, high-order thinking questions (HOTS), and peer evaluation. Consequently, it is essential to integrate computational thinking with artificial intelligence in order to improve students' cognitive development and skill acquisition."
The Integration of Computational Thinking and Making in the Classroom,"Magda, David and Gardner-McCune, Christina and Jimenez, Yerika and Chu, Sharon and Kulkarni, Abhishek",2024,"Maker-based learning and Computational Thinking (CT) have increased in popularity in formal educational settings over the past decade. Particularly, the combination of CT and making seem to hold promise for providing opportunities for students to learn and use computing concepts outside of computing courses. This paper presents findings from a two year study of the integration of computational making into 5th and 6th grade science classrooms. Students participated in computational making interventions in which they programmed Arduino microcontrollers to create scientific models of concepts that aimed to help them engage with the science content while learning CT and making skills. In this paper, we explore the differences between the desired computing learning progressions, students' performance on assessments, and perceptions of computer science to answer: To what extent are middle school students able to learn computing through computing integrated science curriculum? We observed that the programming concepts taught were largely dependent on the needs of the science and making project. Our findings suggest that while students had opportunities to learn and use programming concepts, their performance on assessments was between 15% and 78% correct for conceptual and applied questions and their programming self-efficacy and their perceptions of computer science were lower than desired. We discuss the implications of these findings and the factors that impact the integration of CT in core disciplines and the challenges this presents as we aim to use integration approaches to effectively teach computing outside of computing courses and to broaden participation in computing."
"The Kessel Run - A Gamification of Visual, Spatial, and Computational Thinking","Winter, Victor and Sherwin, Kate",2020,"Technology can be both a bane and a boon to education. Social media apps and digital games offer rich and highly stimulating forms of engagement outside of the classroom. This level of stimulus has created challenges for traditional educational paradigms and approaches. A promising response is for educators to embrace technology through interactive apps and gamification.This workshop provides hands-on engagement with a collection of freely-available interactive web apps that focus on the development of visual, spatial, and computational thinking. The workshop concludes with participants playing a third-person Unity game in which the (interactive) standalone web apps presented in the workshop have been embedded. The game, inspired by Han Solo's Kessel run, involves a trek across a sequence of platforms located in a galaxy far far away. Teleportation from one platform to the next is enabled by correctly completing the activity contained in the embedded (and interactive) web apps and then having the player walk through a portal. The player game score is calculated based on the speed and accuracy of their engagement with the exercises present."
The Landscape of Computational Thinking Problems for Practice and Assessment,"Pel\'{a}nek, Radek and Effenberger, Tom\'{a}\v{s}",2023,"To provide practice and assessment of computational thinking, we need specific problems students can solve. There are many such problems, but they are hard to find. Learning environments and assessments often use only specific types of problems and thus do not cover computational thinking in its whole scope. We provide an extensive catalog of well-structured computational thinking problem sets together with a systematic encoding of their features. Based on this encoding, we propose a four-level taxonomy that provides an organization of a wide variety of problems. The catalog, taxonomy, and problem features are useful for content authors, designers of learning environments, and researchers studying computational thinking."
The learning value of game design activities: association between computational thinking and cognitive skills,"Spieler, Bernadette and Kem\'{e}ny, Ferenc and Landerl, Karin and Binder, Bernd and Slany, Wolfgang",2020,"Game design activities support young people to acquire Computational Thinking (CT) skills in an entertaining way. While the importance of CT is increasing, we still lack empirical data on how cognitive functions support learning to program. The current study is a step towards bridging this gap. We tested 48 participants aged 10-15 during summer courses to see how programming skills are associated with cognitive processes. Descriptive statistics of gaming and design elements of the participants' final projects were correlated with measures of working memory, creativity, and arithmetic. Results show that different concepts of CT applied in games were associated with separate cognitive measures. The number of design elements (shape and structure of the game, sound, visual design) correlated with both working memory and arithmetic skills; the number of game elements (interactivity, mechanics, dynamics, aesthetics) correlated with creativity; whereas the complexity of the project was only predicted by age. The overall evaluation of the project was associated with age and arithmetic skills. Since the different concepts of CT were predicted by different cognitive skills, the current study provides empirical evidence that CT is not a single homogenous skill, but a set of subskills, with each part loading on different cognitive functions."
The long quest for computational thinking,"Tedre, Matti and Denning, Peter J.",2016,"Computational thinking (CT) is a popular phrase that refers to a collection of computational ideas and habits of mind that people in computing disciplines acquire through their work in designing programs, software, simulations, and computations performed by machinery. Recently a computational thinking for K-12 movement has spawned initiatives across the education sector, and educational reforms are under way in many countries. However, modern CT initiatives should be well aware of the broad and deep history of computational thinking, or risk repeating already refuted claims, past mistakes, and already solved problems, or losing some of the richest and most ambitious ideas in CT. This paper presents an overview of three important historical currents from which CT has developed: evolution of computing's disciplinary ways of thinking and practicing, educational research and efforts in computing, and emergence of computational science and digitalization of society. The paper examines a number of threats to CT initiatives: lack of ambition, dogmatism, knowing versus doing, exaggerated claims, narrow views of computing, overemphasis on formulation, and lost sight of computational models."
The Machine Learning Machine: A Tangible User Interface for Teaching Machine Learning,"Kaspersen, Magnus H\o{}holt and Bilstrup, Karl-Emil Kj\ae{}r and Petersen, Marianne Graves",2021,"Machine Learning (ML) is often used invisibly in everyday applications with little opportunity for consumers to investigate how it works. In this paper, we expand recent efforts to unfold what students should know about ML and how to design tools and activities allowing them to engage with ML. To do so, we explore how to make processes and aspects of ML tangible through the design of the Machine Learning Machine (MLM); a tangible user interface which enables students to create their own data-sets using pen and paper and to iteratively build and test ML models using this data. Based on insights from the design process and a preliminary pilot study with the MLM, we discuss how a tangible approach to engaging with ML can spur curiosity in students and how the iterative process of improving ML models can encourage students to reflect on the relation between data, model and predictions."
The Pedagogical Use of the Online Digital Weather Station in Teaching Mathematics to First-Year Elementary School Students,"Da Costa Santos, Marinalva and Pedroso, Rogerio Santos and Cavichioli, Amanda Marques and Soares Barni, Catia Helena",2024,Sin Valor
The Practice and Exploration of Scratch Programming Instruction in Elementary School Based on Game Design,"Huansong, Yang and Jia’En, Wu and Mengting, Shen",2021,Sin Valor
The present and future of computational thinking,"Astrachan, Owen and Hambrusch, Susanne and Peckham, Joan and Settle, Amber",2009,Sin Valor
The profession of ITBeyond computational thinking,"Denning, Peter J.",2009,"If we are not careful, our fascination with ""computational thinking"" may lead us back into the trap we are trying to escape."
The Reform and Practice of College Computer Basic Courses Towards Computational Thinking and Empowerment Education Under the Background of New Liberal Arts,"Zhang, Shiguang and Fang, Xiaonan and Yuan, Feng and Zhou, Ting",2023,Sin Valor
The Research of Programming Teaching in Primary School on the Cultivation of Computational Thinking,"Wang, Yichi and Zhang, Yi and Mao, Aiping and Wang, Jue and Li, Niu",2020,Sin Valor
The research on online independent learning model based on computational thinking,"Zhou, Xiongjun",2011,Sin Valor
The Role of Basic Psychological Needs Satisfaction in Primary Student’s Computational Thinking Development,"Yin, Stella Xin",2022,Sin Valor
The Role of Computational Thinking Practices in Making: How Beginning Youth Makers Encounter &amp; Appropriate CT Practices in Making,"Wagh, Aditi and Gravel, Brian and Tucker-Raymond, Eli",2017,"1There are increasing calls to introduce computational thinking (CT) practices at the K-12 level. These calls are motivated by a consensus that CT practices can be valuable for everyone. This work is based on the assertion that making, or the personal construction of objects employing digital and/or analog technologies, can provide a rich context for enacting CT practices. This paper investigates the activities of a group of beginning youth makers creating an interactive digital/ physical water piano to ask: What forms of CT practices do they enact, and in what ways are these practices further developed in their work? Data includes qualitative ethnographic data including observations, recordings and interviews. We explore the ways youth encounter new, yet relatable and intriguing practices---like debugging to isolate an issue---and appropriate them within particular contexts and for particular goals, often to deal with the immediate challenges they are facing. We end by offering conjectures for ways to support beginning youth makers in appropriating CT practices."
The Role of Evidence Centered Design and Participatory Design in a Playful Assessment for Computational Thinking About Data,"Basu, Satabdi and Disalvo, Betsy and Rutstein, Daisy and Xu, Yuning and Roschelle, Jeremy and Holbert, Nathan",2020,"The K-12 CS Framework provides guidance on what concepts and practices students are expected to know and demonstrate within different grade bands. For these guidelines to be useful in CS education, a critical next step is to translate the guidelines to explicit learning targets and design aligned instructional tools and assessments. Our research and development goal in this paper is to design a playful, curriculum-neutral assessment aligned with the 'Data and Analysis' concept (grades 6-8) from the CS framework. Using Evidence Centered Design and Participatory Design, we present a set of assessment guidelines for assessing data and analysis, as well as a set of design considerations for integrating data and analysis across middle school curricula in CS and non-CS contexts. We outline these contributions, describe how they were applied to the development of a game-based formative assessment for data and analysis, and present preliminary findings on student understanding and challenges inferred from student gameplay."
The Role of Spatial Orientation in Diagram Design for Computational Thinking Development in K-8 Teachers,"Salac, Jean and Eatinger, Donna and Franklin, Diana",2023,"The worldwide push for computing education at younger ages requires that teachers are prepared to deliver instruction that supports all learners. Other discipline-based education research fields offer a wealth of instructional scaffolds worthy of exploration in computing. One such scaffold drawn from math education is diagramming. While diagrams are frequently employed in university computing, little is known about its applications in K-8 (ages 6-14) computing.To inform diagram design for K-8 computing, we investigated how the spatial orientation of a diagram (horizontal or vertical) influenced the extent to which K-8 teachers developed different technological, pedagogical, and content knowledge (TPACK) of computational thinking (CT) concepts, such as loops, conditionals, and decomposition. We found that more teachers were able to decompose a sequence of events when using a vertical diagram. While teachers in both conditions were similarly able to describe various CT concepts and aspects of TPACK, more teachers using a vertical diagram made connections between concepts, whereas more teachers using a horizontal diagram described concepts in isolation. We hope this exploration will spur future work into diagramming and more broadly, spatial reasoning in K-8 computing."
The Scope of Autonomy Model: Development of Teaching Materials for Computational Thinking in Primary School,"Carlborg, Niklas and Tyr\'{e}n, Markus and Heath, Carl and Eriksson, Eva",2018,"During the 21st century there has been an increasing interest in the field of computational thinking as a consequence of the ever faster technical development. However, educating future generations in programming and computational thinking is not trivial. Many different platforms and teaching approaches can be used for this purpose. Inspired by the UK initiative with BBC micro:bit, this paper strives to identify what may be important to consider when designing teaching materials with the micro:bit for training Swedish primary school pupils' computational thinking skills relating to mathematical and technical school subjects. This has been investigated in an iterative process, by conducting 21 workshops with the goal to support primary school teachers in developing micro:bit teaching materials. The contribution of this paper is the Scope of autonomy model, which is based on the relation between pupils learning potential, their risk of feeling overwhelmed and the amount of choices provided in exercises. The model aim to support teachers in developing material for teaching programming and computational thinking in accordance with the new curriculum."
The Secret Communication Panel: A Constructionist Communications Device for Developing Computational Thinking Skills in School-Age Children,"Zikovitz, David and Holbert, Nathan and Correa, Isabel",2022,Computational thinking skills have been shown to have a unique cross-curricular relevance. Developing these skills in children using constructionist design to deliver personally meaningful computational experiences could lead to improved dispositions and attitudes towards other forms of STEM learning. The Secret Communication Panel is a constructionist toy in the form of a secret communications device that allows children to create their own highly personalized forms of communication in a computational environment.
The simulation creation toolkit: an initial exploration into making programming accessible while preserving computational thinking,"Basawapatna, Ashok Ram and Repenning, Alexander and Lewis, Clayton H.",2013,"Computational thinking aims to outline fundamental skills from computer science that everyone should learn. These skills include problem formulation, logically organizing data, automating solutions through algorithmic thinking, and representing data through abstraction. One aim of the NSF is to integrate these and other computational thinking concepts into the classroom. This paper introduces a tool called the Simulation Creation Toolkit wherein users apply high-level agent interactions called Computational Thinking Patterns (CTPs) to create simulations. Programming at the Computational Thinking Pattern level allows users to directly create agent interactions in a simulation by employing generic icons acting out a scientific phenomenon they are trying to represent. The Simulation Creation Toolkit aims to preserve the computational thinking benefits of simulation creation while enabling higher-level implementation of agent behaviors. Initial study data collected from sixth grade students with no prior programming experience indicates that students can work the mechanics necessary to create simulations in the classroom environment using the Simulation Creation Toolkit."
The social turn in K-12 programming: moving from computational thinking to computational participation,"Kafai, Yasmin B. and Burke, Quinn",2013,"In this conceptual paper, we argue that recent developments in K-12 programming education are suggestive of what can be called a ""social turn"", a shift in the field in which learning to code has shifted from being a predominantly individualistic and tool-oriented approach to now one that is decidedly sociologically and culturally grounded in the creation and sharing of digital media. We discuss in detail three dimensions of this social turn (1) from writing code to creating applications, (2) from composing ""from scratch"" to remixing the work of others, and (3) from designing tools to facilitating communities. These three shifts illustrate how the development of artifacts, tools, and communities of programming lead us to move from computational thinking to computational participation. We draw from examples of past and current research, both inside and outside of school, and situate these developments in the context of current discussions around computational thinking, which has become a driving force in revitalizing programming in K-12 curricula and altogether broadening participation in computing."
The Sol y Agua RPP: A Bilingual and Culturally Responsive Approach to Introduce Computational Thinking in Middle School,"Akbar, Monika and Mortimer, Katherine and Navarrete, Grecia and Galvan, Stephanie and Molina, George and Reyes, Romelia and Ontiveros, Cynthia and Gray, Scott and Escandon, Sarah and Lyons, Monica and Delgado, Pedro and Medrano, Victor and Kneedler, Haleigh and Benitez, Patricia and Ramirez, Jacob and Vazquez, Jesus and Anderson, Melissa",2022,"The Sol y Agua researcher-practitioner partnership (RPP) project introduces computational thinking (CT) in the middle school of the Paso del Norte region using a linguistically and culturally responsive approach. At the core of this RPP is the Sol y Agua game, a bilingual, culturally- and environmentally-relevant educational game developed at the University of Texas at El Paso to introduce computing and STEM topics in middle school. The Sol y Agua RPP includes some critical areas for a successful RPP, including partnership building and the focus on a linguistically and culturally-responsive pedagogy and content development. We describe our approach to build a sustainable RPP, incorporating bilingual pedagogy, and integrating CT through a culturally- and environmentally-relevant game as part of our RPP experience."
The Solothurn Project: Bringing Computer Science Education to Primary Schools in Switzerland,"Lamprou, Anna and Repenning, Alexander and Escherle, Nora A.",2017,"Currently Switzerland is going through a major reform in its education system. One of its most ambitious and important goals is the inclusion of Computer Science Education already on the primary school level, an important measure in achieving the establishment of an information society. Such a reform raises questions about the appropriate types of approaches to be developed and employed for an effective implementation of Computer Science Education concepts in Swiss primary schools. To this end, the project ""Scalable Game Design Solothurn"" was developed and evaluated. This project both trained teachers and exposed students to Computational Thinking concepts through the two Computational Thinking Tools AgentSheets and AgentCubes online. Results show that teaching Computational Thinking through Scalable Game Design is not only feasible on the primary school level but also enjoyable, with AgentSheets and AgentCubes online proving to be sustainable and effective tools for the implementation of Computer Science Education on this school level. Further analysis of the data enables us to make recommendations regarding optimal ways of implementation for the Swiss reality and point towards new research directions."
The Students' Perspective on Computational Thinking through Flipped Classroom in K-12 Programming Course,"Choi, Wan Chong and Chang, Chi In",2024,"Programming integration into K-12 curricula has become increasingly important in the rapidly evolving educational landscape. Recognizing the need to develop computational thinking among young learners, this study investigated the impact of the flipped classroom approach on computational thinking in K-12 programming courses in Macao, focusing on primary school students' experiences with block-based programmable hardware. Employing a mixed methods research design, it combined quantitative and qualitative analyses to examine how flipped classroom activities—centered around student engagement with material through e-books, videos, and interactive classroom tasks—affected students' understanding and application of computational concepts, practices, and perspectives. Quantitative data were collected using the Programming Computational Thinking Scale (PCTS), and qualitative insights were gathered through semi-structured interviews. The results indicated significant improvements in students' computational concepts and practices, attributed to the advantages of self-study and a stratified approach to task complexity. However, advancements in computational perspectives were less pronounced, highlighting the need for more opportunities for students to refine their presentation skills. The study concluded that the flipped classroom approach, especially with tools like mBlock and Codey-Rocky, effectively nurtured computational thinking in primary school programming courses. It underscored the importance of innovative teaching methods in enhancing students' ability to apply programming concepts in problem-solving and suggested areas for further improvement in educational practices."
The Teaching Mode and Practice Analysis of College Computer Basic Course Based on Computational Thinking,"Xue, Chen and Zhun, Wang",2020,Sin Valor
The Teaching of Programming is not the Future but the Present,"Rial-Fernández, Bárbara and Santacruz-Valencia, Liliana Patricia",2019,Sin Valor
The Teaching Reform of Integration of Theory and Practice with Interest Leading and Ability Training,"Jin, Lan and Su, Ying",2018,"The fundamental of programming course is a professional basic course offered by institutions of higher learning, and C language is usually chosen as the programming language to help cultivate students' comprehensive quality and ability. Taking the fundamental of programming course as an example, aiming at the problems existing in traditional theory teaching and practice teaching, it proposes the theoretical teaching reform that stimulates students' interest in learning and develops the ability of computational thinking, constructs stage and hierarchical practice teaching system, improves continuously teaching methods and introduces the mobile cloud platform to assist teaching. The practice has proved that the students' comprehensive ability has been improved and the teaching effect has been achieved."
The uniqueness of Computational thinking,"Larsson, P. and Apiola, M-V. and Laakso, M-J.",2019,Sin Valor
The use of computational thinking in digital fabrication projects a case study from the cognitive perspective,"Borges, Karen Selbach and de Menezes, Crediné Silva and da Cruz Fagundes, Léa",2017,Sin Valor
The Use of Different Kinds of Robots to Spark Student Interest in Learning Computational Thinking,"Huang, Wei-Yeh and Hu, Chiu-Fan and Wu, Cheng-Chih",2018,Sin Valor
The Virtual Pivot: Transitioning Computational Thinking PD for Middle and High School Content Area Teachers,"Jocius, Robin and Joshi, Deepti and Albert, Jennifer and Barnes, Tiffany and Robinson, Richard and Catet\'{e}, Veronica and Dong, Yihuan and Blanton, Melanie and O'Byrne, Ian and Andrews, Ashley",2021,"In 2018 and 2019, Infusing Computing offered face-to-face summer PD workshops to support middle and high school teachers in integrating computational thinking into their classrooms through week-long summer PD workshops and academic-year support. Due to COVID-19, 151 teachers attended the Summer 2020 PD workshops in a week-long virtual conference format. In this paper, we describe Virtual Pivot: Infusing Computing, which employed emerging technology tools, pre-PD training, synchronous and asynchronous sessions, Snap! pair programming, live support, and live networking. Drawing on findings from participant interviews and post-PD surveys, we argue that three categories of changes (digital tools, formats, and supports for teacher engagement and collaboration) were effective in increasing participants' self-efficacy in teaching CT, supporting collaboration, and enabling participants to design CT-infused content-area lessons. We conclude by discussing how elements of this virtual PD can be replicated to increase teacher and student access to CT practices in middle and high school classrooms"
The Waste Separation Game to Promote Computational Thinking Through Mixed Reality Technology,"Phatarametravorakul, Worapat and Cheevanantaporn, Suphitsara and Jamsri, Pornsuree",2022,Sin Valor
The Zones of Proximal Flow Tutorial: Designing Computational Thinking Cliffhangers,"Basawapatna, Ashok and Repenning, Alexander and Savignano, Mark",2019,"The creation of computer science tutorials is becoming critically important as hundreds of millions of students each year get their first CS experience through self-directed online activities. Creating a ""cliffhanger"" activity, with high engagement during and motivation to continue learning post activity, is a balancing act. If tutorials provide too much detailed information, users may be able to follow instructions but can feel overwhelmed or bored. On the other hand, tutorials that do not sufficiently explain crucial steps risk frustrating users who might drop out of the activity. Zones of Proximal Flow (ZPF) tutorials are simple to create and provide a navigation structure of differentiated instruction allowing users to choose appropriate detail based on their self-assessed state of flow, from bored to anxious. Using Retention of Flow analysis, two Hour of Code game design tutorials were analyzed: a sophisticated online tutorial for the creation of Frogger, and a simple ZPF tutorial for the creation of Pac-Man. One hope was that the simple ZPF Pac-Man tutorial would not do much worse than the sophisticated Frogger tutorial, but surprisingly the ZPF Pac-Man tutorial significantly outperformed the Frogger tutorial in terms of student retention. The Pac-Man tutorial also displayed a high student motivation to continue programming past the end of differentiated instruction."
The zones of proximal flow: guiding students through a space of computational thinking skills and challenges,"Basawapatna, Ashok R. and Repenning, Alexander and Koh, Kyu Han and Nickerson, Hilarie",2013,"This paper presents a novel pedagogical framework, entitled the Zones of Proximal Flow, which integrates Vygotsky's Zone of Proximal Development theory with Csikszentmihalyi's ideas about Flow. Flow focuses on the individual-- an individual is in Flow when challenges are balanced with skills. The Zone of Proximal Development, on the other hand, brings in a social learning aspect focusing on a student's ability to learn concepts with external support. From our research experiences bringing game and simulation design into middle school classrooms, we attempt to provide students with appropriate challenges using a project-first based approach that aims to keep students in Flow. The project-first approach employs inquiry based scaffolding to guide students, with appropriate support by their teachers, through Vygotsky's Zone of Proximal Development, back in to Csikszentmihalyi's state of Flow for an ideal learning experience. We call this space the Zones of Proximal Flow. Data indicate that the Zones of Proximal Flow approach works, keeping classrooms engaged in the act of game design and enabling students to advance to more complex program creations."
Thesis plan: the effect of data science teaching for non-STEM students,"Barboza, Luiz",2022,"In recent years, the interest in Data Science has increased in both industry and academia. Historically, access to this discipline has been redirected to STEM professionals. However, the ubiquity of cloud computing and the simplicity of modern programming languages such as Python and R have enabled non-STEM students and professionals to leverage it especially to analyze data. Similarly, with what has been conveyed with computational thinking in terms of enabling non-STEM students with com technological competencies, this article aims to present a proposal for improving the teaching of data science specifically to non-stem students."
Thesis Plan: The Effect of Data Science Teaching for non-STEM students,"Barboza, Luiz",2022,Sin Valor
ThinkCarpet: Potentializing Computational Thinking with Educational Robotics in Middle School,"De Oliveira Costa Junior, Almir and Lima e Silva, João Paulo Felizardo and Rivera, José Anglada and Guedes, Elloá B.",2022,Sin Valor
Thinking about computational thinking,"Lu, James J. and Fletcher, George H.L.",2009,"Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency?We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content."
Thinking about Computational Thinking: Lessons from Education Research,"Grover, Shuchi",2019,"Computational thinking (CT) is a means to help learners engage in authentic disciplinary and problem-solving practices of computer science (CS). For CS classrooms, CT is considered ""thinking like a computer scientist"". CT is believed to be an important learning goal of introductory CS in addition to CS concepts and programming. Despite the growing attention on CT in K-12 CS education, there is lingering confusion on the what and how of CT, and CT's relationship to coding and CS. Education research on disciplinary thinking skills in science and mathematics education can provide guidance for teaching and learning of CT. For example, (a) The shift in emphasis on disciplinary thinking helps focus on deeper conceptual understanding rather than rote learning of knowledge and facts. Hence thinking like a scientist, or mathematician, historian or computer scientist, draws attention to authentic practices of those disciplines. (b) Thinking skills are best taught in context. Therefore, CT should be taught in CS classrooms or integrated into learning of other subjects rather than taught as a separate skill or subject. (c) Even if there is no transfer beyond the context in which they are taught, a focus on thinking skills helps in deeper conceptual learning; (d) Like critical or creative thinking, CT should be integrated into other subjects to enrich learning. Research on meaningful technology integration across subjects provides useful frameworks to inform CT integration efforts. This talk aims to productively move the discourse on CT toward concrete ideas for K-12 educators, researchers, and curricular designers."
Three +1 Perspectives on Computational Thinking,"Nicolajsen, Sebastian Mateos and Pischetola, Magda and Grabarczyk, Pawel and Brabrand, Claus",2021,"Computational Thinking (CT) is a highly contentious subject with many diverging meanings and definitions. This study presents a preliminary literature review of 71 peer-reviewed articles on CT. The papers indicate the existence of five main aspects that have historically been used in association with its definition: Algorithm, Abstraction, Modelling, Simulation, and Implementation. Based on this preliminary literature study, semi-structured interviews with eight CT scholars are conducted, in order to evaluate these aspects and to identify qualitatively different perspectives on CT, which integrate the mentioned aspects in different ways. From the interviews, three different perspectives emerged, focusing on: Reasoning, Simplification, and Automation. Furthermore, the goal of having computationally educated citizens is extrapolated from the interviews, indicating an additional perspective (+1) titled Empowerment, which appears as embedded within all the previous three perspectives. This paper proposes to put these three (+1) perspectives in dialogue, in an effort to support researchers and practitioners working with CT across different fields."
Three recommendations to engage At-Risk Students in Critical Reflection on Intelligent Technologies through Remote Learning,"Schaper, Marie-Monique and Ruiz Garcia, Aurelio",2023,The agenda of Computational Empowerment points towards the need for inclusive approaches for supporting all students in learning about technology and the development of digital literacy. This paper aims at exploring how to develop remote learning activities in technology education during a pandemic for at-risk students. We present a case study with 23 primary students (11-12 years) who we involved in online and offline learning activities about both how intelligent technologies work but also on the implications that these technologies bring to our society. Our findings showed potential challenges to engage at-risk students in the agenda of Computational Empowerment. We propose three recommendations and future directions to scaffold at-risk students’ learning about intelligent technologies in remote contexts: (1) support the development of agency through the engagement of contexts-for-action; (2) reduce the complexity of remote communication through creative and bodily engagement; (3) reflect upon forces that marginalize oneself in a digitized society.
Tinkercad and Codeblocks in a Summer Course: an Attempt to Explain Observed Engagement and Enthusiasm,"Díaz, Leonel Morales and Hernández, Carlos Morales and Ortiz, Alex Viau and Gaytán-Lugo, Laura Sanely",2019,Sin Valor
TIPP&amp;SEE: A Learning Strategy to Guide Students through Use - Modify Scratch Activities,"Salac, Jean and Thomas, Cathy and Butler, Chloe and Sanchez, Ashley and Franklin, Diana",2020,"With the rise of Computational Thinking (CT) instruction at the elementary level, it is imperative that elementary computing instruction support a variety of learners. A popular pedagogical approach for this age group is Use--&gt;Modify--&gt;Create, which introduces a concept through a more scaffolded, guided instruction before culminating in a more open-ended project for student engagement. Yet, there is little research on student learning during the Use--&gt;Modify step, nor strategies to promote learning in this step. This paper introduces TIPP&amp;SEE, a metacognitive learning strategy that further scaffolds student learning during this step. Results from an experimental study show statistically-significant performance gains from students using the TIPP&amp;SEE strategy on nearly all assessment questions of moderate and hard difficulty, suggesting its potential as an effective CS/CT learning strategy."
To GitHub or Not to GitHub?,"Johnson, Andrea E.",2021,"While preparing students for careers upon graduation, faculty often have to manage the priorities of bridging the gap between the level of student preparation and the expected level of preparedness. The prioritization of these tasks is influenced by discipline and industry specific guidelines and does not always align with the experience of students at Historically Black College and Universities (HBCU) and Minority Serving Institutions (MSI). The Association of Computing Machinery (ACM) 2013 Computer Science Curricula guidelines highlight version control as one of many core tools in the Social Issues and Professional Practice (SP) Knowledge Area students should experience in their upper-level software engineering courses. Research has demonstrated that at this level, students receive exposure to the tool but are not able to gain sufficient mastery of the tool. Other researchers have advocated for version control being introduced earlier in the computer science curricula. There is limited research that indicates that this particular tool improves the learning outcomes for students or significantly complements the other ACM Knowledge Areas. This presentation seeks to challenge the notion that the use of version control systems improves HBCU students' computational thinking (CT) skills and in turn prepares them for careers beyond graduation. It is important to note, there is no research that directly addresses the use of version control in predominately African American classrooms."
Tools to Support the Teaching-Learning of Computational Thinking in Brazil,"Pierim Pereira, Nícolas and dos Santos Silva, Kennedy and Odakura, Valguima",2018,Sin Valor
Toward More Generalizable CS and CT Instruments: Examining the Interaction of Country and Gender at the Middle Grades Level,"Rachmatullah, Arif and Vandenberg, Jessica and Wiebe, Eric",2022,"The lack of gender diversity in the computer science (CS) field and workforce is a well-documented challenge that many, but not all, countries face. Such a challenge may tie to socio-cultural issues that have impacted K-12 CS education, eventually creating a gender gap in CS performance and attitudes. The current study compared American and Indonesian middle school students' computational thinking (CT) skills and CS attitudes. Concurrently, this study also examined whether the items in the instruments we used exhibit country, gender, or prior CS experience measurement biases. A total of 592 American n = 242 and Indonesian n = 350 middle school students took a CT assessment and CS attitudes scale. Differential item functioning (DIF) was used to detect biased items, and a two-way ANOVA was utilized to examine the interaction effects of country and gender in the two constructs. The results showed some items were flagged as having country-specific DIF. The results also indicated that the American students had higher CT scores than Indonesian students. However, Indonesian students obtained higher CS attitudes scores compared to American students. Further results showed a significant gender difference in CS attitudes in the American samples; however, such a significant difference was not found in the Indonesian sample. These findings underscore the importance of a country's socio-cultural context in influencing gender diversity in the CS field."
Towards a Conceptual Model for a Smart Open learning environment based on Computational Thinking,"Fradi, Bènène and Cheniti-Belcadhi, Lilia",2022,Sin Valor
Towards a dialectic relationship between the implicit and explicit nature of computational thinking: a computer semiotics perspective,"Spangsberg, Thomas Hvid and Brynskov, Martin",2017,"Computational Thinking (CT) has gained in popularity in recent years, both within educational and political discourses. It is more than ever important to discuss the term itself in order to determine to which extent it is helpful in solving the challenges it has been suggested to address. Recently, Denning (2017) proposed that CT can be viewed as either ""traditional"" or ""new"". Traditional CT is a skillset resulting from engaging in traditional computing activities, e.g. programming, whereas new CT forefronts certain skills as desired in problem solving. By looking at CT through the perspective of computer semiotics, specifically the algorithmic sign, it is possible to dissolve the hard distinction of traditional vs. new. Instead, a perception of CT having both an implicit and an explicit nature emerges, allowing for a dialectic relationship between CT's integrated implicit and explicit nature."
Towards a feature-based didactic framework for generating individualized programming tasks for an e-learning environment,"Willert, Nico and Eriksson, Janik",2023,"Adaptive programming tasks are a promising approach for personalized learning that adapts to each student’s unique needs and abilities. However, developing effective adaptive programming tasks can be challenging, particularly when it comes to selecting the appropriate changes and adapting the difficulty of the exercise. In this paper, we propose a model for tracking student knowledge and adapting programming exercises to guide the selection and implementation of task features. Our model combines aspects of cognitive load, computational thinking and feature-oriented software product line engineering to identify core and optional features, so that they can be used in conjunction to adapt to the specific needs and abilities of each student. We provide an overview over the insights gained from an exploratory study with students. To support the creation process of feature-based programming tasks, we present an approach using a template-based generator."
Towards an Adaptable Curriculum-Driven Block-based Learning Environment,"Gardner-McCune, Christina and Jimenez, Yerika and Magda, David and Kulkarni, Abhishek and Chu, Sharon",2023,"In this poster, we present the design of a browser-based Arduino programming tool, CASMM, to support computational thinking and making in science classrooms. This tool allows for unique integration of research tools, lesson planning, and scaffolding for learning computational thinking concepts and block-based programming. This poster will describe four key features of a block-based LMS: (1) reduced-scoped programming toolbox, (2) block locking, (3) lesson plans and starter code templates; and (4) low-tech code replay for researchers. Through discussion of this tool, we aim to catalyze conversations about integrating new scaffolding techniques into block-based programming environments to better support classroom use and research."
Towards an Analysis of Computational Thinking,"Velázquez-Iturbied, J. Ángel",2018,Sin Valor
Towards an Online Service for Learning Computational Thinking Using Scientific Workflows,"Mohan, Aravind and Lu, Shiyong and Zhang, Ke",2015,Sin Valor
Towards Computing Education for Lifelong Learners: Exploring Computational Thinking Unplugged Approaches,"Agbo, Friday Joseph and Everetts, Connor",2024,"Older adults are underrepresented in computing education; broadening participation in computing has remained predominantly at K-12 and college settings. Yet, the population of older adults is increasing across many regions. Strategies for broadening participation in computing education for adult learners have been under-explored. This poster reports our effort towards broadening participation in computing for adult learners by exploring how computational thinking problem-oriented unplugged activities might help to gently introduce older adults into computing education. Being an exploratory study, data was collected using a mixed method approach. This report presents preliminary findings that suggest the potential benefits of computing education for older adults, including social collaboration and demonstration of computational thinking practices that could help them to remain active while aging. Moreover, future research direction in this regard is also discussed."
Towards Data-Driven Learning Paths to Develop Computational Thinking with Scratch,"Moreno-LeÓn, JesÚs and Robles, Gregorio and RomÁn-GonzÁlez, Marcos",2020,Sin Valor
Towards Incorporating Computational Thinking Skills Across the Curriculum,"DeMarco, Donna and Frye, Lisa and Schwesinger, Dylan",2024,Sin Valor
Towards playful learning and computational thinking — Developing the educational robot BRICKO,"Pedersen, Bjarke Kristian Maigaard Kjær and Andersen, Kamilla Egedal and J⊘rgensen, Anders and Köslich, Simon and Sherzai, Fardin and Nielsen, Jacob",2018,Sin Valor
Towards Student Engagement: Drones in Introductory CS Courses,"Albina, Adam and Huelsman, Michael",2024,"Student engagement has been shown to increase academic achievement. We apply learning engagement strategies in introductory computer science courses using unmanned aerial vehicles (UAVs), commonly referred to as drones. Using programming to control and fly drones reinforces the basic concepts of programming in an interesting and enjoyable way for first year programming students in a CS1 course. Additionally, we apply similar but less technical engagement strategies in a general education course with no prerequisites, and engage students with issues in modern technology through the medium of drones. Many in higher education see the introduction of complex topics as an important method of engaging students and therefore of improving learning outcomes. This leads many to offer courses in areas like robotics, AI, and game development. A potential problem with this approach is the level of knowledge required for these courses precludes their use as an engagement strategy in introductory coursework where they might attract the attention of a broader set of students. To this end we looked into adding drone technology to introductory and non-major CS courses. While preliminary, these results suggest a high level of student interest in the topic and promising engagement from both CS major and non-CS-major students."
Towards the Assessment of Basic Computational Thinking Skills Using Syntactic Analysis Techniques,"Gonzalez-Torres, Antonio and Ramirez-Trejos, Elliot and Sancho-Chavarria, Lilliana and Navas-Su, Jose and Garita, Cesar and Monge-Fallas, Jorge",2023,Sin Valor
Towards the Automatic Recognition of Computational Thinking for Adaptive Visual Language Learning,"Koh, Kyu Han and Basawapatna, Ashok and Bennett, Vicki and Repenning, Alexander",2010,Sin Valor
Towards the development of computational thinking in students through games,"Maraza Quispe, Benjamin and Alejandro Oviedo, Olga Melina and Choquehuanca Quispe, Walter and Quispe Flores, Lita Marianela and Caytuiro Silva, Nicolas Esleyder and Choquehuayta Palomino, Sim\'{o}n Angel",2023,"The research aims to analyze the impact of games on the development of computational thinking in students, specifically the digital card game called Moon (a card game where the computer of the Eagle lunar module is controlled during the first moon landing). The methodology applied is experimental where a series of learning sessions applying the virtual game Moon is applied to a sample of 25 students selected through a simple random sampling of a population of 100 students, we proceed to evaluate the students through a pre-test and post-test. The results show that the application of the virtual game Moon significantly influences the increase of Computational Thinking in students, which was demonstrated by applying the evaluation and observing how they overcame the different challenges proposed through the different difficulties of the virtual game Moon, this developed in the competence of ""Design and build technological solutions to solve problems in their environment""."
Towards the Unification of Computational Thinking and EUDability: Two Cases from Healthcare,"Barricelli, Barbara Rita and Fogli, Daniela and Gargioni, Luigi and Locoro, Angela and Valtolina, Stefano",2024,"This paper presents a study about the mapping of the EUDability of End-User Development (EUD) tools with the Computational Thinking (CT) skills of users. This mapping provides an approach to evaluate the suitability of a EUD environment in supporting people performing their daily work while managing and exploiting EUD tools. EUDability is a construct encompassing different dimensions that need to be assessed through a careful scrutiny by human-computer interaction experts, while CT skills should mirror those dimensions from the point of view of assessing the level of ability of users in managing problems with a computational thinking attitude. Moving from the healthcare domain, we present two cases: a tool for geriatric professionals supporting them in the preparation of cognitive exercises for elderly patients; and a tool for pharmacists, which empowers them to create robot programs related to the preparation of personalized medications. These cases have been exploited to show how to unify the EUDability assessment with the CT skills assessment. In particular, the application of the EUDability evaluation method for each tool, as well as the administration of the Computational Thinking Scale to domain experts are shown. The results of the two assessments are reported and discussed, together with the limitations of the present study. The results show the goodness of fit of the proposed EUD tools in the healthcare domain."
Training and Practice of Computational Thinking for New Engineering Subjects,"Wang, Xuemei and Zheng, Jun and Zhao, Jiongshan and Lin, Shengyou",2023,Sin Valor
Training for computational thinking capability on programming language teaching,"Yinnan, Zhang and Chaosheng, Luo",2012,Sin Valor
Training Methods of Computational Thinking for Medical Students in Big Data Age,"Si, Jiarui and Feng, Huan and Niu, Zikun and Bian, Yizhou and Fu, Yu and Guo, Hong and Su, Zhenxing and Deng, Weimin and Li, Xiaoxia",2021,Sin Valor
Training Teachers to Integrate Computational Thinking into K-12 Teaching,"Hodhod, Rania and Khan, Shamim and Kurt-Peker, Yesem and Ray, Lydia",2016,"Computational thinking (CT), which encompasses strategies for problem analysis and solution design, is highly applicable in all STEM disciplines, including computer science, for learning concepts as well as solving problems. Yet, the exposure of K-12 students to CT in many schools is practically non-existent. For students to acquire this important skill, teachers require in-depth knowledge of the problem solving strategies that define CT, and strategies for integrating CT into their lesson plans. The proposed special session will be both a tutorial on CT and an interactive session for sharing the experience and results from a CT workshop held at Columbus State University for middle and high school STEM subject teachers. This workshop, offered as a part of the ACT4STEM (Applying Computational Thinking for STEM Disciplines) project, took place in the summer of 2015. It brought together teachers from the metropolitan Columbus area in Georgia with priority given to teachers from high-need schools (as determined by the GA Department of Education [1]). The workshop introduced the participants to CT concepts and demonstrated how CT strategies of pattern recognition, generalization, problem decomposition and algorithmic thinking can be used to improve student learning of STEM concepts. The proposed special session will present sample CT modules developed for the ACT4STEM workshop in the form of a tutorial and projects and lesson plans designed by participants during the workshop. It will include interactive, hands-on activities and discussions in addition to results from the teachers' actual experiences on applying these lesson plans in their classes. This special session will benefit K12 teachers of STEM subjects interested in improving their students' comprehension of discipline related concepts and their application. Moreover, computer science faculty interested in helping K-12 teachers by organizing training sessions will gain valuable insights from the first-hand accounts of the presenters of their own experience with such an effort."
Transformative agency – the next step towards children's computational empowerment,"Iivari, Netta and Iversen, Ole Sejer and Smith, Rachel Charlotte and Schaper, Marie-Monique and Vent\""{a}-Olkkonen, Leena and Hartikainen, Heidi and Sharma, Sumita and Kinnula, Marianne and Lehto, Essi and Holappa, Jenni and Molin-Juustila, Tonja",2024,"We suggest transformative agency is brought to the forefront of Participatory Design (PD) in Child-Computer Interaction (CCI) research to scaffold children's active engagement in matters related to digital technology and its effects on society. Based on Cultural-Historical Activity Theory we define children's transformative agency as their ability to actively change their own matters, their shared matters, or even societal matters for the better and more just society. We report on a framework for analyzing PD research with children and demonstrate how PD can support transformative agency of children through vignettes from two PD projects with children. Based on the vignettes, we provide a set of additional PD aims to consider when integrating the scaffolding of transformative agency explicitly in PD with children. A focus on children's transformative agency will contribute significantly to the maturing field of Computational Empowerment in CCI as an extension of the current PD work with children."
Transforming Grading Practices in the Computing Education Community,"Decker, Adrienne",2025,"It is often the case that computer science classrooms use traditional grading practices where points are allocated to assignments, mistakes result in point deductions, and assignment scores are combined using some form of weighted averaging to determine grades. Unfortunately, traditional grading practices have been shown to reduce achievement, discourage students, and suppress effort to such an extent that some common elements of traditional grading practices have been termed toxic. Using grades to reward or punish student behavior does not encourage learning and instead increases anxiety and stress. These toxic elements are present throughout computing education and computer science classrooms in the form of late penalties, lack of credit for code that doesn't compile or pass certain unit tests, among others. These types of metrics, that evaluate behavior are often influenced by implicit bias, factors outside of the classrooms (e.g., part-time employment), and family life situations (e.g., students who are caregivers). Often, students in these situations are disproportionately from low-socioeconomic backgrounds and predominantly students of color. In this talk, I will present a case for adoption of equitable grading practices in computer science classrooms and issue a call for additional support in classroom and teaching technologies as well as support from administrations both at the department and university level. I will explain the community of practice approach we are taking to both encourage adoption and to study the impact of these practices on students."
"Trastea.club, an initiative to develop computational thinking among young students","Guenaga, Mariluz and Menchaca, Iratxe and Garaizar, Pablo and Egu\'{\i}luz, Andoni",2017,"Trastea.club (http://www.trastea.club/) is an initiative of the University of Deusto (Spain) aimed to develop STEM-related skills among young students (STEM stands for Science, Technology, Engineering, and Science). We chose the name ""trastea"" because it means to tinker in Spanish, a verb that fits with the hands-on approach of this initiative. Since January 2014, we have organized more than 180 workshops attended by more than 3.200 students from 35 different schools. With the aim of supporting the methodological and technical changes needed to integrate these new skills in the classroom, 216 teachers also benefited from our training courses, consultancy and support to adapt Trastea.club's activities to their curricula. Initiatives such as Trastea.club aim to support the constant adaptation process faced by schools and teachers due to the rapidly changing technologies and the evolution of students' profiles. The main goal of this initiative is to help schools in their constant adaptation processes towards the new digital literacy1."
Trying to Develop and Assess Computational Thinking in Computer Science Unplugged Activities with Gamification,"Triantafyllou, Serafeim A. and Sapounidis, Theodosios and Oikonomou, Andreas",2024,Sin Valor
TunePad: Computational Thinking Through Sound Composition,"Gorson, Jamie and Patel, Nikita and Beheshti, Elham and Magerko, Brian and Horn, Michael",2017,"Computational thinking skills will be important for the next generation of students. However, there is a disparity in the populations joining the field. Integrating computational thinking into artistic fields has shown to increase participation in computer science. In this paper, we present our initial design prototype for TunePad, a sound composition tablet application controlled by a block-based programming environment. TunePad is designed to introduce learners to computational thinking and to prepare them for text-based coding environments. From our preliminary testing, with children ages 7-14, we observed that our design actively engages learners and communicates how the programming blocks control the sounds being played. This testing is a prelude to more formal studies as we continue to improve the design and interface of TunePad. With this work, we intend to engage students in computational thinking who may not have otherwise been exposed, giving the opportunity to more people to enter the computer science field."
TuneScope: Engaging Novices to Computational Thinking through Music,"Nguyen, N. Rich and Padhye, Harsh and Stein, Eric and Bull, Glen",2022,"To accelerate the adoption of computational thinking (CT), we have developed TuneScope, an online platform for introducing novices to programming in the context of music. TuneScope combines a sound analysis &amp; synthesis tool with Snap!, a computing language developed at the University of California, Berkeley. This demo explores CT concepts such as decomposition, patterns, abstraction, and algorithms in TuneScope while also exploring the creation of four cascading musical components from (1) sequences of notes, (2) musical chords, (3) sampled sounds, and (4) synthesized sounds. The challenge is to design activities that include authentic music learning as well as genuine computational thinking. In this demo, we show concepts around sequence (the order in which musical notes appear in time; and the order of statements in a computer program) and repetition (includes repeats as well as the structure of melodies; and computing loops and recursion). The instructional activities in this demo have been piloted three times in an associated course at the University of Virginia. Data collected from the course suggest a positive effect on both the understanding of CT concepts and the comprehension of music. More detail on TuneScope can be found at https://maketolearn.org/tunescope/."
Two Birds: Teaching Coding and Math in Primary Schools and Beyond (Abstract Only),"Winter, Victor and Love, Betty",2017,"Bricklayer is a freely-available online educational ecosystem designed in accordance with a ""low-threshold infinite-ceiling"" philosophy. Its purpose is to teach coding to people of all ages and coding backgrounds. A significant portion of the Bricklayer ecosystem has been developed specifically to help novices, especially primary school children, learn how to code. When executed, Bricklayer programs can produce LEGO® artifacts, Minecraft artifacts, and even artifacts suitable for 3D printing. Bricklayer resides in a domain in which there is a strong connection between math, art, and computer science. This workshop is suitable for (1) university instructors and faculty who are interested in freshmen-level programming, (2) CS educators who work with and/or teach K-12 teachers in order to deliver coding-based curricula, (2) K-12 teachers and facilitators interested in exploring options for how they might teach coding - either directly as part of the in-school curriculum, or indirectly as part of an after school program.No background in coding is assumed. The aim of the workshop is to provide participants with a general understanding of what Bricklayer coding entails, how it relates to math, as well as providing a framework and road map for learning how to code in Bricklayer. An example of a 10 week (1 hour/week) primary school curriculum will be provided."
T{h}inker for Engaging Learning Experience in Computational Thinking and Programming,"Narayanan, V. Anantha and Shyamala, C. K. and Velayutham, C. Shunmuga",2019,Sin Valor
T{h}inker: A Physical Computing Tool Kit for Computational Thinking,"Narayanan, V. Anantha and Shyamala, C. K. and Shunmuga Velayutham, C.",2018,Sin Valor
Ubiquitous Computational Thinking,"Henderson, Peter B.",2009,Sin Valor
Ubiquity symposium: Computation and Computational Thinking,"Aho, Alfred V.",2011,In this ninth piece to the Ubiquity symposium discussing What is computation? Alfred V. Aho shares his views about the importance of computational thinking in answering the question.  --Editor
Understanding barriers to school-wide computational thinking integration at the elementary grades: lessons from three schools,"Israel, Maya and Liu, Ruohan and Yan, Wei and Sherwood, Heather and Martin, Wendy and Fancsali, Cheri and Rivera-Cash, Edgar and Adair, Alexandra",2022,"This mixed methods study examined barriers faced by three elementary schools in their approaches to integrating computational thinking (CT) into classroom instruction. Because CT is a relatively new instructional area, limited research guides CT integration, especially in bringing CT to academically, linguistically, and culturally diverse instruction. This study, therefore, examined challenges faced by teachers in bringing CT into their instructional practice. Data included interviews with 11 teachers and surveys of 46 teachers in a large, urban school district. The three schools in the district were part of a CS for All initiative in their school district. Data revealed common challenges: a) Limited CT teaching expertise; b) Limited time for CT integration; c) Lack of CT-specific assessment knowledge and tools; d) Limited pedagogical understanding for meeting students' diverse instructional needs; and e) Low teacher-buy-in for teaching CT. Our data also showed differences across schools in access to classroom implementation infrastructure such as technology and curricular resources, competing administrative priorities, and types of professional development opportunities. This study points to practical implications for supporting integration of CT in elementary contexts. Most notably, it is critical to proactively address these barriers in preservice and in-service teacher preparation as well as in school-wide infrastructure in order to have a sustained CT integration effort."
Understanding coding activities for teens: a focus on school teachers' perspectives,"Quayyum, Farzana and Bueie, Jonas and Vidal, Juan Carlos Torrado and Jaccheri, Letizia",2020,"Over the last few years, researchers, teachers, parents, volunteers, and even IT companies have joined efforts to develop coding activities for children in K-12 education. These efforts include technological tools and programming environments as well as activities descriptions. Kodel\o{}ypa is a coding activity offered by NTNU, which focuses on engaging teens in creative programming. In this paper, we report about the design and implementation of an empirical investigation with 13 teachers who attended Kodel\o{}ypa as associated school teachers of the pupils from their respective schools. In this study, we have addressed the following research question: What are the teachers' understandings of coding activities for teens outside the schools? The goal of this study was to identify various factors that will help us to acquire knowledge on this important kind of stakeholders, and improve the design and implementation of Kodel\o{}ypa and other similar efforts. We have conducted a thematic analysis with the data and we expect the results of this study will help teachers and researchers to design and organize computer science learning activities more efficiently and collaboratively."
Understanding Collaborative Computational Thinking,"Chowdhury, Bushra",2015,"In this paper I discuss my doctoral research which aims to better understand collaborative computational thinking (CT). In order to be successful in the 21st century, skills such CT (understanding and applying computational concepts) are indispensable for people across all ages and disciplines. One can learn computational concepts by taking a traditional course offered in a school or by self-guided learning through an online platform. Whatever the form of learning, computational concepts can be difficult to fully comprehend for novices. Collaborative learning has been considered effective in reducing learner's anxiety and in helping struggling learners overcome common learning difficulties. The proposed dissertation study aims to investigate how collaboration impacts learning of CT across both classroom setting and in an online learning community. This paper briefly describes the motivation and outline of my proposed dissertation study, the overarching research questions, the data currently collected, and my data analysis methodologies."
Understanding Students' Computational Thinking through Cognitive Interviews: A Learning Trajectory-based Analysis,"Luo, Feiya and Israel, Maya and Liu, Ruohan and Yan, Wei and Gane, Brian and Hampton, John",2020,"For K-8 computer science (CS) education to continue to expand, it is essential that we understand how students develop and demonstrate computational thinking (CT). One approach to gaining this insight is by having students articulate their understanding of CT through cognitive interviews. This study presents findings of a cognitive interview study with 13 fourth-grade students (who had previously engaged in integrated CT and mathematics instruction) working on CT assessment items. The items assessed four CT concepts: sequence, repetition, conditionals, and decomposition. This study analyzed studentstextquotesingle articulated understanding of the four CT concepts and the correspondence between that understanding and hypothesized learning trajectories (LTs). We found that 1) all students articulated an understanding of sequence that matched the intermediate level of the Sequence LT; 2) a majority of studentstextquotesingle responses demonstrated the level of understanding that the repetition and decomposition items were designed to solicit (8 of 9 responses were correct for repetition and 4 of 6 were correct for decomposition); and 3) less than half of studentstextquotesingle responses articulated an understanding of conditionals that was intended by the items (4 of 9 responses were correct). The results also suggested questioning the directional relationships of two statements in the existing Conditionals LT. For example, unlike the LT, this study revealed that students could understand ""A conditional connects a condition to an outcome'' before ""A condition is something that can be true or false.''"
Understanding the Effects of Integrating Music Programming and Web Development in a Summer Camp for High School Students,"Manesh, Daniel and Jelson, Andrew and Altland, Emily and Freeman, Jason and Lee, Sang Won",2025,"This poster presents the development and implementation of a 10-day remix-based summer camp curriculum designed to introduce high school students, particularly a multinational cohort of young women, to programming through creative coding. The curriculum integrates music composition using EarSketch and web development with HTML and CSS. The camp aims to inspire participants to gain self-efficacy in programming and motivate them to explore STEM/computing careers. Preliminary results from surveys and interviews indicate increased confidence in programming skills. This ongoing research explores the impact of remixing as a gateway for transitioning into more general-purpose computing domains such as web development."
Understanding the Link between Computer Science Instruction and Reading &amp; Math Performance,"Salac, Jean and Thomas, Cathy and Butler, Chloe and Franklin, Diana",2021,"Worldwide, national initiatives have led to many school districts implementing computing curricula at the primary level. At that age, students are learning the foundational skills of reading and math. It is important to understand how computing can influence the development of these skills. While some argue that learning computing sharpens problem-solving skills that are applicable to other subjects, evidence supporting this belief is thin.In a quasi-experimental study of fourth-grade (ages 9-10) students, we compared state reading and math test scores of students receiving computing instruction with students who did not. Our findings demonstrated that a more open-ended, less scaffolded form of computing instruction was linked to performance gains in math, but not in reading (F(2, 232)=11.08, p&lt; .01, ηp2=.0625). When looking at students who face academic challenges that can impact reading and math, the same trend applied to students with economic disadvantages and students with limited English proficiency, but not for students with disabilities. These results suggest that moderately scaffolded computing instruction supports the development of skills applicable to math, a step towards better understanding the relationship between learning opportunities in computing and outcomes in other subjects."
Understanding the Source of Confusion with Computational Thinking: A Systematic Review of Definitions,"Xu, Fan and Zhang, Shuhan",2021,Sin Valor
Unlocking Sustainable Development Goals through Computational Thinking: A Search to Inform Computers Education from Citizen Science Dataset,"Ram\'{\i}rez-Montoya, Mar\'{\i}a Soledad and Buenestado-Fern\'{a}ndez, Mariana and Ibarra-Vazquez, Gerardo",2023,"Linking sustainable development with computational thinking promotes high-impact problem solving, integrating fundamental concepts of computer programming. This study analyzed the relationship between computational thinking and the Sustainable Development Goals (SDGs) using text mining and data visualization techniques. A text mining method was employed to analyze computational thinking and its sub-competencies (decomposition, pattern recognition, abstraction and algorithm) appearances in the OSDG Community dataset, consisting of 32,120 text fragments labeled with the associated SDG. Results revealed that computational thinking and its subcompetencies: decomposition, pattern recognition, abstraction, and algorithm, were frequently linked to SDGs 4 (quality education), SDG 5 (gender equality), SDG 6 (clean water and sanitation), and SDG 11 (sustainable cities and communities). The findings demonstrate the potential of computational thinking to provide innovative solutions to global problems and support the achievement of the SDGs. The study can be of value to stakeholders in the social, governmental, academic and business sectors interested in sustainable development and educational innovation in the application of computational thinking."
Unplugged Computational Thinking Activities Framework Development for Novice Programmer,"Sim, Tze Ying and Teow, Matthew and Lau, Sian Lun",2021,Sin Valor
Unplugged Robotics to Increase K-12 Students’ Engineering Interest and Attitudes,"Miller, Blanca and Kirn, Adam and Anderson, Mercedes and Major, Justin C. and Feil-Seifer, David and Jurkiewicz, Melissa",2018,Sin Valor
Usability Evaluation of an Online Inquiry-Based Learning Platform for Computational Thinking (CT-ONLINQ),"Jha, Nitesh Kumar and Bhowmik, Plaban Kumar and Bhagat, Kaushal Kumar",2023,Sin Valor
Usability evaluation of block programming tools in IoT contexts for initial engineering courses,"Sobreira, Péricles de Lima and Abijaude, Jauberth Weyll and Viana, Hellan Dellamycow Gomes and Santiago, Levy Marlon Souza and Guemhioui, Karim El and Wahab, Omar Abdul and Greve, Fabíola",2020,Sin Valor
Use of Augmented Reality for Computational Thinking Stimulation through Virtual,"Esteves, Adson Marques da Silva and Santana, André Luiz Maciel and Lyra, Rodrigo",2019,Sin Valor
Use of Computational Thinking Skills when solving Bebras Tasks: a Think-aloud Study,"de Jong, Imke and Sichterman, Bo and Jeuring, Johan",2024,"In this study we examine the use of CT skills when solving Bebras tasks. Bebras tasks are logical puzzles created to introduce, practice and sometimes assess Computational Thinking (CT) skills. We use the think-aloud method to investigate the problem-solving process of participants with advanced CT skills. The contribution of this study is three-fold. First, the study examines how the use of CT skills manifests itself in the problem-solving process. By examining the thought process of participants, our study provides a detailed operationalization of CT skill definitions that could be used in subsequent studies to investigate the use of the skills. Secondly, the study provides a validation of the classification of a selection of Bebras tasks. Our results show that the skills assigned to these Bebras are indeed the skills most often used by the problem solvers while solving the tasks. Finally, even though the skills are used, the results also show that this does not always translate into answering these puzzles correctly. Based on the results we therefore conclude that, without looking at the problem-solving process, the tasks may not be suitable for the assessment of CT skills."
"Use, Modify, Create: Comparing Computational Thinking Lesson Progressions for STEM Classes","Lytle, Nicholas and Catet\'{e}, Veronica and Boulden, Danielle and Dong, Yihuan and Houchins, Jennifer and Milliken, Alexandra and Isvik, Amy and Bounajim, Dolly and Wiebe, Eric and Barnes, Tiffany",2019,"Computational Thinking (CT) is being infused into curricula in a variety of core K-12 STEM courses. As these topics are being introduced to students without prior programming experience and are potentially taught by instructors unfamiliar with programming and CT, appropriate lesson design might help support both students and teachers. ""Use-Modify-Create"" (UMC), a CT lesson progression, has students ease into CT topics by first ""Using"" a given artifact, ""Modifying"" an existing one, and then eventually ""Creating"" new ones. While studies have presented lessons adopting and adapting this progression and advocating for its use, few have focused on evaluating UMC's pedagogical effectiveness and claims. We present a comparison study between two CT lesson progressions for middle school science classes. Students participated in a 4-day activity focused on developing an agent-based simulation in a block-based programming environment. While some classrooms had students develop code on days 2-4, others used a scaffolded lesson plan modeled after the UMC framework. Through analyzing student's exit tickets, classroom observations, and teacher interviews, we illustrate differences in perception of assignment difficulty from both the students and teachers, as well as student perception of artifact ""ownership"" between conditions."
User interface design analysis pertaining to computational thinking framework,"Semiawan, Transmissia",2019,"Computational Thinking (CT) has been considered as a problem solving approach that involving fundamental thinking processes which include decomposition, pattern recognition, abstraction, and algorithms. To see that CT would be of useful to solve complex problems of user interface design (UID), this study aims to see the extent the CT framework would have an effect on the achievement of designs thinking process. The study was carried out based on the evaluation of user interface design projects accomplished by undergraduate students involving 3 cohorts composed of 21 groups in total. The results indicate that disregarding CT process in design thinking leads to inefficiency interface design."
Using 3D Virtual and Physical Robot Alone or Together-Which Works Better for Learning engagement and Computational Thinking,"Gao, Hanrui and Zhang, Yi and Wang, Kang and Yu, Fan and Li, Tianyu",2024,Sin Valor
Using an Intelligent Robot to Introduce Elementary School Students to Computational Thinking and Artificial Intelligence,"Touretzky, David S.",2023,"In 2018 I received a SIGCSE Special Projects award to fund creation of computational thinking and artificial intelligence curriculum materials for students in grades 3-5 using my Calypso for Cozmo robot programming framework (https://Calypso.software) and the Cozmo robot from Anki. The work was done in collaboration with the New Brighton Area School District in New Brighton, Pennsylvania. The project succeeded, then failed, and may now be reborn again."
Using App inventor & history as a gateway to engage African American students in computer science,"Jimenez, Yerika and Gardner-McCune, Christina",2015,Sin Valor
Using children's literature to introduce computing principles and concepts in primary schools: work in progress,"Twigg, Sarah and Blair, Lynne and Winter, Emily",2019,"With the recent paradigm shift in the teaching of computing and computational thinking skills, schools are engaging pupils as young as five in learning principles and concepts of programming. However, there are still many challenges within primary computing education, including the cost and availability of resources, and teachers' familiarity and/or confidence with these resources. In this paper, we offer an approach that develops a creative story-based pedagogy to address constraints such as these and facilitate the development of lesson plans supporting scaffolding and differentiation. Children's literature is used to introduce concepts such as pattern matching, abstraction and algorithms, along with the three main programming constructs of sequencing, repetition and selection. Through four stages of Read-Act-Model-Program (RAMP), we present a set of unplugged and Scratch-based activities and reflect on the potential impact of this educational opportunity to inspire an early interest in computing."
Using computacional thinking as a strategy for the development of reasoning and logic in students about the theme of ecology during the pandemic,"Slomp, Edésio Marcos and Schuhmacher, Elcio and Schuhmacher, Vera Rejane Niedsberg",2021,Sin Valor
Using Computational Thinking Patterns to Scaffold Program Design in Introductory Programming Course,"Chang, Chih-Kai",2016,Sin Valor
Using Computational Thinking to Demystify Computer Science for Elementary Teachers,"Levitt, Diane and Garfus-Knowles, Dylana and Khuu, Wyman and Siddappa, Sara",2024,"The computer science education research community has thought deeply about how students learn computational thinking (CT) as it relates to other domains of computer science (CS; e.g. programming) and core content areas (STEM, humanities), but less work has examined the role of CT in pathways to computer science for K-5 teachers. This panel examines the experiences of practitioners - educators, administrators, and curriculum designers--who have both experienced and supported others in incorporating CT in elementary school settings as a pathway to or component of computer science education. All panelists have worked with teachers not previously trained to teach CS and have encountered the many opportunities and difficulties of bringing CS to in-service teachers. They will reflect on the multiple ways educators grapple with CT: as an entry point to computer science, as a way to enrich core disciplines, and as a way to support equitable practice - for example, several of the panelists have experiences leveraging CT and other domains of CS to support the expression and development of emergent bilingual students. The panel will explore ways in which CT and its associated language and strategies for problem solving may provide a particularly helpful onramp to CS generally, including integration with other disciplines and with language about academic skills more generally."
Using Computational Thinking to Learn Creative Writing and Performance Arts: Summer Experiences of Story Creation Projects,"Torres Castillo, Ruth and Valdez, Tomas and Pontelli, Enrico and Gonzalez, Horacio and Nevarez, Erick and Cota, Raena",2024,"In our modern society, technology has profoundly reshaped various aspects of our lives, influencing the way we work, communicate, and interact. This raises a fundamental question: Is the current K-12 education system adequately preparing students for success in this technology-driven era, where innovation and problem-solving skills are essential? A recent study investigated this inquiry. The goal was to integrate Computational Thinking (CT) into the domains of Creative Writing and Creative Media and measure its impacts. This poster describes the design and refinement of summer camp experiences in which predominantly Hispanic female students participated in hands-on CT-based learning to create their own creative stories and films. Educational outcomes were evident through increased student engagement, enhanced collaboration, and improved problem-solving skills, underscoring the intervention's advantages. Furthermore, the researchers gained transforming insights, recognizing the versatility of CT across domains. Camp participants experienced a shift in perspective, with a greater interest in vocations and domains connected to computing. We share lessons learned from these summer camps in the hopes that they will inform other researchers and practitioners who are interested in designing and deploying similar experiences. In summary, the study outlines a trajectory where students and educators skillfully navigate the complexities of contemporary paradigms"
Using Computational Thinking to Transform Elementary Mathematics Instruction,"Rich, Kathryn M.",2018,Computer science (CS) education advocates argue that integration of computational thinking (CT) into instruction in other subjects has promise for providing a strong foundation in computer science ideas for elementary school students. Less attention has been given to the role that CT may play in improving learning in subjects other than computer science. This document summarizes my plans to study how teaching elementary level mathematics through computational thinking practices can improve mathematics learning.
Using Cultural Responsiveness to Elicit Computational Thinking in Maker Environments: (Abstract Only),"Hadad, Roxana and Hausman Jacobson, C. Meghan and Thomas, Kate and Sol\'{o}rzano, Germania and Kachovska, Mila and Yin, Yue",2018,"Work in culturally responsive pedagogy and culturally responsive computing (CRC)(Scott, et al., 2014) holds promise for how to include underrepresented students into making communities as they develop their computational thinking (CT) skills. Cultural responsiveness involves instructors using what they know about students' individual identities to develop learning opportunities; having high expectations; and understanding students' sociopolitical contexts (Ladson-Billings, 1995). By integrating these approaches, students encounter a makerspace without pre-determined cultural norms that encourages questioning assumptions that limit the development of inclusive technology. This poster explores preliminary results from a mixed methods multiple case study. Sixteen high school students participated in a two-week summer making program that focused on CT and physics skills. Students shared elements of their identities, brought in artifacts for ""show and tell"", collected data on how they spend their time, and categorized assets in their communities to then incorporate into their own projects. Researchers analyzed classroom observations, videos, interviews, and student notebooks, as well as students' pre-post tests and attitudinal surveys. Findings reflect the importance of valuing student identity, building community, and highlighting how CT and physics affect students' lives. More information: https://actmaproject.wordpress.com/ Keywords: computational thinking, cultural responsiveness, makerspaces. DOI: https://doi.org/10.1145/3159450.3162291"
Using cultural viewpoint metaphors in the analysis of computational thinking teaching,"de Oliveira, Gabriela A. Araujo and Assun\c{c}\~{a}o, Oto Braz and Prates, Raquel Oliveira",2019,"There are several experience reports on teaching computational thinking (CT) to children in a playful way. However, we did not find in the literature any studies presenting a well defined proposal of types of tools or methods that could be adopted to teach different concepts of computational thinking. Therefore, we investigate whether Cultural Viewpoint Metaphors (CVM) could be a good way to analyze, classify, and indicate which CT tools and teaching approaches existing studies are addressing. We first analyze existing research on teaching computational thinking to middle school students in Brazil. Then, the tools and methods used in those works in light of CVM. Our findings show positive results regarding the possibility of using CVM as a foundation to classify tools and methods for teaching CT."
Using Educational Robotics to Support Active Learning Experiences and Foster Computational Thinking Skills among Non-STEM University Students,"Macko, Vladimir and Felber, Pascal and Bergram, Kristoffer and Holzer, Adrian",2023,Sin Valor
Using Educational Videos on The Internet as A Form of E-Learning to Support the Development of Computational Thinking,"Dragon, Tom\'{a}\v{s}",2018,"This paper deals with using internet educational videos as a suitable form of e-learning to support the development of computational thinking. In the context of continuous technology development, the demand for IT specialists capable of solving a variety of problems using information technology is increasing. This should make everyday life easier and shorten the time needed to solve these problems. Before someone can become an IT specialist, or at least begin to think as one, they must start building their knowledge. One of the best ways to start can be their own inner motivation or an impulse from their school environment. The goal of this paper is to select appropriate channels for sharing YouTube videos on the server and to describe how they can participate in supporting the development of computational thinking. This article introduces freely available YouTube channels that can be used as a form of e-learning as well as an inspiration for computer science."
Using Interface Design to Develop Computational Thinking Skills,"Calderon, Ana C. and Crick, Tom",2015,"Human-computer interaction is a long established sub-discipline of computer science. While there has been significant focus on the importance of developing computational thinking skills, there appears to be a gap in the literature in using HCI principles, analysis and design as a framework for doing so. We present the first step to identify methodologies for systematically introducing HCI to pupils from an early age, presenting a commentary for their prospective future application, comparing to similar approach as other foundational aspects of computer science in developing computational thinking skills that have been considered for the past decade."
Using Jigsaw Pedagogy to Promote Learning in Unplugged Information Technology Class: An Experimental Study,"Pu, Yilong and Zhang, Libing and Luo, Heng",2024,Sin Valor
Using Microworlds to Introduce Programming to Novices,"Papadopoulos, Yannis and Tegos, Stergios",2012,Sin Valor
Using Open Technology to Bring Computational Thinking Activities to the Outdoors,"Adeyemi, Opey and Hui, Bowen",2023,Sin Valor
Using Peer Tutoring to Bolster Retention Rates and Student Performance in CS1 Courses,"Jayaraman, Sharanya and Kolarkar, Ameya",2025,"Active Learning approaches have found success in CS1 and CS2 courses, consolidating instructional time on the practical, problem-solving aspects of programming. With the increasing availability of generative Artificial Intelligence Assistants, there is a renewed push to focus on higher-order skills beyond syntax and solving programming problems by matching sample outputs.This poster examines the impact of conceptual explanation-based exercises in introductory programming courses through the implementation of a scaffolded semi-flipped classroom. This method is currently in its third semester as a part of an ongoing, iterative, semi-experimental approach to support student resilience in entrance-level courses. This approach aimed to enhance student engagement, retention, and performance by integrating weekly practice sessions and ""group-tutoring"" sessions facilitated by peer learning assistants. In these sessions, students were encouraged to articulate their problem-solving strategies and the reasoning behind their solutions, fostering a deeper understanding of programming language paradigms and problem-solving techniques.The findings indicate that this method significantly increased classroom engagement, as students became more active participants in their learning journey. Retention rates improved as students became more confident in understanding and applying programming concepts. Overall, student performance saw a notable rise, with students demonstrating a better grasp of programming paradigms and problem-solving approaches beyond rote memorization and matching sample outputs."
Using Pirate Plunder to Develop Children's Abstraction Skills in Scratch,"Rose, Simon P. and Habgood, M.P. Jacob and Jay, Tim",2019,"Scratch users often struggle to detect and correct 'code smells' (bad programming practices) such as duplicated blocks and large scripts, which can make programs difficult to understand and debug. These 'smells' can be caused by a lack of abstraction, a skill that plays a key role in computer science and computational thinking. We created Pirate Plunder, a novel educational block-based programming game, that aims to teach children to reduce smells by reusing code in Scratch. This work describes an experimental study designed to measure the efficacy of Pirate Plunder with children aged 10 and 11. The findings were that children who played the game were then able to use custom blocks (procedures) to reuse code in Scratch, compared to non-programming and programming control groups."
Using Problem-Driven Learning to Teach Computational Thinking in CS1,"Chang, Rocky K. C.",2024,"This experience report describes the author's use of the classic man-cabbage-goat-wolf (MCGW) riddle to teach the main elements of computational thinking in CS1. Instead of teaching each computational thinking element individually, in the process of solving the MCGW problem the students are able to understand the process of abstracting a problem to a representation that can be understood by computer, finding a suitable algorithm to solve the abstracted problem, and decomposing the problem into different logical and more manageable parts. The survey responses from two recent classes clearly validate the effectiveness of this problem-driven approach even for a large class of very diverse backgrounds."
Using robot to motivate computational thinking in high school students,"Enríquez, C. and Aguilar, O. and Domínguez, F.",2016,Sin Valor
Using Rubrics for Assessment and Peer Assessment of Artful Robotics Projects with the Focus on Computational Thinking,"Kubincová, Zuzana and Miková, Karolína and Budinská, Lucia",2024,Sin Valor
Using scaffolded examples to teach computational thinking concepts,"Webb, Heidi and Rosson, Mary Beth",2013,"In this paper we describe a set of computing activities that were used in an outreach enrichment program for middle school girls. The computing activities used a combination of scaffolded exam-ples and minimalist workbooks to introduce and support interaction with computational thinking (CT) concepts, including problem solving, abstraction and basic computational vocabulary. We describe the activities briefly, followed by a discussion of the girls' experiences, drawing primarily from interviews conducted at the end of each activity."
Using Sensor Technologies to Introduce Secondary Education Students to Computational Thinking and Computer Science,"Gendreau Chakarov, Alexandra and Biddy, Quentin and Runberg, Derek",2020,"This workshop will explore using school-based sensor technologies to bring computational thinking into middle school science and integrated STEM courses. Participants will learn how to introduce students to sensor technologies and support their understanding of how to use sensor technologies to ""make the invisible, visible."" We will use the sensor technologies to conduct a variety of short, real-world investigations, such as measuring air quality and noise levels using the available sensors. Teachers will largely play the role of students as they learn to program the sensor technologies, gather and analyze data, and create displays to share their findings. The workshop will use an open-access, one-week sensor immersion curriculum, and ideas for improvements will be solicited from by the group. No prior experience using sensor technologies or programming is needed."
Using Structural Equation Modeling to Examine the Relationship Between Preservice Teachers’ Computational Thinking Attitudes and Skills,"Cutumisu, Maria and Adams, Catherine and Glanfield, Florence and Yuen, Connie and Lu, Chang",2022,Sin Valor
Using Student Performance to Assess CS Unplugged Activities in a Classroom Environment,"Rodriguez, Brandon and Rader, Cyndi and Camp, Tracy",2016,"Computer Science Unplugged activities have been shown to be successful in increasing student interest in computer science when used in outreach and after school events. There is less research available on adapting these extra-curricular activities for use in a classroom setting, where there are more students and the activities must support educational goals, not just changes in attitude. We describe our work in updating several existing CS Unplugged activities as well as introducing some new activities for use in an American middle school classroom. One challenge when using CS Unplugged activities is to determine what, if anything, students are learning. In this paper we detail one approach that links the updated activities to computational thinking skills, then incorporates worksheets where students illustrate their understanding."
Using Topic Modeling to Extract Pre-Service Teachers’ Understandings of Computational Thinking From Their Coding Reflections,"Cutumisu, Maria and Guo, Qi",2019,Sin Valor
Using video analysis and learning analytics to understand programming trajectories in data science activities with Scratch,"Fernandez, Cassia and Freitas, Jo\~{a}o Adriano and Lopes, Roseli de Deus and Blikstein, Paulo",2022,"In this paper, we describe a new automated tool to analyze how students create their projects on Scratch 3.0, with the goal of understanding learning trajectories in a way that considers students’ programming processes and practices, moving beyond the analysis of computational thinking concepts as evidence of learning. Drawing on a combination of qualitative video analysis and temporal learning analytics, we also present preliminary data from a pilot study that illustrates some possibilities afforded by this type of analytical tool. We expect that our tool can help researchers to better understand learning in the context of data visualization activities with block-based programming languages by shedding light on processes that are usually invisible and, thus, better support students in their diverse learning pathways."
Validation of a Bebras-Based Test to Assess Computational Thinking Abilities in First-Year College Students,"Meza, Federico and V\'{a}squez, Andrea and San Mart\'{\i}n, Daniel",2024,"The lack of clarity about the definition of Computational Thinking (CT) undermines its assessment and the formulation of effective learning strategies for its development. We propose an assessment tool in Spanish, designed by carefully selecting Bebras tasks, to measure four specific CT skills in first-year university students with no prior programming experience. The test was validated with a sample of 980 students from a Latin American university. We found a high, positive correlation between test results and Math test results from the National University Selection System, and a medium, positive correlation between test results and grades from the midterm exam in a Programming course. An acceptable level of internal consistency was found (Cronbach's alpha=0.70). We examined the validity of the test using Classical Test Theory. One question showed poor discrimination potential. Its elimination from the test increased the internal consistency, so we propose to replace it."
Vectors of CT-ification: Integrating Computational Activities in STEM Classrooms,"Bain, Connor and Wilensky, Uri",2020,"While the Next Generation Science Standards set an expectation for developing computer science and computational thinking (CT) practices in the context of science subjects, it is an open question as to how to create curriculum and assessments that develop and measure these practices. In this poster, we show one possible solution to this problem: to introduce students to computer science through infusing computational thinking practices (""CT-ifying"") science classrooms. To address this gap, our group has worked to explicitly characterize core CT-STEM practices as specific learning objectives and we use these to guide our development of science curriculum and assessments. However, having these learning objectives in mind is not enough to actually create activities that engage students in CT practices. We have developed along with science teachers, a strategy of examining a teacher's existing curricula and identifying potential activities and concepts to ""CT-ify"", rather than creating entirely new curricula from scratch by using the concept of scale as an ""attack vector'' to design science units that integrate computational thinking practices into traditional science curricula. We demonstrate how we conceptualize four different versions of scale in science, 1. Time, 2. Size, 3. Number, and 4. Repeatability. We also present examples of these concepts in traditional high school science curricula that hundreds of students in a large urban US school district have used."
Video Analysis of Student Challenges and Interactions in Computational Thinking-integrated Botany,"Liu, Ruohan and Luo, Feiya and Israel, Maya",2020,"This study aimed to understand elementary students' challenges and interactions in computational thinking-integrated botany through robotics activities. Data was collected from screen-casting videos and analyzed using Collaborative Computing Observation Instrument (CCOI), a web-based analysis instrument with nodes and paths that classify and specify students' computing experience. The results revealed that all participants engaged in independent work for most of the time, with short interactions on 1) general computer technology issues; 2) software navigating issues; 3) questions about academic content; 4) computing discussion with the instructor; 5) informing the instructor about task accomplishment. The findings of this study will provide important insights to CS researchers, educators, and elementary teachers regarding CT-integration research and practice."
Virtual Laboratory-Based Student Worksheets Development for Computational Thinking Practices,"Rakhmawati, Lusia and Agung, Achmad Imam and Rohman, Miftahur",2022,Sin Valor
Virtual/Mixed Reality Control of a Game Through Scratch,"Sharaf, Nada and Ahmed, Ghada and Ihab, Sama",2020,Sin Valor
Visual Design Problem-based Learning in a Virtual Environment Improves Computational Thinking and Programming Knowledge,"Banic, Amy and Gamboa, Ruben",2019,Sin Valor
Visual sensor networks: analysis of environmental impacts via computational thinking,"Brown-Gaines, Tisha",2021,"Visual Sensor Networks (VSNs) are comprised of camera nodes that are capable of acquiring, distributing, and processing images. Thus, providing rich information about a given event. However, image sensing is an extremely powerful electrical consuming mechanism, causing visual sensor networks to indirectly contribute to greenhouse gas emissions. As our society adopts emerging technologies central to the field of Internet of Things (IoTs) such as smart homes and smart surveillance systems, it is imperative to consider energy consumption and efficiency to create environmentally friendly technology. In this study, we will investigate the environmental footprint of visual sensors and develop a program that optimizes object tracking and energy efficiency via computational thinking. The energy consumption of a PixyCam2 will be measured with a multi-meter while performing several algorithms to analyze various metrics central to the visual sensor's functionality."
Visual StoryCoder: A Multimodal Programming Environment for Children’s Creation of Stories,"Dietz, Griffin and Tamer, Nadin and Ly, Carina and Le, Jimmy K and Landay, James A.",2023,"Computational thinking (CT) education reaches only a fraction of young children, in part because CT learning tools often require expensive hardware or fluent literacy. Block-based programming environments address these challenges through symbolic graphical interfaces, but users often need instructor support to advance. Alternatively, voice-based tools provide direct instruction on CT concepts but can present memory and navigation challenges to users. In this work, we present Visual StoryCoder, a multimodal tablet application that combines the strengths of each of these approaches to overcome their respective weaknesses. Visual StoryCoder introduces children ages 5–8 to CT through creative storytelling, offers direct instruction via a pedagogical voice agent, and eases use through a block-like graphical interface. In a between-subjects evaluation comparing Visual StoryCoder to a leading block-based programming app for this age group (N = 24), we show that Visual StoryCoder is more understandable to independent learners, leads to higher-quality code after app familiarization, and encourages personally meaningful projects."
Vocabulary Acquisition through Computer Science Modeling: A Comparative Study on Visual and Textual Vocabulary Instruction,"Rottenhofer, Marina and Leitner, Sandra and Emara, Mona and Sabitzer, Barbara and Rankin, Thomas",2023,"In Computer Science (CS), modeling with diagrams is a well-known practice to visualize complex software systems or database structures. However, modeling with e.g., entity-relationship diagrams or UML (Unified Modeling Language) is also helpful in other disciplines. In this research, CS models are used as a teaching and learning tool in foreign language acquisition. The field of computer science offers a variety of models that can visualize states, as well as processes and, are therefore very suitable for the different areas of language teaching (e.g., reading, writing, grammar-, or vocabulary acquisition). With CS modeling as a teaching and learning strategy, two main objectives are addressed: enhancing learning and retention and fostering computational thinking skills. This paper presents best practice examples on how to meet these two objectives as well as the results of a crossover study, where we investigated whether vocabulary acquisition is facilitated when it is thematically preorganized in class diagrams. The results illustrate that pupils who studied with the class diagram strategy had significantly higher recall performance than pupils who studied with the list of words. A qualitative analysis of the participants’ feedback after the intervention revealed decisive criteria for their preferences regarding the learning format."
Voices of Elementary Computer Science Teachers: Computer Science Integration Rationales and Practices,"Liao, Yin-Chan and Kim, Jiyoung and Ottenbreit-Leftwich, Anne T. and Karlin, Michael and Guo, Meize",2024,"Objectives. Computer Science (CS) education has become increasingly prevalent in elementary schools because of multiple rationales, such as the importance of computational literacy and the growing demand for CS-related workforce preparation. As elementary CS standards continue to be adopted by many states, more examples and voices from the field may help educators understand what effective computational thinking (CT)/CS integration looks like in practice. Method. We employed a descriptive qualitative approach to study eight award-winning K-8 CS teachers and aimed to answer three research questions: (1) What were elementary CS teachers’ rationales for CT/CS integration? (2) How do elementary CS teachers integrate CT/CS into their classroom practices? (3) What are the needs of CS teachers for meaningful CT/CS integration in elementary schools? Data were collected through interviews, a questionnaire, and artifacts and analyzed using thematic analysis. Findings. Our findings of elementary CS teachers’ rationales for CT/CS integration encompassed its essential nature as a literacy skill, its potential to promote equity in education, and its alignment with standards across various disciplines. To support CT/CS integration at the elementary level, CS teachers described important aspects with examples from their instructional practices: (a) Real-world applications; (b) hands-on activities; (c) strategies to scaffold and guide student learning; (d) collaboration with classroom teachers; and (e) support from professional development (PD). Conclusion. The study results shared CS teachers’ voices from practice and shed light on the urgent need for more support and PD opportunities for both homeroom teachers and CS teachers in elementary schools, as well as the crucial need for multiple levels of support within K-12 school systems. Continuous efforts in creating systematic and sustainable PD plans and supporting collaborative professional communities for teachers within the instructional context are a must to help prepare our elementary students with the essential CS knowledge and skills they need to thrive in this technology-rich society."
VotestratesML: A High School Learning Tool for Exploring Machine Learning and its Societal Implications,"Kaspersen, Magnus Hoeholt and Bilstrup, Karl-Emil Kjaer and Van Mechelen, Maarten and Hjorth, Arthur and Bouvin, Niels Olof and Petersen, Marianne Graves",2021,"The increased use of Artificial Intelligence, and in particular Machine Learning (ML) raises the need for widespread AI literacy, in three particular areas related to ML; understanding how ML works, the process behind creating ML models, and the ability to reflect on its personal and societal implications. Existing ML learning tools focus primarily on the first two areas, and to a lesser degree the third. In order to address this, we designed VotestratesML; a tool allowing K-12 students to build models and make predictions based on real world voting data. Based on in-situ deployments of VotestratesML, we reflect on opportunities and challenges for engaging K-12 students in understanding and reflecting on ML. We find that the design of VotestratesML supports students’ engagement in all three areas of ML, through grounding ML in a known subject area and allowing for collaboration and competition."
Voting item: story-work in human-centric software engineering,"Rainer, Austen and Menon, Catherine",2022,"Background: Stories and story-work (in the fuller sense of those words) are recognised as a legitimate focus of study in other scientific disciplines.Information, Idea, Arguments: We are considering forming an inter-disciplinary research programme to explore how story-work can contribute to human-centric software engineering.Vote: What should we focus on to help ensure the proposed programme produces scientifically-valid, impactful research?"
Voting Item: Story-work in human-centric software engineering,"Rainer, Austen and Menon, Catherine",2022,Sin Valor
VWorld: an immersive VR system for learning programming,"Jin, Qiao and Liu, Yu and Yuan, Ye and Yarosh, Lana and Rosenberg, Evan Suma",2020,"The growing development and commercialization of Virtual Reality (VR) allow more children to get access to this technology. VR features a new, more emotional relevant experience with a sense of presence and high interactivity. In this paper, we present VWorld, an immersive VR system designed to boost children's creativity and computational thinking skill. VWorld enables children to create their own virtual world by putting 3D objects on a miniature map, then explore the world and control the chosen objects by constructing program sequences. We present the design and implementation of VWorld system, with the design considerations of children in our VR environment, and conduct the preliminary evaluation and the future plan of the study."
"We Have Questions: Pedagogical, Technical, and Procedural Assistance Requests in a Large Computational Thinking Curriculum Research Project (Abstract Only)","Nickerson, Hilarie and Bush, Jeffrey and Endo, Yasko Chanoki",2016,"As teacher professional development efforts continue to scale to meet the growing demand for computer science educators, more individuals with little formal preparation in the discipline are seeking training. For this reason, it is important to understand the kinds of questions that these teachers, along with administrators and IT staff, are asking professional development providers. This research examines questions received by Scalable Game Design (SGD), a project that engages students in computing through game and simulation design activities. SGD has provided training for more than 300 teachers since 2009. We have found several dimensions of interest in the question pool. The major categories of questions received are pedagogical, technical, and procedural, and we present a generalizable taxonomy of question types plus specific examples. In addition, question content and questioner roles fluctuate throughout the professional development and classroom implementation cycle, from initial inquiries to requests regarding next steps. Knowledge of these factors can lead to adjustments in training content to reduce questions later on and potentially increase teacher confidence; moreover, this information can inform planning for support resources, an especially important activity when project growth is forecast. We also discuss how our support structures have changed over the life of the project and compare them to two other curriculum initiatives that rely on unique software environments. Our future work will investigate the characteristics of teachers who are asking particular kinds of questions, including their disciplinary backgrounds, experience in the classroom, familiarity with SGD, and instructional environments."
We Need to Fix Secondary School Computer Science,"Bernat, Alex",2023,"In recent years, the push for secondary school students to “learn to code” has increased significantly. Currently, about half of secondary schools in the United States have computer science education available to students in some form. Unfortunately, many of these schools choose a curriculum bogged down in the nuances of programming language syntax, leaving students bored, confused, unable to apply their learning to useful problems outside the classroom, and therefore disheartened about further pursuing a more conceptual computer science education in college. As a current undergraduate who has helped teach secondary school computer science, I witnessed firsthand the problems with current approaches. I, therefore, propose a shift in the focus of computing education research away from teaching “coding” effectively to elucidating a more abstract but nevertheless more pragmatic characterization of computer science as an academic field, rather than programming as a trade."
Wearable Learning: Multiplayer Embodied Games for Math,"Arroyo, Ivon and Micciollo, Matthew and Casano, Jonathan and Ottmar, Erin and Hulse, Taylyn and Rodrigo, Ma. Mercedes",2017,"We present a new technology-based paradigm to support embodied mathematics educational games, using wearable devices in the form of SmartPhones and SmartWatches for math learning, for full classes of students in formal in-school education settings. The Wearable Learning Games Engine is web based infrastructure that enables students to carry one mobile device per child, as they embark on math team-based activities that require physical engagement with the environment. These Wearable Tutors serve as guides and assistants while students manipulate, measure, estimate, discern, discard and find mathematical objects that satisfy specified constraints. Multi-player math games that use this infrastructure have yielded both cognitive and affective benefits. Beyond math game play, the Wearable Games Engine Authoring Tool enables students to create games themselves for other students to play; in this process, students engage in computational thinking and learn about finite-state machines. We present the infrastructure, games, and results for a series of experiments on both game play and game creation."
Web Systems for the Development of Computational Thinking in Software Engineering Students: A Systematic Literature Review,"Pale-Parra, Daniel and Pérez-Salazar, Christian and Sánchez-García, Ángel J. and Ocharán-Hernández, Jorge Octavio",2023,Sin Valor
What Competencies Do Student Teachers Have? - Developing a Test Instrument to Assess Algorithm-Related Competencies,"Voorgang, Benjamin and Brinda, Torsten",2020,"During the last years there have been intense discussions about how to include the acquisition of digital competencies in school education. The implementation is highly dependent on digitally-skilled educators. Currently, learning offers for a basic computing education of all teachers are needed and developed in many places. However, not much is known about computing competencies and conceptions of student and in-service teachers, who would take such courses. Also, there is a need of a proper test instrument measuring computing competencies that (student) teachers might possess not necessarily due to formal computing education but due to their everyday use of computing systems. Therefore, this project aims to create such a test instrument which measures competencies in the field of algorithm without testing explicit computing knowledge."
What Concepts of Computational Thinking are Being Effectively Used in K12 Education: A Systematic Mapping,"Hagstrom, Rodrigo and Rezende, Calebe and de Oliveira Brandão, Leonidas and Brandão, Anarosa Alves Franco and da Silva Neves Lima, Priscila",2024,Sin Valor
What do the Teachers Think? Introducing Computational Thinking in the Primary School Curriculum,"Duncan, Caitlin and Bell, Tim and Atlas, James",2017,"This paper reports on the preliminary results of an ongoing study examining the teaching of new primary school topics based on Computational Thinking in New Zealand. We analyse detailed feedback from 13 teachers participating in the study, who had little or no previous experience teaching Computer Science or related topics. From this we extract key themes identified by the teachers that are likely to be encountered when deploying a new curriculum, including unexpected opportunities for cross-curricula learning, development of students' social skills, and engaging a wide range of students. From here we articulate key concepts and issues that arise in the primary school context, based on feedback during professional development for the study, and direct feedback from teachers on the experience of delivering the new material in the classroom."
What Do We Know about Assessing Computational Thinking? A New Methodological Perspective from the Literature,"Liu, Ruohan and Luo, Feiya and Israel, Maya",2021,"Developing computational thinking (CT) assessment methods appropriate for elementary students is attracting growing attention as CT research in elementary education progresses. To review the current elementary CT assessments for potential gaps, and seek additional methodologies to expand our understanding of CT, an integrative literature review of 75 research papers was performed in two phases. In Phase One, we conducted a critical analysis of existing elementary CT assessment studies. Key results include: 1) Artifact analysis, CT assessment items, and interviews are the most common methods utilized to assess CT in elementary grades; 2) Existing CT assessments primarily focus on students' computational artifacts and performance on CT tests; however, strategies to study students' thought processes during CT problem-solving are limited and under-utilized. Guided by the results of phase one, along with the theoretical perspective that connected CT to visual processing ability, in phase two we performed a survey of literature in the area of understanding cognitive processes through eye-tracking (i.e., visual attention) and think-aloud methodologies (i.e., verbalization). We focused on eye-tracking and think-aloud methodologies as these have been used to understand students' cognitive processes during problem-solving in other areas. Based on these findings, we proposed that in addition to current established methodologies, eye-tracking with the think-aloud technique can provide new insights into students' CT."
What Happened to the Geometry? Examining Spatial and Mathematical Concepts in Computational Toys and Kits for Young Children,"Clarke-Midura, Jody and Shumway, Jessica F. and Ashineh, Anahita and Zandi, Alireza and Clawson, Whitney",2024,"This paper explores the design of computational toys and kits for young children (ages 4-7) as tools for learning integrated mathematical, spatial, and computational thinking concepts. Specifically, we examine how the design features of the toys and kits represent the concepts of rotation on a point and spatial orientation of the agent. We examine toys and kits sold commercially, developed through research, and used in early childhood classrooms. Our findings indicate that the mathematical and spatial concepts are overlooked in some designs. Prior research examined toys for their affordances related to computational thinking, the present study contributes to understanding of how these toys and kits have the potential to foster foundational mathematics and spatial skills. We discuss implications for design of toys and kits as well as recommendations for future research."
What Makes Computational Thinking so Troublesome?,"Pears, Arnold and Tedre, Matti and Valtonen, Teemu and Vartiainen, Henriikka",2021,Sin Valor
What Skills Do You Need When Developing Software Using ChatGPT? (Discussion Paper),"Jeuring, Johan and Groot, Roel and Keuning, Hieke",2024,"Since the release of LLM-based tools such as GitHub Copilot and ChatGPT the media and popular scientific literature, but also journals such as the Communications of the ACM, have been flooded with opinions how these tools will change programming. The opinions range from “machines will program themselves”, to “AI does not help programmers”. Of course, these statements are meant to to stir up a discussion, and should be taken with a grain of salt, but we argue that such unfounded statements are potentially harmful. Instead, we propose to investigate which skills are required to develop software using LLM-based tools. In this paper we report on an experiment in which we explore if Computational Thinking (CT) skills predict the ability to develop software using LLM-based tools. Our results show that the ability to develop software using LLM-based tools can indeed be predicted by the score on a CT assessment. There are many limitations to our experiment, and this paper is also a call to discuss how to approach, preferably experimentally, the question of which skills are required to develop software using LLM-based tools. We propose to rephrase this question to include by what kind of people/programmers, to develop what kind of software using what kind of LLM-based tools."
What We Can Learn About Student Learning From Open-Ended Programming Projects in Middle School Computer Science,"Grover, Shuchi and Basu, Satabdi and Schank, Patricia",2018,"Block-based programming environments such as Scratch, App Inventor, and Alice are a key part of introductory K-12 computer science (CS) experiences. Free-choice, open-ended projects are encouraged to promote learner agency and leverage the affordances of these novice-programming environments that also support creative engagement in CS. This mixed methods research examines what we can learn about student learning from such programming artifacts. Using an extensive rubric created to evaluate these projects along several dimensions, we coded a sample of ~80 Scratch and App Inventor projects randomly selected from 20 middle school classrooms in a diverse urban school district in the US. We present key elements of our rubric, and report on noteworthy trends including the types of artifacts created and which key programming constructs are or are not commonly used. We also report on how factors such as students' gender, grade, and teachers' teaching experience influenced students' projects. We discuss differences between programming environments in terms of artifacts created, use of computing constructs, complexity of projects, and use of features of the environment for creativity, interactivity, and engagement. Our findings will help educators of introductory computing be more cognizant of how best to leverage the programming environments they are using, and what aspects they need to focus on as they attempt to address the learning needs of all in ""CS For All."""
When Drone Meets AI Education: Boosting High School Students’ Computational Thinking and AI Literacy,"Ching Wang, Sandy I and Zhi Feng Liu, Eric and Huang, Yuan Yen and Yu Sang, Hung",2024,Sin Valor
When Positive Perception of the Robot Has No Effect on Learning,"Nasir, Jauwairia and Norman, Utku and Bruno, Barbara and Dillenbourg, Pierre",2020,Sin Valor
Why computational thinking should be integrated into the curriculum,"Qualls, Jake A. and Sherrell, Linda B.",2010,"Computational Thinking (CT) is an approach to problem solving that consolidates logic skills with core computer science concepts. This survey paper reviews recent efforts to integrate CT into primary, secondary and post-secondary curricula. The paper should prove beneficial to instructors interested in investigating this important topic."
"Why programmers should curb their enthusiasm, and thinking about computational thinking","Bugayenko, Yegor and Guzdial, Mark",2019,"The Communications Web site, http://cacm.acm.org, features more than a dozen bloggers in the BLOG@CACM community. In each issue of Communications, we'll publish selected posts or excerpts.twitterFollow us on Twitter at http://twitter.com/blogCACMhttp://cacm.acm.org/blogs/blog-cacmYegor Bugayenko ponders the dangers of ""hazardous enthusiasm,"" while Mark Guzdial considers whether the need to teach computational thinking can be ""designed away."""
"Widening the scope of FabLearn Research: Integrating Computational Thinking, Design and Making","Eriksson, Eva and Iversen, Ole Sejer and Baykal, G\""{o}k\c{c}e Elif and Van Mechelen, Maarten and Smith, Rachel and Wagner, Marie-Louise and Fog, Bjarke Vognstrup and Klokmose, Clemens and Cumbo, Bronwyn and Hjorth, Arthur and Musaeus, Line Have and Petersen, Marianne Graves and Bouvin, Niels Olof",2019,"FabLearn has primarily been concerned with studies of digital fabrication technologies in education, however, we witness an increased interest in integrating other related topics such as computational thinking, digital design and empowerment as an integrated whole. In this paper, we present a five years design research program for digital fabrication, computational thinking and design, to highlight why the FabLearn community should embrace this wider agenda to accomplish its ultimate goal to encourage a new generation to critically and constructively engage in the design of digital technology. The contribution of this paper is a number of open questions and considerations regarding the scope of European FabLearn research that we hope the community will consider and that might give rise to further discussions."
Will it stick? exploring the sustainability of computational thinking education through game design,"Koh, Kyu Han and Repenning, Alexander and Nickerson, Hilarie and Endo, Yasko and Motter, Pate",2013,"A strategy exposing middle school students to computer science through game design appears to be a promising means to mitigate the computer science pipeline challenge. Particularly when short game design activities are integrated into already existing middle school courses, research suggests that game design is effective in broadening participation and motivating large numbers of students, along with large percentages of women and minorities. A study with over 10,000 students is exploring the sustainability of this approach and finding positive responses to inquiries such as these: Do teachers continue to use game design? Can they advance beyond extrinsic rewards such as research stipends? After building one game, do students advance, building more games or even STEM simulations?"
WIP: DEPICT for Out-of-School Time (DEPICT4OST): Guiding Undergraduates in the Development and Implementation of Computational-Infused Writing Activities,"Torres, Ruth and Hug, Sarah T. and Delval, Adan and Chi, Wendy and Pontelli, Enrico",2024,Sin Valor
Wobblies: Designing Intentional Playthings with Young Children,"Matthews, Sarah and Nicholas, Maria and Paatsch, Louise and Kervin, Lisa and Wyeth, Peta",2025,"This paper analyses a novel tangible technology in early childhood environments as a boundary object. Objects in early childhood environments often share space between adults’ and children's objectives. By considering these objects as boundary objects, designers are led to explore how children appropriate objects for playful learning activities beyond adult objectives. This paper discusses Wobblies (see Figure 1), a novel technology probe, to interrogate how a socially-motivated design with conditional and positional interactive behaviour was understandable to children, and how they appropriated the probe in playful activities. We deployed the probe in a rural Australian preschool in a free-play environment. Initial observational findings show that the children understood the procedure of the interactions and moved from exploring to constructive play activities."
"Work in Progress Workshop: Themes, Challenges and Opportunities","Maguire, Joseph and Brown, Neil",2024,"The Works-in-Progress (WiP) workshop started at the United Kingdom and Ireland Computing Education Research (UKICER) conference in 2023. This ‘grown-up doctoral consortium’ is designed to provide a space for academics, researchers and educators to discuss works that would benefit from feedback and critique. The aim is to provide a space for critical but constructive researchers to support each other in improving works to take them to their next level. The present editorial outlines the structure of the workshop, the invited participants for the present workshop and a brief overview of the themes observed."
Work in progress — analyzing the gap between diagrams and code in computer science,"Davies, Stephen",2008,Sin Valor
Work in progress — Integrating computational and engineering thinking through online design and simulation of multidisciplinary systems,"Magana, Alejandra J. and Marepalli, Prabhakar and Clark, Jason V.",2011,Sin Valor
Work in progress — The video scenario approach for developing computational and entrepreneurial thinking skills,"Spezialetti, Madalene",2010,Sin Valor
Work in progress — Vertically integrated teams to inspire student interest in computing,"Hislop, Gregory W. and Towhidnejad, Massood and Marcy, William M.",2011,Sin Valor
Work in progress: ACTIVATE: Advancing computing and technology interest and innovation through teacher education,"Cortina, Thomas J. and Dann, Wanda P. and Frieze, Carol and Ciminillo, Cara and Tananis, Cynthia and Trahan, Keith",2012,Sin Valor
Work in progress: Integrating computation across engineering curricula: Preliminary impact on students,"Vergara, Claudia E. and Briedis, Daina and Buch, Neeraj and Esfahanian, Abdol-Hossein and Sticklen, Jon and Urban-Lurain, Mark and Paquette, Louise and Dresen, Cindee and Frazier, Kysha",2012,Sin Valor
Work in Progress: Integration of AI Tools on an Open-Ended Computer Programming Project,"Hammond, Emily and Faber, Courtney",2024,Sin Valor
Work in progress: Peruvian curricular meshes,"Minaya, Jaime and Marini, Piero and Alfaro, Gonzalo and Tanta, Johan and Socualaya, Fernando and Temoche, Ricardo and Diaz, Jose",2019,Sin Valor
Work in progress: SCRATCHTON,"Palma, Diego and Flores, Del Piero and Miraval, Jean and Rodríguez, Aarón and Espinoza, Daniel and Díaz León, José",2019,Sin Valor
Work in progress: Teaching computational thinking in middle and high school,"Yevseyeva, Kristina and Towhidnejad, Massood",2012,Sin Valor
Work-in-progress—Developing an Evidence-Centered Model for Computational Thinking in Virtual Worlds with Children with Autism,"Barrett, Alex and Zhang, Nuodi and Ke, Fengfeng and Moon, Jewoong and Sokolikj, Zlatko",2022,Sin Valor
Workshop: It's more than coding- using video scenarios to engage students in computing,"Spezialetti, Madalene",2012,Sin Valor
You Hacked My Program! Teaching Cybersecurity using Game-based Learning,"Tareque, Md. Hasan and Deutekom, Steven and Anvik, John and Bashir, Maimoona",2024,"As cyberthreats become more commonplace, the teaching of cybersecurity concepts at an introductory level is becoming increasingly important. However, teaching this subject in an engaging manner is challenging. This work investigates the use of a game-based learning approach to teaching cybersecurity concepts in the form of a card game called Program Wars. Within the game, players use cards to create a representation of a computer program while launching cyberattacks at their opponents and defending their own program. As the initial version of the game presented cybersecurity concepts at only a high-level, Program Wars&nbsp;v.2.0&nbsp;was created to introduce players to eight common cyberattacks and the tools used to defend against them. The results of a user study show that after playing Program Wars&nbsp;v.2.0&nbsp;a player’s knowledge of cybersecurity concepts is improved, showing that our game-based learning approach provides an effective means for introducing cybersecurity concepts to those with little or no prior knowledge. As Program Wars&nbsp;is a freely available web-based game, it can easily be integrated into classes to improve a student’s knowledge of cybersecurity concepts."
YouTube aware Personalized Ranking System for Future ICT Education,"Lee, Jihyeon and Oh, Hayoung",2018,Sin Valor
ZoAM GameBot: A Journey to the Lost Computational World in the Amazonia,"Pessoa, Larissa and Martins, Lia and Hsu, Meng and de Freitas, Rosiane",2024,"The search for alternative teaching–learning processes that attract more interest and involvement of young people has inspired the development of a game with a chatbot architecture based on interactive storytelling and multiple learning paths. Thus, we introduce in this article the GameBot ZoAm, developed for the Discord instant messaging and social platform. ZoAm offers a unique learning experience centered around storytelling, focusing on fundamental computing concepts and logical challenges that enhance computational thinking skills. Furthermore, the game also promotes an appreciation for Amazonian culture and folklore, with decision-making with human values. An action research study was conducted involving students from the last years of the end of elementary school. The research utilized a heuristic analysis based on the Gameplay Heuristics (PLAY) by Desurvire and Wiberg (ANO) and the evaluation model proposed by Korhonen and Koivisto (ANO) for mobile devices. The analysis employed a reduced and merged set of heuristics from these models, suited for the GameBot's context, focusing on (I) usability, (II) gameplay and immersion, and (III) mobility. Regarding the reliability coefficient used to evaluate the survey applied to students after playing the GameBot, Cronbach's Alpha and Guttman Lambda-6 (G6(smc)) coefficients were applied. These metrics were chosen to ensure the internal consistency and reliability of survey items, reflecting on how effectively the questions measured the focuses proposed by the heuristic analysis. The findings indicate that the game has the potential to facilitate the assimilation of the integrated concepts and sustain student interest throughout gameplay."
“Evolution”: Design and Implementation of Digital Educational Material to Strengthen Computational Thinking Skills,"Rico Lugo, Mauricio Javier and Olabe, Xabier Basogain and Niño, Nancy Moreno",2018,Sin Valor
“It Must Include Rules”: Middle School Students’ Computational Thinking with Computer Models in Science,"Wiese, Eliane S. and Linn, Marcia C.",2021,"When middle school students encounter computer models of science phenomenon in science class, how do they think those computer models work? Computer models operationalize real-world behaviors of selected variables, and can simulate interactions between the modeled elements through programmed instructions. This study explores how middle school students think about the high-level semantic meaning of those instructions, which we term rules. To investigate this aspect of students’ computational thinking, we developed the Computational Modeling Inventory and administered it to 253 7th grade students. The Inventory included three computer models that students interacted with during the assessment. In our sample, 99% of students identified at least one key rule underlying a model, but only 14% identified all key rules; 65% believed that model rules can contradict; and 98% could not distinguish between emergent patterns and behaviors that directly resulted from model rules. Despite these misconceptions, compared to the “typical” questions about the science content alone, questions about model rules elicited deeper science thinking, with 2--10 times more responses including reasoning about scientific mechanisms. These results suggest that incorporating computational thinking instruction into middle school science courses might yield deeper learning and more precise assessments around scientific models."
”CodeInnova”: A Unified Framework for Teaching Programming and Computational Thinking In Primary Schools,"Zhidkikh, Denis and Fagerlund, Janne and Peltonen, Marika and Vesisenaho, Mikko",2021,"Teaching programming and computational thinking (CT) in primary schools have become more common in the last decade. However, there has been little international consensus on what teaching the topics encompass. We present CodeInnova, a framework developed jointly between four partnering countries for teaching programming and CT in K–9. In this paper, we present the curriculum for teaching CT and the accompanying teaching materials developed in CodeInnova. We also discuss preliminary results of testing the developed resources in classrooms."
”Roteco” - a Swiss teacher community for educational robotics,"Assaf, Dorit and Reyes Mury, Sophia and Negrini, Lucio and Skweres, Melissa",2022,"Computer Science has been introduced as a new subject in the compulsory school curriculum in Switzerland. Research on educational robotics has highlighted potentials of using robots as a hands-on tool to foster computational thinking skills. However, to date these kind of activities are not carried out systematically in schools. To support teachers, a teacher community for educational robotics and computer science education ”Roteco” has been established. Teachers can register for free to a digital platform to find classroom-ready activities, news, articles, and information about training and workshops in their region. Roteco further organizes webinars and events to build the community. Within two years, more than 1,400 teachers have joined the community. In this abstract, we present Roteco, our experiences in establishing the community, platform analytics data as well as a short summary of results from two surveys conducted in 2020 with 87 and in 2021 with 48 teachers. Detailed results can be found in the corresponding journal article [11]."
